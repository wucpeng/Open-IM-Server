// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg/msg.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	msg/msg.proto

It has these top-level messages:
	MsgDataToMQ
	MsgDataToDB
	PushMsgDataToMQ
	MsgDataToMongoByMQ
	GetMaxAndMinSeqReq
	GetMaxAndMinSeqResp
	SendMsgReq
	SendMsgResp
	ClearMsgReq
	ClearMsgResp
	SetMsgMinSeqReq
	SetMsgMinSeqResp
	SetSendMsgStatusReq
	SetSendMsgStatusResp
	GetSendMsgStatusReq
	GetSendMsgStatusResp
	DelSuperGroupMsgReq
	DelSuperGroupMsgResp
	GetSuperGroupMsgReq
	GetSuperGroupMsgResp
	GetWriteDiffMsgReq
	GetWriteDiffMsgResp
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import server_api_params "Open_IM/pkg/proto/sdk_ws"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgDataToMQ struct {
	Token       string                     `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	OperationID string                     `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	MsgData     *server_api_params.MsgData `protobuf:"bytes,3,opt,name=msgData" json:"msgData,omitempty"`
}

func (m *MsgDataToMQ) Reset()                    { *m = MsgDataToMQ{} }
func (m *MsgDataToMQ) String() string            { return proto.CompactTextString(m) }
func (*MsgDataToMQ) ProtoMessage()               {}
func (*MsgDataToMQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgDataToMQ) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MsgDataToMQ) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *MsgDataToMQ) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

type MsgDataToDB struct {
	MsgData     *server_api_params.MsgData `protobuf:"bytes,1,opt,name=msgData" json:"msgData,omitempty"`
	OperationID string                     `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *MsgDataToDB) Reset()                    { *m = MsgDataToDB{} }
func (m *MsgDataToDB) String() string            { return proto.CompactTextString(m) }
func (*MsgDataToDB) ProtoMessage()               {}
func (*MsgDataToDB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgDataToDB) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func (m *MsgDataToDB) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type PushMsgDataToMQ struct {
	OperationID  string                     `protobuf:"bytes,1,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	MsgData      *server_api_params.MsgData `protobuf:"bytes,2,opt,name=msgData" json:"msgData,omitempty"`
	PushToUserID string                     `protobuf:"bytes,3,opt,name=pushToUserID" json:"pushToUserID,omitempty"`
}

func (m *PushMsgDataToMQ) Reset()                    { *m = PushMsgDataToMQ{} }
func (m *PushMsgDataToMQ) String() string            { return proto.CompactTextString(m) }
func (*PushMsgDataToMQ) ProtoMessage()               {}
func (*PushMsgDataToMQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PushMsgDataToMQ) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *PushMsgDataToMQ) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func (m *PushMsgDataToMQ) GetPushToUserID() string {
	if m != nil {
		return m.PushToUserID
	}
	return ""
}

type MsgDataToMongoByMQ struct {
	LastSeq       uint64         `protobuf:"varint,1,opt,name=lastSeq" json:"lastSeq,omitempty"`
	AggregationID string         `protobuf:"bytes,2,opt,name=aggregationID" json:"aggregationID,omitempty"`
	MessageList   []*MsgDataToMQ `protobuf:"bytes,3,rep,name=messageList" json:"messageList,omitempty"`
	TriggerID     string         `protobuf:"bytes,4,opt,name=triggerID" json:"triggerID,omitempty"`
}

func (m *MsgDataToMongoByMQ) Reset()                    { *m = MsgDataToMongoByMQ{} }
func (m *MsgDataToMongoByMQ) String() string            { return proto.CompactTextString(m) }
func (*MsgDataToMongoByMQ) ProtoMessage()               {}
func (*MsgDataToMongoByMQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MsgDataToMongoByMQ) GetLastSeq() uint64 {
	if m != nil {
		return m.LastSeq
	}
	return 0
}

func (m *MsgDataToMongoByMQ) GetAggregationID() string {
	if m != nil {
		return m.AggregationID
	}
	return ""
}

func (m *MsgDataToMongoByMQ) GetMessageList() []*MsgDataToMQ {
	if m != nil {
		return m.MessageList
	}
	return nil
}

func (m *MsgDataToMongoByMQ) GetTriggerID() string {
	if m != nil {
		return m.TriggerID
	}
	return ""
}

// message PullMessageReq {
//  string UserID = 1;
//  int64 SeqBegin = 2;
//  int64 SeqEnd = 3;
//  string OperationID = 4;
// }
//
// message PullMessageResp {
//  int32 ErrCode = 1;
//  string ErrMsg = 2;
//  int64 MaxSeq = 3;
//  int64 MinSeq = 4;
//  repeated GatherFormat SingleUserMsg = 5;
//  repeated GatherFormat GroupUserMsg = 6;
// }
// message PullMessageBySeqListReq{
//  string UserID = 1;
//  string OperationID = 2;
//  repeated int64 seqList =3;
// }
type GetMaxAndMinSeqReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetMaxAndMinSeqReq) Reset()                    { *m = GetMaxAndMinSeqReq{} }
func (m *GetMaxAndMinSeqReq) String() string            { return proto.CompactTextString(m) }
func (*GetMaxAndMinSeqReq) ProtoMessage()               {}
func (*GetMaxAndMinSeqReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetMaxAndMinSeqReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetMaxAndMinSeqReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetMaxAndMinSeqResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	MaxSeq  uint32 `protobuf:"varint,3,opt,name=MaxSeq,json=maxSeq" json:"MaxSeq,omitempty"`
	MinSeq  uint32 `protobuf:"varint,4,opt,name=MinSeq,json=minSeq" json:"MinSeq,omitempty"`
}

func (m *GetMaxAndMinSeqResp) Reset()                    { *m = GetMaxAndMinSeqResp{} }
func (m *GetMaxAndMinSeqResp) String() string            { return proto.CompactTextString(m) }
func (*GetMaxAndMinSeqResp) ProtoMessage()               {}
func (*GetMaxAndMinSeqResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetMaxAndMinSeqResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetMaxAndMinSeqResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetMaxAndMinSeqResp) GetMaxSeq() uint32 {
	if m != nil {
		return m.MaxSeq
	}
	return 0
}

func (m *GetMaxAndMinSeqResp) GetMinSeq() uint32 {
	if m != nil {
		return m.MinSeq
	}
	return 0
}

type SendMsgReq struct {
	Token       string                     `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	OperationID string                     `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	MsgData     *server_api_params.MsgData `protobuf:"bytes,3,opt,name=msgData" json:"msgData,omitempty"`
}

func (m *SendMsgReq) Reset()                    { *m = SendMsgReq{} }
func (m *SendMsgReq) String() string            { return proto.CompactTextString(m) }
func (*SendMsgReq) ProtoMessage()               {}
func (*SendMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SendMsgReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SendMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *SendMsgReq) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

type SendMsgResp struct {
	ErrCode     int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg      string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	ServerMsgID string `protobuf:"bytes,4,opt,name=serverMsgID" json:"serverMsgID,omitempty"`
	ClientMsgID string `protobuf:"bytes,5,opt,name=clientMsgID" json:"clientMsgID,omitempty"`
	SendTime    int64  `protobuf:"varint,6,opt,name=sendTime" json:"sendTime,omitempty"`
}

func (m *SendMsgResp) Reset()                    { *m = SendMsgResp{} }
func (m *SendMsgResp) String() string            { return proto.CompactTextString(m) }
func (*SendMsgResp) ProtoMessage()               {}
func (*SendMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SendMsgResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *SendMsgResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *SendMsgResp) GetServerMsgID() string {
	if m != nil {
		return m.ServerMsgID
	}
	return ""
}

func (m *SendMsgResp) GetClientMsgID() string {
	if m != nil {
		return m.ClientMsgID
	}
	return ""
}

func (m *SendMsgResp) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

type ClearMsgReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OpUserID    string `protobuf:"bytes,2,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,3,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *ClearMsgReq) Reset()                    { *m = ClearMsgReq{} }
func (m *ClearMsgReq) String() string            { return proto.CompactTextString(m) }
func (*ClearMsgReq) ProtoMessage()               {}
func (*ClearMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClearMsgReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ClearMsgReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *ClearMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type ClearMsgResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ClearMsgResp) Reset()                    { *m = ClearMsgResp{} }
func (m *ClearMsgResp) String() string            { return proto.CompactTextString(m) }
func (*ClearMsgResp) ProtoMessage()               {}
func (*ClearMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ClearMsgResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ClearMsgResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type SetMsgMinSeqReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	GroupID     string `protobuf:"bytes,2,opt,name=groupID" json:"groupID,omitempty"`
	MinSeq      uint32 `protobuf:"varint,3,opt,name=minSeq" json:"minSeq,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=operationID" json:"operationID,omitempty"`
	OpUserID    string `protobuf:"bytes,5,opt,name=opUserID" json:"opUserID,omitempty"`
}

func (m *SetMsgMinSeqReq) Reset()                    { *m = SetMsgMinSeqReq{} }
func (m *SetMsgMinSeqReq) String() string            { return proto.CompactTextString(m) }
func (*SetMsgMinSeqReq) ProtoMessage()               {}
func (*SetMsgMinSeqReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetMsgMinSeqReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SetMsgMinSeqReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *SetMsgMinSeqReq) GetMinSeq() uint32 {
	if m != nil {
		return m.MinSeq
	}
	return 0
}

func (m *SetMsgMinSeqReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *SetMsgMinSeqReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type SetMsgMinSeqResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *SetMsgMinSeqResp) Reset()                    { *m = SetMsgMinSeqResp{} }
func (m *SetMsgMinSeqResp) String() string            { return proto.CompactTextString(m) }
func (*SetMsgMinSeqResp) ProtoMessage()               {}
func (*SetMsgMinSeqResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetMsgMinSeqResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *SetMsgMinSeqResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type SetSendMsgStatusReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	Status      int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *SetSendMsgStatusReq) Reset()                    { *m = SetSendMsgStatusReq{} }
func (m *SetSendMsgStatusReq) String() string            { return proto.CompactTextString(m) }
func (*SetSendMsgStatusReq) ProtoMessage()               {}
func (*SetSendMsgStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SetSendMsgStatusReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *SetSendMsgStatusReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type SetSendMsgStatusResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *SetSendMsgStatusResp) Reset()                    { *m = SetSendMsgStatusResp{} }
func (m *SetSendMsgStatusResp) String() string            { return proto.CompactTextString(m) }
func (*SetSendMsgStatusResp) ProtoMessage()               {}
func (*SetSendMsgStatusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SetSendMsgStatusResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *SetSendMsgStatusResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetSendMsgStatusReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *GetSendMsgStatusReq) Reset()                    { *m = GetSendMsgStatusReq{} }
func (m *GetSendMsgStatusReq) String() string            { return proto.CompactTextString(m) }
func (*GetSendMsgStatusReq) ProtoMessage()               {}
func (*GetSendMsgStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSendMsgStatusReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetSendMsgStatusResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *GetSendMsgStatusResp) Reset()                    { *m = GetSendMsgStatusResp{} }
func (m *GetSendMsgStatusResp) String() string            { return proto.CompactTextString(m) }
func (*GetSendMsgStatusResp) ProtoMessage()               {}
func (*GetSendMsgStatusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetSendMsgStatusResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetSendMsgStatusResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetSendMsgStatusResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type DelSuperGroupMsgReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	GroupID     string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *DelSuperGroupMsgReq) Reset()                    { *m = DelSuperGroupMsgReq{} }
func (m *DelSuperGroupMsgReq) String() string            { return proto.CompactTextString(m) }
func (*DelSuperGroupMsgReq) ProtoMessage()               {}
func (*DelSuperGroupMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DelSuperGroupMsgReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *DelSuperGroupMsgReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *DelSuperGroupMsgReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *DelSuperGroupMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type DelSuperGroupMsgResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DelSuperGroupMsgResp) Reset()                    { *m = DelSuperGroupMsgResp{} }
func (m *DelSuperGroupMsgResp) String() string            { return proto.CompactTextString(m) }
func (*DelSuperGroupMsgResp) ProtoMessage()               {}
func (*DelSuperGroupMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DelSuperGroupMsgResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *DelSuperGroupMsgResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetSuperGroupMsgReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	Seq         uint32 `protobuf:"varint,2,opt,name=Seq,json=seq" json:"Seq,omitempty"`
	GroupID     string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *GetSuperGroupMsgReq) Reset()                    { *m = GetSuperGroupMsgReq{} }
func (m *GetSuperGroupMsgReq) String() string            { return proto.CompactTextString(m) }
func (*GetSuperGroupMsgReq) ProtoMessage()               {}
func (*GetSuperGroupMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetSuperGroupMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetSuperGroupMsgReq) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GetSuperGroupMsgReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type GetSuperGroupMsgResp struct {
	ErrCode int32                      `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string                     `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	MsgData *server_api_params.MsgData `protobuf:"bytes,3,opt,name=msgData" json:"msgData,omitempty"`
}

func (m *GetSuperGroupMsgResp) Reset()                    { *m = GetSuperGroupMsgResp{} }
func (m *GetSuperGroupMsgResp) String() string            { return proto.CompactTextString(m) }
func (*GetSuperGroupMsgResp) ProtoMessage()               {}
func (*GetSuperGroupMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetSuperGroupMsgResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetSuperGroupMsgResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetSuperGroupMsgResp) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

type GetWriteDiffMsgReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	Seq         uint32 `protobuf:"varint,2,opt,name=Seq,json=seq" json:"Seq,omitempty"`
}

func (m *GetWriteDiffMsgReq) Reset()                    { *m = GetWriteDiffMsgReq{} }
func (m *GetWriteDiffMsgReq) String() string            { return proto.CompactTextString(m) }
func (*GetWriteDiffMsgReq) ProtoMessage()               {}
func (*GetWriteDiffMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetWriteDiffMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetWriteDiffMsgReq) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type GetWriteDiffMsgResp struct {
	ErrCode int32                      `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string                     `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	MsgData *server_api_params.MsgData `protobuf:"bytes,3,opt,name=msgData" json:"msgData,omitempty"`
}

func (m *GetWriteDiffMsgResp) Reset()                    { *m = GetWriteDiffMsgResp{} }
func (m *GetWriteDiffMsgResp) String() string            { return proto.CompactTextString(m) }
func (*GetWriteDiffMsgResp) ProtoMessage()               {}
func (*GetWriteDiffMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetWriteDiffMsgResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetWriteDiffMsgResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetWriteDiffMsgResp) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgDataToMQ)(nil), "msg.MsgDataToMQ")
	proto.RegisterType((*MsgDataToDB)(nil), "msg.MsgDataToDB")
	proto.RegisterType((*PushMsgDataToMQ)(nil), "msg.PushMsgDataToMQ")
	proto.RegisterType((*MsgDataToMongoByMQ)(nil), "msg.MsgDataToMongoByMQ")
	proto.RegisterType((*GetMaxAndMinSeqReq)(nil), "msg.GetMaxAndMinSeqReq")
	proto.RegisterType((*GetMaxAndMinSeqResp)(nil), "msg.GetMaxAndMinSeqResp")
	proto.RegisterType((*SendMsgReq)(nil), "msg.SendMsgReq")
	proto.RegisterType((*SendMsgResp)(nil), "msg.SendMsgResp")
	proto.RegisterType((*ClearMsgReq)(nil), "msg.ClearMsgReq")
	proto.RegisterType((*ClearMsgResp)(nil), "msg.ClearMsgResp")
	proto.RegisterType((*SetMsgMinSeqReq)(nil), "msg.SetMsgMinSeqReq")
	proto.RegisterType((*SetMsgMinSeqResp)(nil), "msg.SetMsgMinSeqResp")
	proto.RegisterType((*SetSendMsgStatusReq)(nil), "msg.SetSendMsgStatusReq")
	proto.RegisterType((*SetSendMsgStatusResp)(nil), "msg.SetSendMsgStatusResp")
	proto.RegisterType((*GetSendMsgStatusReq)(nil), "msg.GetSendMsgStatusReq")
	proto.RegisterType((*GetSendMsgStatusResp)(nil), "msg.GetSendMsgStatusResp")
	proto.RegisterType((*DelSuperGroupMsgReq)(nil), "msg.DelSuperGroupMsgReq")
	proto.RegisterType((*DelSuperGroupMsgResp)(nil), "msg.DelSuperGroupMsgResp")
	proto.RegisterType((*GetSuperGroupMsgReq)(nil), "msg.GetSuperGroupMsgReq")
	proto.RegisterType((*GetSuperGroupMsgResp)(nil), "msg.GetSuperGroupMsgResp")
	proto.RegisterType((*GetWriteDiffMsgReq)(nil), "msg.GetWriteDiffMsgReq")
	proto.RegisterType((*GetWriteDiffMsgResp)(nil), "msg.GetWriteDiffMsgResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Msg service

type MsgClient interface {
	GetMaxAndMinSeq(ctx context.Context, in *server_api_params.GetMaxAndMinSeqReq, opts ...grpc.CallOption) (*server_api_params.GetMaxAndMinSeqResp, error)
	PullMessageBySeqList(ctx context.Context, in *server_api_params.PullMessageBySeqListReq, opts ...grpc.CallOption) (*server_api_params.PullMessageBySeqListResp, error)
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	DelMsgList(ctx context.Context, in *server_api_params.DelMsgListReq, opts ...grpc.CallOption) (*server_api_params.DelMsgListResp, error)
	DelSuperGroupMsg(ctx context.Context, in *DelSuperGroupMsgReq, opts ...grpc.CallOption) (*DelSuperGroupMsgResp, error)
	ClearMsg(ctx context.Context, in *ClearMsgReq, opts ...grpc.CallOption) (*ClearMsgResp, error)
	SetMsgMinSeq(ctx context.Context, in *SetMsgMinSeqReq, opts ...grpc.CallOption) (*SetMsgMinSeqResp, error)
	SetSendMsgStatus(ctx context.Context, in *SetSendMsgStatusReq, opts ...grpc.CallOption) (*SetSendMsgStatusResp, error)
	GetSendMsgStatus(ctx context.Context, in *GetSendMsgStatusReq, opts ...grpc.CallOption) (*GetSendMsgStatusResp, error)
	GetSuperGroupMsg(ctx context.Context, in *GetSuperGroupMsgReq, opts ...grpc.CallOption) (*GetSuperGroupMsgResp, error)
	GetWriteDiffMsg(ctx context.Context, in *GetWriteDiffMsgReq, opts ...grpc.CallOption) (*GetWriteDiffMsgResp, error)
}

type msgClient struct {
	cc *grpc.ClientConn
}

func NewMsgClient(cc *grpc.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GetMaxAndMinSeq(ctx context.Context, in *server_api_params.GetMaxAndMinSeqReq, opts ...grpc.CallOption) (*server_api_params.GetMaxAndMinSeqResp, error) {
	out := new(server_api_params.GetMaxAndMinSeqResp)
	err := grpc.Invoke(ctx, "/msg.msg/GetMaxAndMinSeq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PullMessageBySeqList(ctx context.Context, in *server_api_params.PullMessageBySeqListReq, opts ...grpc.CallOption) (*server_api_params.PullMessageBySeqListResp, error) {
	out := new(server_api_params.PullMessageBySeqListResp)
	err := grpc.Invoke(ctx, "/msg.msg/PullMessageBySeqList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := grpc.Invoke(ctx, "/msg.msg/SendMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelMsgList(ctx context.Context, in *server_api_params.DelMsgListReq, opts ...grpc.CallOption) (*server_api_params.DelMsgListResp, error) {
	out := new(server_api_params.DelMsgListResp)
	err := grpc.Invoke(ctx, "/msg.msg/DelMsgList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelSuperGroupMsg(ctx context.Context, in *DelSuperGroupMsgReq, opts ...grpc.CallOption) (*DelSuperGroupMsgResp, error) {
	out := new(DelSuperGroupMsgResp)
	err := grpc.Invoke(ctx, "/msg.msg/DelSuperGroupMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClearMsg(ctx context.Context, in *ClearMsgReq, opts ...grpc.CallOption) (*ClearMsgResp, error) {
	out := new(ClearMsgResp)
	err := grpc.Invoke(ctx, "/msg.msg/ClearMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMsgMinSeq(ctx context.Context, in *SetMsgMinSeqReq, opts ...grpc.CallOption) (*SetMsgMinSeqResp, error) {
	out := new(SetMsgMinSeqResp)
	err := grpc.Invoke(ctx, "/msg.msg/SetMsgMinSeq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetSendMsgStatus(ctx context.Context, in *SetSendMsgStatusReq, opts ...grpc.CallOption) (*SetSendMsgStatusResp, error) {
	out := new(SetSendMsgStatusResp)
	err := grpc.Invoke(ctx, "/msg.msg/SetSendMsgStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetSendMsgStatus(ctx context.Context, in *GetSendMsgStatusReq, opts ...grpc.CallOption) (*GetSendMsgStatusResp, error) {
	out := new(GetSendMsgStatusResp)
	err := grpc.Invoke(ctx, "/msg.msg/GetSendMsgStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetSuperGroupMsg(ctx context.Context, in *GetSuperGroupMsgReq, opts ...grpc.CallOption) (*GetSuperGroupMsgResp, error) {
	out := new(GetSuperGroupMsgResp)
	err := grpc.Invoke(ctx, "/msg.msg/GetSuperGroupMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetWriteDiffMsg(ctx context.Context, in *GetWriteDiffMsgReq, opts ...grpc.CallOption) (*GetWriteDiffMsgResp, error) {
	out := new(GetWriteDiffMsgResp)
	err := grpc.Invoke(ctx, "/msg.msg/GetWriteDiffMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Msg service

type MsgServer interface {
	GetMaxAndMinSeq(context.Context, *server_api_params.GetMaxAndMinSeqReq) (*server_api_params.GetMaxAndMinSeqResp, error)
	PullMessageBySeqList(context.Context, *server_api_params.PullMessageBySeqListReq) (*server_api_params.PullMessageBySeqListResp, error)
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	DelMsgList(context.Context, *server_api_params.DelMsgListReq) (*server_api_params.DelMsgListResp, error)
	DelSuperGroupMsg(context.Context, *DelSuperGroupMsgReq) (*DelSuperGroupMsgResp, error)
	ClearMsg(context.Context, *ClearMsgReq) (*ClearMsgResp, error)
	SetMsgMinSeq(context.Context, *SetMsgMinSeqReq) (*SetMsgMinSeqResp, error)
	SetSendMsgStatus(context.Context, *SetSendMsgStatusReq) (*SetSendMsgStatusResp, error)
	GetSendMsgStatus(context.Context, *GetSendMsgStatusReq) (*GetSendMsgStatusResp, error)
	GetSuperGroupMsg(context.Context, *GetSuperGroupMsgReq) (*GetSuperGroupMsgResp, error)
	GetWriteDiffMsg(context.Context, *GetWriteDiffMsgReq) (*GetWriteDiffMsgResp, error)
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GetMaxAndMinSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server_api_params.GetMaxAndMinSeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetMaxAndMinSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/GetMaxAndMinSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetMaxAndMinSeq(ctx, req.(*server_api_params.GetMaxAndMinSeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PullMessageBySeqList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server_api_params.PullMessageBySeqListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PullMessageBySeqList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/PullMessageBySeqList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PullMessageBySeqList(ctx, req.(*server_api_params.PullMessageBySeqListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(server_api_params.DelMsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/DelMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelMsgList(ctx, req.(*server_api_params.DelMsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSuperGroupMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/DelSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelSuperGroupMsg(ctx, req.(*DelSuperGroupMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClearMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClearMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/ClearMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClearMsg(ctx, req.(*ClearMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMsgMinSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMsgMinSeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMsgMinSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/SetMsgMinSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMsgMinSeq(ctx, req.(*SetMsgMinSeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetSendMsgStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSendMsgStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetSendMsgStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/SetSendMsgStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetSendMsgStatus(ctx, req.(*SetSendMsgStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetSendMsgStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendMsgStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetSendMsgStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/GetSendMsgStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetSendMsgStatus(ctx, req.(*GetSendMsgStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperGroupMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/GetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetSuperGroupMsg(ctx, req.(*GetSuperGroupMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetWriteDiffMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteDiffMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetWriteDiffMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.msg/GetWriteDiffMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetWriteDiffMsg(ctx, req.(*GetWriteDiffMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaxAndMinSeq",
			Handler:    _Msg_GetMaxAndMinSeq_Handler,
		},
		{
			MethodName: "PullMessageBySeqList",
			Handler:    _Msg_PullMessageBySeqList_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Msg_SendMsg_Handler,
		},
		{
			MethodName: "DelMsgList",
			Handler:    _Msg_DelMsgList_Handler,
		},
		{
			MethodName: "DelSuperGroupMsg",
			Handler:    _Msg_DelSuperGroupMsg_Handler,
		},
		{
			MethodName: "ClearMsg",
			Handler:    _Msg_ClearMsg_Handler,
		},
		{
			MethodName: "SetMsgMinSeq",
			Handler:    _Msg_SetMsgMinSeq_Handler,
		},
		{
			MethodName: "SetSendMsgStatus",
			Handler:    _Msg_SetSendMsgStatus_Handler,
		},
		{
			MethodName: "GetSendMsgStatus",
			Handler:    _Msg_GetSendMsgStatus_Handler,
		},
		{
			MethodName: "GetSuperGroupMsg",
			Handler:    _Msg_GetSuperGroupMsg_Handler,
		},
		{
			MethodName: "GetWriteDiffMsg",
			Handler:    _Msg_GetWriteDiffMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg/msg.proto",
}

func init() { proto.RegisterFile("msg/msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x96, 0xeb, 0x26, 0x69, 0x9f, 0x5b, 0x35, 0x4c, 0x43, 0xf1, 0x1a, 0x0e, 0xc1, 0x02, 0x14,
	0x01, 0xdb, 0x48, 0x05, 0x89, 0xc3, 0x5e, 0xa0, 0xeb, 0x55, 0xb6, 0x12, 0xa6, 0x5b, 0xbb, 0x08,
	0x89, 0x4b, 0xd7, 0x34, 0xb3, 0xb3, 0x56, 0x63, 0x7b, 0xe2, 0xe7, 0xd0, 0x5d, 0x10, 0xdc, 0x38,
	0xf2, 0x07, 0x70, 0xe2, 0xc6, 0x9d, 0xff, 0x10, 0xcd, 0xd8, 0x49, 0xc6, 0x3f, 0xb2, 0x0d, 0x01,
	0xf5, 0xf8, 0xde, 0x3c, 0xbf, 0xf7, 0x7d, 0xef, 0x7d, 0x33, 0x2f, 0x81, 0xfd, 0x08, 0xd9, 0x30,
	0x42, 0x76, 0xcc, 0xd3, 0x24, 0x4b, 0x88, 0x1e, 0x21, 0xb3, 0x06, 0xe7, 0x9c, 0xc6, 0x0f, 0xcf,
	0xdc, 0x87, 0x3e, 0x4d, 0x7f, 0xa4, 0xe9, 0x90, 0xdf, 0xb0, 0xa1, 0x3c, 0x1e, 0xe2, 0xf8, 0xe6,
	0xea, 0x16, 0x87, 0xb7, 0x98, 0x87, 0xdb, 0x3f, 0x83, 0xe1, 0x22, 0x73, 0x82, 0x2c, 0xb8, 0x4c,
	0xdc, 0x0b, 0xd2, 0x83, 0x56, 0x96, 0xdc, 0xd0, 0xd8, 0xd4, 0xfa, 0xda, 0x60, 0xd7, 0xcb, 0x0d,
	0xd2, 0x07, 0x23, 0xe1, 0x34, 0x0d, 0xb2, 0x30, 0x89, 0xcf, 0x1c, 0x73, 0x4b, 0x9e, 0xa9, 0x2e,
	0xf2, 0x39, 0x74, 0xa2, 0x3c, 0x8d, 0xa9, 0xf7, 0xb5, 0x81, 0x71, 0x62, 0x1d, 0xa3, 0x2c, 0x7d,
	0x15, 0xf0, 0xf0, 0x8a, 0x07, 0x69, 0x10, 0xe1, 0x71, 0x51, 0xc8, 0x9b, 0x87, 0xda, 0x54, 0x29,
	0xee, 0x9c, 0xaa, 0x49, 0xb4, 0xb5, 0x93, 0xdc, 0x0d, 0xce, 0xfe, 0x5d, 0x83, 0x83, 0x67, 0x33,
	0x7c, 0xa9, 0x12, 0xed, 0x83, 0x71, 0xae, 0x7c, 0xa5, 0xbd, 0x91, 0xd2, 0xd6, 0xfa, 0x68, 0x6c,
	0xd8, 0xe3, 0x33, 0x7c, 0x79, 0x99, 0x7c, 0x8b, 0x34, 0x3d, 0x73, 0x64, 0x37, 0x76, 0xbd, 0x92,
	0xcf, 0xfe, 0x4b, 0x03, 0xb2, 0xc4, 0x92, 0xc4, 0x2c, 0x39, 0x7d, 0xed, 0x5e, 0x10, 0x13, 0x3a,
	0x93, 0x00, 0x33, 0x9f, 0x4e, 0x25, 0x9c, 0x6d, 0x6f, 0x6e, 0x92, 0x0f, 0x60, 0x3f, 0x60, 0x2c,
	0xa5, 0xac, 0x4c, 0xb2, 0xec, 0x24, 0x27, 0x60, 0x44, 0x14, 0x31, 0x60, 0xf4, 0xeb, 0x10, 0x33,
	0x53, 0xef, 0xeb, 0x03, 0xe3, 0xa4, 0x7b, 0x2c, 0xa4, 0xa1, 0x30, 0xf7, 0xd4, 0x20, 0xf2, 0x1e,
	0xec, 0x66, 0x69, 0xc8, 0x98, 0xc4, 0xba, 0x2d, 0xb3, 0x2e, 0x1d, 0xf6, 0x37, 0x40, 0x46, 0x34,
	0x73, 0x83, 0x57, 0x5f, 0xc5, 0x63, 0x37, 0x8c, 0x7d, 0x3a, 0xf5, 0xe8, 0x94, 0x1c, 0x41, 0xbb,
	0x20, 0x97, 0x77, 0xad, 0x3d, 0x93, 0x56, 0xb5, 0xa5, 0x0d, 0x83, 0xb8, 0x85, 0xc3, 0x5a, 0x3e,
	0xe4, 0x82, 0xf8, 0x93, 0x34, 0x7d, 0x9c, 0x8c, 0xa9, 0xcc, 0xd8, 0xf2, 0x3a, 0x34, 0x37, 0x45,
	0xa9, 0x27, 0x69, 0xea, 0x22, 0x2b, 0xb2, 0xb5, 0xa9, 0xb4, 0x84, 0xdf, 0x0d, 0x5e, 0x89, 0x4e,
	0x89, 0xfe, 0xee, 0x7b, 0xed, 0x48, 0x5a, 0xd2, 0x2f, 0xf3, 0x4a, 0x2e, 0xc2, 0x2f, 0x2d, 0xfb,
	0x27, 0x00, 0x9f, 0xc6, 0x63, 0x17, 0x99, 0x20, 0x70, 0xbf, 0x22, 0xff, 0x53, 0x03, 0x63, 0x51,
	0x3c, 0x67, 0x4b, 0x57, 0xb2, 0xa5, 0x4d, 0x6c, 0xfb, 0x60, 0xe4, 0x75, 0x5c, 0x64, 0x8b, 0x31,
	0xa9, 0x2e, 0x11, 0x71, 0x3d, 0x09, 0x69, 0x9c, 0xe5, 0x11, 0xad, 0x3c, 0x42, 0x71, 0x11, 0x0b,
	0x76, 0x90, 0xc6, 0xe3, 0xcb, 0x30, 0xa2, 0x66, 0xbb, 0xaf, 0x0d, 0x74, 0x6f, 0x61, 0xdb, 0xd7,
	0x60, 0x3c, 0x9e, 0xd0, 0x20, 0x2d, 0xda, 0x73, 0x04, 0xc5, 0x44, 0x2b, 0xf3, 0xb5, 0x60, 0x27,
	0xe1, 0xc5, 0xe4, 0x73, 0x80, 0x0b, 0xbb, 0xda, 0x3c, 0xbd, 0x3e, 0xfb, 0x2f, 0x61, 0x6f, 0x59,
	0x64, 0x93, 0x36, 0xd8, 0x7f, 0x68, 0x70, 0xe0, 0x53, 0xc1, 0xa7, 0xa4, 0xc5, 0x46, 0xac, 0x26,
	0x74, 0x58, 0x9a, 0xcc, 0xf8, 0x02, 0xea, 0xdc, 0x14, 0x5f, 0xe4, 0xa2, 0x58, 0x48, 0x47, 0x5a,
	0x55, 0x06, 0xdb, 0xf5, 0xf1, 0xab, 0xfc, 0x5b, 0x65, 0xfe, 0xb6, 0x03, 0xdd, 0x32, 0xb4, 0x8d,
	0x18, 0x9e, 0xc3, 0xa1, 0x4f, 0xb3, 0x42, 0x2c, 0x7e, 0x16, 0x64, 0x33, 0xf4, 0xea, 0xd0, 0x1a,
	0xde, 0xaa, 0x23, 0x68, 0xa3, 0x0c, 0x97, 0x09, 0x5b, 0x5e, 0x61, 0xd9, 0x4f, 0xa1, 0x57, 0x4f,
	0xb8, 0x11, 0xb4, 0x2f, 0xe4, 0xd5, 0xfd, 0xf7, 0xd0, 0xec, 0xe7, 0xd0, 0x1b, 0xfd, 0x2f, 0x10,
	0x14, 0x92, 0x7a, 0x89, 0xe4, 0x6f, 0x1a, 0x1c, 0x3a, 0x74, 0xe2, 0xcf, 0x38, 0x4d, 0x47, 0x62,
	0xca, 0x85, 0x8e, 0xd5, 0x79, 0x69, 0x15, 0xbd, 0x2e, 0x75, 0xb3, 0xb5, 0x4a, 0x37, 0x7a, 0x59,
	0x37, 0x77, 0xea, 0x43, 0x34, 0xbb, 0x0e, 0x63, 0xa3, 0x66, 0x5f, 0xe7, 0xcd, 0xae, 0x12, 0xba,
	0x5b, 0x07, 0x5d, 0xd0, 0x85, 0xb2, 0xb7, 0xa4, 0xb2, 0x75, 0xa4, 0xd3, 0xd5, 0x84, 0xec, 0x5f,
	0xf3, 0xc1, 0xfc, 0x77, 0xb8, 0x1b, 0xbe, 0x8b, 0x4f, 0xe5, 0x72, 0xf9, 0x2e, 0x0d, 0x33, 0xea,
	0x84, 0x2f, 0x5e, 0x6c, 0xce, 0xd1, 0xfe, 0x45, 0xb6, 0xab, 0x9c, 0xe9, 0xfe, 0x88, 0x9c, 0xfc,
	0xdd, 0x06, 0xf1, 0xa3, 0x8b, 0x3c, 0x87, 0x83, 0xca, 0x76, 0x23, 0x1f, 0x36, 0x7c, 0x5f, 0xdf,
	0xa8, 0xd6, 0x47, 0xeb, 0x84, 0x21, 0x27, 0x09, 0xf4, 0x9e, 0xcd, 0x26, 0x13, 0x37, 0x5f, 0xe0,
	0xa7, 0xaf, 0x7d, 0x3a, 0x95, 0x5b, 0xfc, 0xe3, 0x86, 0xef, 0x9b, 0x02, 0x45, 0xad, 0x4f, 0xd6,
	0x8e, 0x45, 0x4e, 0x3e, 0x85, 0x4e, 0x71, 0x73, 0xc9, 0x81, 0xfc, 0x21, 0xb1, 0xdc, 0xa2, 0x56,
	0xb7, 0xec, 0x40, 0x4e, 0x2e, 0x00, 0x1c, 0x3a, 0x71, 0x91, 0x49, 0x50, 0xfd, 0x86, 0x42, 0xcb,
	0x63, 0x91, 0xe1, 0xfd, 0x3b, 0x22, 0x90, 0x93, 0x11, 0x74, 0xab, 0x77, 0x8a, 0x98, 0xb2, 0x70,
	0xc3, 0x8d, 0xb7, 0x1e, 0xac, 0x38, 0x41, 0x4e, 0x86, 0xb0, 0x33, 0x5f, 0x3f, 0x24, 0x47, 0xae,
	0xac, 0x3c, 0xeb, 0xad, 0x8a, 0x07, 0x39, 0x79, 0x04, 0x7b, 0xea, 0x8b, 0x4e, 0x7a, 0x05, 0xdd,
	0xd2, 0xfe, 0xb1, 0xde, 0x6e, 0xf0, 0xe6, 0xb0, 0xab, 0xef, 0x6e, 0x01, 0xbb, 0xe1, 0x7d, 0x2f,
	0x60, 0x37, 0x3e, 0xd4, 0x23, 0xe8, 0x8e, 0x9a, 0x13, 0x8d, 0x56, 0x26, 0x1a, 0xbd, 0x21, 0x51,
	0x43, 0x23, 0x1b, 0x5e, 0x1a, 0x25, 0x51, 0xad, 0x91, 0x8e, 0x54, 0xb9, 0x7a, 0xd9, 0xc8, 0x3b,
	0xf3, 0xe8, 0xca, 0x65, 0xb6, 0xcc, 0xe6, 0x03, 0xe4, 0xa7, 0xef, 0x7e, 0xff, 0x40, 0xfc, 0x45,
	0xb9, 0x3a, 0x73, 0x95, 0xff, 0x26, 0x11, 0xb2, 0x47, 0x11, 0xb2, 0x1f, 0xda, 0xd2, 0xfc, 0xec,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x51, 0x6d, 0xaf, 0xda, 0x0c, 0x00, 0x00,
}
