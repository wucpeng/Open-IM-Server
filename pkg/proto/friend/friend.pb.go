// Code generated by protoc-gen-go. DO NOT EDIT.
// source: friend/friend.proto

/*
Package friend is a generated protocol buffer package.

It is generated from these files:
	friend/friend.proto

It has these top-level messages:
	CommonResp
	CommID
	GetFriendsInfoReq
	GetFriendInfoResp
	AddFriendReq
	AddFriendResp
	ImportFriendReq
	UserIDResult
	ImportFriendResp
	GetFriendApplyListReq
	GetFriendApplyListResp
	GetFriendListReq
	GetFriendListResp
	AddBlacklistReq
	AddBlacklistResp
	RemoveBlacklistReq
	RemoveBlacklistResp
	GetBlacklistReq
	GetBlacklistResp
	IsFriendReq
	IsFriendResp
	IsInBlackListReq
	IsInBlackListResp
	DeleteFriendReq
	DeleteFriendResp
	AddFriendResponseReq
	AddFriendResponseResp
	SetFriendRemarkReq
	SetFriendRemarkResp
	GetSelfApplyListReq
	GetSelfApplyListResp
*/
package friend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import server_api_params "Open_IM/pkg/proto/sdk_ws"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CommonResp) Reset()                    { *m = CommonResp{} }
func (m *CommonResp) String() string            { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()               {}
func (*CommonResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CommonResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CommID struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	ToUserID    string `protobuf:"bytes,4,opt,name=ToUserID,json=toUserID" json:"ToUserID,omitempty"`
	FromUserID  string `protobuf:"bytes,5,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
}

func (m *CommID) Reset()                    { *m = CommID{} }
func (m *CommID) String() string            { return proto.CompactTextString(m) }
func (*CommID) ProtoMessage()               {}
func (*CommID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommID) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *CommID) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *CommID) GetToUserID() string {
	if m != nil {
		return m.ToUserID
	}
	return ""
}

func (m *CommID) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

type GetFriendsInfoReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *GetFriendsInfoReq) Reset()                    { *m = GetFriendsInfoReq{} }
func (m *GetFriendsInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetFriendsInfoReq) ProtoMessage()               {}
func (*GetFriendsInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetFriendsInfoReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type GetFriendInfoResp struct {
	ErrCode        int32                           `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg         string                          `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	FriendInfoList []*server_api_params.FriendInfo `protobuf:"bytes,3,rep,name=FriendInfoList,json=friendInfoList" json:"FriendInfoList,omitempty"`
}

func (m *GetFriendInfoResp) Reset()                    { *m = GetFriendInfoResp{} }
func (m *GetFriendInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetFriendInfoResp) ProtoMessage()               {}
func (*GetFriendInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetFriendInfoResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetFriendInfoResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetFriendInfoResp) GetFriendInfoList() []*server_api_params.FriendInfo {
	if m != nil {
		return m.FriendInfoList
	}
	return nil
}

type AddFriendReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
	ReqMsg string  `protobuf:"bytes,2,opt,name=ReqMsg,json=reqMsg" json:"ReqMsg,omitempty"`
}

func (m *AddFriendReq) Reset()                    { *m = AddFriendReq{} }
func (m *AddFriendReq) String() string            { return proto.CompactTextString(m) }
func (*AddFriendReq) ProtoMessage()               {}
func (*AddFriendReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddFriendReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

func (m *AddFriendReq) GetReqMsg() string {
	if m != nil {
		return m.ReqMsg
	}
	return ""
}

type AddFriendResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *AddFriendResp) Reset()                    { *m = AddFriendResp{} }
func (m *AddFriendResp) String() string            { return proto.CompactTextString(m) }
func (*AddFriendResp) ProtoMessage()               {}
func (*AddFriendResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddFriendResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type ImportFriendReq struct {
	FriendUserIDList []string `protobuf:"bytes,1,rep,name=FriendUserIDList,json=friendUserIDList" json:"FriendUserIDList,omitempty"`
	OperationID      string   `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	FromUserID       string   `protobuf:"bytes,3,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
	OpUserID         string   `protobuf:"bytes,4,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *ImportFriendReq) Reset()                    { *m = ImportFriendReq{} }
func (m *ImportFriendReq) String() string            { return proto.CompactTextString(m) }
func (*ImportFriendReq) ProtoMessage()               {}
func (*ImportFriendReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ImportFriendReq) GetFriendUserIDList() []string {
	if m != nil {
		return m.FriendUserIDList
	}
	return nil
}

func (m *ImportFriendReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *ImportFriendReq) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

func (m *ImportFriendReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type UserIDResult struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	Result int32  `protobuf:"varint,2,opt,name=Result,json=result" json:"Result,omitempty"`
}

func (m *UserIDResult) Reset()                    { *m = UserIDResult{} }
func (m *UserIDResult) String() string            { return proto.CompactTextString(m) }
func (*UserIDResult) ProtoMessage()               {}
func (*UserIDResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserIDResult) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserIDResult) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ImportFriendResp struct {
	CommonResp       *CommonResp     `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
	UserIDResultList []*UserIDResult `protobuf:"bytes,2,rep,name=UserIDResultList,json=userIDResultList" json:"UserIDResultList,omitempty"`
}

func (m *ImportFriendResp) Reset()                    { *m = ImportFriendResp{} }
func (m *ImportFriendResp) String() string            { return proto.CompactTextString(m) }
func (*ImportFriendResp) ProtoMessage()               {}
func (*ImportFriendResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ImportFriendResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *ImportFriendResp) GetUserIDResultList() []*UserIDResult {
	if m != nil {
		return m.UserIDResultList
	}
	return nil
}

type GetFriendApplyListReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *GetFriendApplyListReq) Reset()                    { *m = GetFriendApplyListReq{} }
func (m *GetFriendApplyListReq) String() string            { return proto.CompactTextString(m) }
func (*GetFriendApplyListReq) ProtoMessage()               {}
func (*GetFriendApplyListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetFriendApplyListReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type GetFriendApplyListResp struct {
	ErrCode           int32                              `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg            string                             `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	FriendRequestList []*server_api_params.FriendRequest `protobuf:"bytes,3,rep,name=FriendRequestList,json=friendRequestList" json:"FriendRequestList,omitempty"`
}

func (m *GetFriendApplyListResp) Reset()                    { *m = GetFriendApplyListResp{} }
func (m *GetFriendApplyListResp) String() string            { return proto.CompactTextString(m) }
func (*GetFriendApplyListResp) ProtoMessage()               {}
func (*GetFriendApplyListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetFriendApplyListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetFriendApplyListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetFriendApplyListResp) GetFriendRequestList() []*server_api_params.FriendRequest {
	if m != nil {
		return m.FriendRequestList
	}
	return nil
}

type GetFriendListReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *GetFriendListReq) Reset()                    { *m = GetFriendListReq{} }
func (m *GetFriendListReq) String() string            { return proto.CompactTextString(m) }
func (*GetFriendListReq) ProtoMessage()               {}
func (*GetFriendListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetFriendListReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type GetFriendListResp struct {
	ErrCode        int32                           `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg         string                          `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	FriendInfoList []*server_api_params.FriendInfo `protobuf:"bytes,3,rep,name=FriendInfoList,json=friendInfoList" json:"FriendInfoList,omitempty"`
}

func (m *GetFriendListResp) Reset()                    { *m = GetFriendListResp{} }
func (m *GetFriendListResp) String() string            { return proto.CompactTextString(m) }
func (*GetFriendListResp) ProtoMessage()               {}
func (*GetFriendListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetFriendListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetFriendListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetFriendListResp) GetFriendInfoList() []*server_api_params.FriendInfo {
	if m != nil {
		return m.FriendInfoList
	}
	return nil
}

type AddBlacklistReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *AddBlacklistReq) Reset()                    { *m = AddBlacklistReq{} }
func (m *AddBlacklistReq) String() string            { return proto.CompactTextString(m) }
func (*AddBlacklistReq) ProtoMessage()               {}
func (*AddBlacklistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AddBlacklistReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type AddBlacklistResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *AddBlacklistResp) Reset()                    { *m = AddBlacklistResp{} }
func (m *AddBlacklistResp) String() string            { return proto.CompactTextString(m) }
func (*AddBlacklistResp) ProtoMessage()               {}
func (*AddBlacklistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddBlacklistResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type RemoveBlacklistReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *RemoveBlacklistReq) Reset()                    { *m = RemoveBlacklistReq{} }
func (m *RemoveBlacklistReq) String() string            { return proto.CompactTextString(m) }
func (*RemoveBlacklistReq) ProtoMessage()               {}
func (*RemoveBlacklistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RemoveBlacklistReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type RemoveBlacklistResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *RemoveBlacklistResp) Reset()                    { *m = RemoveBlacklistResp{} }
func (m *RemoveBlacklistResp) String() string            { return proto.CompactTextString(m) }
func (*RemoveBlacklistResp) ProtoMessage()               {}
func (*RemoveBlacklistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RemoveBlacklistResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetBlacklistReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *GetBlacklistReq) Reset()                    { *m = GetBlacklistReq{} }
func (m *GetBlacklistReq) String() string            { return proto.CompactTextString(m) }
func (*GetBlacklistReq) ProtoMessage()               {}
func (*GetBlacklistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetBlacklistReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type GetBlacklistResp struct {
	ErrCode           int32                               `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg            string                              `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	BlackUserInfoList []*server_api_params.PublicUserInfo `protobuf:"bytes,3,rep,name=BlackUserInfoList,json=blackUserInfoList" json:"BlackUserInfoList,omitempty"`
}

func (m *GetBlacklistResp) Reset()                    { *m = GetBlacklistResp{} }
func (m *GetBlacklistResp) String() string            { return proto.CompactTextString(m) }
func (*GetBlacklistResp) ProtoMessage()               {}
func (*GetBlacklistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetBlacklistResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetBlacklistResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetBlacklistResp) GetBlackUserInfoList() []*server_api_params.PublicUserInfo {
	if m != nil {
		return m.BlackUserInfoList
	}
	return nil
}

type IsFriendReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *IsFriendReq) Reset()                    { *m = IsFriendReq{} }
func (m *IsFriendReq) String() string            { return proto.CompactTextString(m) }
func (*IsFriendReq) ProtoMessage()               {}
func (*IsFriendReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IsFriendReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type IsFriendResp struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg   string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	Response bool   `protobuf:"varint,3,opt,name=Response,json=response" json:"Response,omitempty"`
}

func (m *IsFriendResp) Reset()                    { *m = IsFriendResp{} }
func (m *IsFriendResp) String() string            { return proto.CompactTextString(m) }
func (*IsFriendResp) ProtoMessage()               {}
func (*IsFriendResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *IsFriendResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *IsFriendResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *IsFriendResp) GetResponse() bool {
	if m != nil {
		return m.Response
	}
	return false
}

type IsInBlackListReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *IsInBlackListReq) Reset()                    { *m = IsInBlackListReq{} }
func (m *IsInBlackListReq) String() string            { return proto.CompactTextString(m) }
func (*IsInBlackListReq) ProtoMessage()               {}
func (*IsInBlackListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IsInBlackListReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type IsInBlackListResp struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg   string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	Response bool   `protobuf:"varint,3,opt,name=Response,json=response" json:"Response,omitempty"`
}

func (m *IsInBlackListResp) Reset()                    { *m = IsInBlackListResp{} }
func (m *IsInBlackListResp) String() string            { return proto.CompactTextString(m) }
func (*IsInBlackListResp) ProtoMessage()               {}
func (*IsInBlackListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *IsInBlackListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *IsInBlackListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *IsInBlackListResp) GetResponse() bool {
	if m != nil {
		return m.Response
	}
	return false
}

type DeleteFriendReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *DeleteFriendReq) Reset()                    { *m = DeleteFriendReq{} }
func (m *DeleteFriendReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteFriendReq) ProtoMessage()               {}
func (*DeleteFriendReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DeleteFriendReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type DeleteFriendResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *DeleteFriendResp) Reset()                    { *m = DeleteFriendResp{} }
func (m *DeleteFriendResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteFriendResp) ProtoMessage()               {}
func (*DeleteFriendResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeleteFriendResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

// process
type AddFriendResponseReq struct {
	CommID       *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
	HandleResult int32   `protobuf:"varint,2,opt,name=handleResult" json:"handleResult,omitempty"`
	HandleMsg    string  `protobuf:"bytes,3,opt,name=handleMsg" json:"handleMsg,omitempty"`
}

func (m *AddFriendResponseReq) Reset()                    { *m = AddFriendResponseReq{} }
func (m *AddFriendResponseReq) String() string            { return proto.CompactTextString(m) }
func (*AddFriendResponseReq) ProtoMessage()               {}
func (*AddFriendResponseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *AddFriendResponseReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

func (m *AddFriendResponseReq) GetHandleResult() int32 {
	if m != nil {
		return m.HandleResult
	}
	return 0
}

func (m *AddFriendResponseReq) GetHandleMsg() string {
	if m != nil {
		return m.HandleMsg
	}
	return ""
}

type AddFriendResponseResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *AddFriendResponseResp) Reset()                    { *m = AddFriendResponseResp{} }
func (m *AddFriendResponseResp) String() string            { return proto.CompactTextString(m) }
func (*AddFriendResponseResp) ProtoMessage()               {}
func (*AddFriendResponseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AddFriendResponseResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type SetFriendRemarkReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
	Remark string  `protobuf:"bytes,2,opt,name=Remark,json=remark" json:"Remark,omitempty"`
}

func (m *SetFriendRemarkReq) Reset()                    { *m = SetFriendRemarkReq{} }
func (m *SetFriendRemarkReq) String() string            { return proto.CompactTextString(m) }
func (*SetFriendRemarkReq) ProtoMessage()               {}
func (*SetFriendRemarkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SetFriendRemarkReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

func (m *SetFriendRemarkReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type SetFriendRemarkResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *SetFriendRemarkResp) Reset()                    { *m = SetFriendRemarkResp{} }
func (m *SetFriendRemarkResp) String() string            { return proto.CompactTextString(m) }
func (*SetFriendRemarkResp) ProtoMessage()               {}
func (*SetFriendRemarkResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SetFriendRemarkResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetSelfApplyListReq struct {
	CommID *CommID `protobuf:"bytes,1,opt,name=CommID,json=commID" json:"CommID,omitempty"`
}

func (m *GetSelfApplyListReq) Reset()                    { *m = GetSelfApplyListReq{} }
func (m *GetSelfApplyListReq) String() string            { return proto.CompactTextString(m) }
func (*GetSelfApplyListReq) ProtoMessage()               {}
func (*GetSelfApplyListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetSelfApplyListReq) GetCommID() *CommID {
	if m != nil {
		return m.CommID
	}
	return nil
}

type GetSelfApplyListResp struct {
	ErrCode           int32                              `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg            string                             `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	FriendRequestList []*server_api_params.FriendRequest `protobuf:"bytes,3,rep,name=FriendRequestList,json=friendRequestList" json:"FriendRequestList,omitempty"`
}

func (m *GetSelfApplyListResp) Reset()                    { *m = GetSelfApplyListResp{} }
func (m *GetSelfApplyListResp) String() string            { return proto.CompactTextString(m) }
func (*GetSelfApplyListResp) ProtoMessage()               {}
func (*GetSelfApplyListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetSelfApplyListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetSelfApplyListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetSelfApplyListResp) GetFriendRequestList() []*server_api_params.FriendRequest {
	if m != nil {
		return m.FriendRequestList
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonResp)(nil), "friend.CommonResp")
	proto.RegisterType((*CommID)(nil), "friend.CommID")
	proto.RegisterType((*GetFriendsInfoReq)(nil), "friend.GetFriendsInfoReq")
	proto.RegisterType((*GetFriendInfoResp)(nil), "friend.GetFriendInfoResp")
	proto.RegisterType((*AddFriendReq)(nil), "friend.AddFriendReq")
	proto.RegisterType((*AddFriendResp)(nil), "friend.AddFriendResp")
	proto.RegisterType((*ImportFriendReq)(nil), "friend.ImportFriendReq")
	proto.RegisterType((*UserIDResult)(nil), "friend.UserIDResult")
	proto.RegisterType((*ImportFriendResp)(nil), "friend.ImportFriendResp")
	proto.RegisterType((*GetFriendApplyListReq)(nil), "friend.GetFriendApplyListReq")
	proto.RegisterType((*GetFriendApplyListResp)(nil), "friend.GetFriendApplyListResp")
	proto.RegisterType((*GetFriendListReq)(nil), "friend.GetFriendListReq")
	proto.RegisterType((*GetFriendListResp)(nil), "friend.GetFriendListResp")
	proto.RegisterType((*AddBlacklistReq)(nil), "friend.AddBlacklistReq")
	proto.RegisterType((*AddBlacklistResp)(nil), "friend.AddBlacklistResp")
	proto.RegisterType((*RemoveBlacklistReq)(nil), "friend.RemoveBlacklistReq")
	proto.RegisterType((*RemoveBlacklistResp)(nil), "friend.RemoveBlacklistResp")
	proto.RegisterType((*GetBlacklistReq)(nil), "friend.GetBlacklistReq")
	proto.RegisterType((*GetBlacklistResp)(nil), "friend.GetBlacklistResp")
	proto.RegisterType((*IsFriendReq)(nil), "friend.IsFriendReq")
	proto.RegisterType((*IsFriendResp)(nil), "friend.IsFriendResp")
	proto.RegisterType((*IsInBlackListReq)(nil), "friend.IsInBlackListReq")
	proto.RegisterType((*IsInBlackListResp)(nil), "friend.IsInBlackListResp")
	proto.RegisterType((*DeleteFriendReq)(nil), "friend.DeleteFriendReq")
	proto.RegisterType((*DeleteFriendResp)(nil), "friend.DeleteFriendResp")
	proto.RegisterType((*AddFriendResponseReq)(nil), "friend.AddFriendResponseReq")
	proto.RegisterType((*AddFriendResponseResp)(nil), "friend.AddFriendResponseResp")
	proto.RegisterType((*SetFriendRemarkReq)(nil), "friend.SetFriendRemarkReq")
	proto.RegisterType((*SetFriendRemarkResp)(nil), "friend.SetFriendRemarkResp")
	proto.RegisterType((*GetSelfApplyListReq)(nil), "friend.GetSelfApplyListReq")
	proto.RegisterType((*GetSelfApplyListResp)(nil), "friend.GetSelfApplyListResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Friend service

type FriendClient interface {
	// rpc getFriendsInfo(GetFriendsInfoReq) returns(GetFriendInfoResp);
	AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error)
	GetFriendApplyList(ctx context.Context, in *GetFriendApplyListReq, opts ...grpc.CallOption) (*GetFriendApplyListResp, error)
	GetSelfApplyList(ctx context.Context, in *GetSelfApplyListReq, opts ...grpc.CallOption) (*GetSelfApplyListResp, error)
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
	AddBlacklist(ctx context.Context, in *AddBlacklistReq, opts ...grpc.CallOption) (*AddBlacklistResp, error)
	RemoveBlacklist(ctx context.Context, in *RemoveBlacklistReq, opts ...grpc.CallOption) (*RemoveBlacklistResp, error)
	IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendResp, error)
	IsInBlackList(ctx context.Context, in *IsInBlackListReq, opts ...grpc.CallOption) (*IsInBlackListResp, error)
	GetBlacklist(ctx context.Context, in *GetBlacklistReq, opts ...grpc.CallOption) (*GetBlacklistResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	AddFriendResponse(ctx context.Context, in *AddFriendResponseReq, opts ...grpc.CallOption) (*AddFriendResponseResp, error)
	SetFriendRemark(ctx context.Context, in *SetFriendRemarkReq, opts ...grpc.CallOption) (*SetFriendRemarkResp, error)
	ImportFriend(ctx context.Context, in *ImportFriendReq, opts ...grpc.CallOption) (*ImportFriendResp, error)
}

type friendClient struct {
	cc *grpc.ClientConn
}

func NewFriendClient(cc *grpc.ClientConn) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error) {
	out := new(AddFriendResp)
	err := grpc.Invoke(ctx, "/friend.friend/addFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendApplyList(ctx context.Context, in *GetFriendApplyListReq, opts ...grpc.CallOption) (*GetFriendApplyListResp, error) {
	out := new(GetFriendApplyListResp)
	err := grpc.Invoke(ctx, "/friend.friend/getFriendApplyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetSelfApplyList(ctx context.Context, in *GetSelfApplyListReq, opts ...grpc.CallOption) (*GetSelfApplyListResp, error) {
	out := new(GetSelfApplyListResp)
	err := grpc.Invoke(ctx, "/friend.friend/getSelfApplyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	out := new(GetFriendListResp)
	err := grpc.Invoke(ctx, "/friend.friend/getFriendList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) AddBlacklist(ctx context.Context, in *AddBlacklistReq, opts ...grpc.CallOption) (*AddBlacklistResp, error) {
	out := new(AddBlacklistResp)
	err := grpc.Invoke(ctx, "/friend.friend/addBlacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) RemoveBlacklist(ctx context.Context, in *RemoveBlacklistReq, opts ...grpc.CallOption) (*RemoveBlacklistResp, error) {
	out := new(RemoveBlacklistResp)
	err := grpc.Invoke(ctx, "/friend.friend/removeBlacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendResp, error) {
	out := new(IsFriendResp)
	err := grpc.Invoke(ctx, "/friend.friend/isFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsInBlackList(ctx context.Context, in *IsInBlackListReq, opts ...grpc.CallOption) (*IsInBlackListResp, error) {
	out := new(IsInBlackListResp)
	err := grpc.Invoke(ctx, "/friend.friend/isInBlackList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetBlacklist(ctx context.Context, in *GetBlacklistReq, opts ...grpc.CallOption) (*GetBlacklistResp, error) {
	out := new(GetBlacklistResp)
	err := grpc.Invoke(ctx, "/friend.friend/getBlacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := grpc.Invoke(ctx, "/friend.friend/deleteFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) AddFriendResponse(ctx context.Context, in *AddFriendResponseReq, opts ...grpc.CallOption) (*AddFriendResponseResp, error) {
	out := new(AddFriendResponseResp)
	err := grpc.Invoke(ctx, "/friend.friend/addFriendResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) SetFriendRemark(ctx context.Context, in *SetFriendRemarkReq, opts ...grpc.CallOption) (*SetFriendRemarkResp, error) {
	out := new(SetFriendRemarkResp)
	err := grpc.Invoke(ctx, "/friend.friend/setFriendRemark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ImportFriend(ctx context.Context, in *ImportFriendReq, opts ...grpc.CallOption) (*ImportFriendResp, error) {
	out := new(ImportFriendResp)
	err := grpc.Invoke(ctx, "/friend.friend/importFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Friend service

type FriendServer interface {
	// rpc getFriendsInfo(GetFriendsInfoReq) returns(GetFriendInfoResp);
	AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error)
	GetFriendApplyList(context.Context, *GetFriendApplyListReq) (*GetFriendApplyListResp, error)
	GetSelfApplyList(context.Context, *GetSelfApplyListReq) (*GetSelfApplyListResp, error)
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	AddBlacklist(context.Context, *AddBlacklistReq) (*AddBlacklistResp, error)
	RemoveBlacklist(context.Context, *RemoveBlacklistReq) (*RemoveBlacklistResp, error)
	IsFriend(context.Context, *IsFriendReq) (*IsFriendResp, error)
	IsInBlackList(context.Context, *IsInBlackListReq) (*IsInBlackListResp, error)
	GetBlacklist(context.Context, *GetBlacklistReq) (*GetBlacklistResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	AddFriendResponse(context.Context, *AddFriendResponseReq) (*AddFriendResponseResp, error)
	SetFriendRemark(context.Context, *SetFriendRemarkReq) (*SetFriendRemarkResp, error)
	ImportFriend(context.Context, *ImportFriendReq) (*ImportFriendResp, error)
}

func RegisterFriendServer(s *grpc.Server, srv FriendServer) {
	s.RegisterService(&_Friend_serviceDesc, srv)
}

func _Friend_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddFriend(ctx, req.(*AddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/GetFriendApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendApplyList(ctx, req.(*GetFriendApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetSelfApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetSelfApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/GetSelfApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetSelfApplyList(ctx, req.(*GetSelfApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_AddBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/AddBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddBlacklist(ctx, req.(*AddBlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_RemoveBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).RemoveBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/RemoveBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).RemoveBlacklist(ctx, req.(*RemoveBlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/IsFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsFriend(ctx, req.(*IsFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsInBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsInBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/IsInBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsInBlackList(ctx, req.(*IsInBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetBlacklist(ctx, req.(*GetBlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_AddFriendResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddFriendResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/AddFriendResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddFriendResponse(ctx, req.(*AddFriendResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_SetFriendRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).SetFriendRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/SetFriendRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).SetFriendRemark(ctx, req.(*SetFriendRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ImportFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ImportFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/ImportFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ImportFriend(ctx, req.(*ImportFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Friend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friend.friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addFriend",
			Handler:    _Friend_AddFriend_Handler,
		},
		{
			MethodName: "getFriendApplyList",
			Handler:    _Friend_GetFriendApplyList_Handler,
		},
		{
			MethodName: "getSelfApplyList",
			Handler:    _Friend_GetSelfApplyList_Handler,
		},
		{
			MethodName: "getFriendList",
			Handler:    _Friend_GetFriendList_Handler,
		},
		{
			MethodName: "addBlacklist",
			Handler:    _Friend_AddBlacklist_Handler,
		},
		{
			MethodName: "removeBlacklist",
			Handler:    _Friend_RemoveBlacklist_Handler,
		},
		{
			MethodName: "isFriend",
			Handler:    _Friend_IsFriend_Handler,
		},
		{
			MethodName: "isInBlackList",
			Handler:    _Friend_IsInBlackList_Handler,
		},
		{
			MethodName: "getBlacklist",
			Handler:    _Friend_GetBlacklist_Handler,
		},
		{
			MethodName: "deleteFriend",
			Handler:    _Friend_DeleteFriend_Handler,
		},
		{
			MethodName: "addFriendResponse",
			Handler:    _Friend_AddFriendResponse_Handler,
		},
		{
			MethodName: "setFriendRemark",
			Handler:    _Friend_SetFriendRemark_Handler,
		},
		{
			MethodName: "importFriend",
			Handler:    _Friend_ImportFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend/friend.proto",
}

func init() { proto.RegisterFile("friend/friend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0xdb, 0x36,
	0x14, 0x87, 0x9a, 0xc6, 0xb5, 0x9f, 0xdd, 0x58, 0x66, 0x92, 0xce, 0x53, 0x93, 0xce, 0xd5, 0x61,
	0x30, 0x06, 0x34, 0x06, 0x32, 0x14, 0x58, 0xd6, 0xad, 0x9b, 0x1b, 0x27, 0x81, 0xb6, 0xa5, 0x29,
	0x94, 0xee, 0x32, 0x0c, 0x08, 0x94, 0x88, 0xf6, 0x0c, 0xdb, 0x12, 0x4b, 0xca, 0x2d, 0x76, 0x1b,
	0x76, 0xda, 0x61, 0xd7, 0x01, 0xc3, 0x76, 0xd8, 0xbf, 0x3a, 0x90, 0x94, 0x2c, 0x52, 0x92, 0x8b,
	0x49, 0xeb, 0xa1, 0x27, 0xe9, 0x7d, 0xfc, 0x9e, 0xde, 0x17, 0xdf, 0xa3, 0x60, 0x7b, 0x4c, 0xa7,
	0x38, 0xf0, 0x07, 0xf2, 0x71, 0x40, 0x68, 0x18, 0x85, 0xa8, 0x26, 0x29, 0xab, 0x7f, 0x41, 0x70,
	0xf0, 0xc8, 0x39, 0x7f, 0x74, 0x89, 0xe9, 0x6b, 0x4c, 0x07, 0x64, 0x36, 0x19, 0x08, 0x8d, 0x01,
	0xf3, 0x67, 0x57, 0x6f, 0xd8, 0xe0, 0x0d, 0x93, 0x08, 0xfb, 0x29, 0xc0, 0x71, 0xb8, 0x58, 0x84,
	0x81, 0x8b, 0x19, 0x41, 0x5d, 0xb8, 0x83, 0x29, 0x3d, 0x0e, 0x7d, 0xdc, 0x35, 0x7a, 0x46, 0x7f,
	0xd3, 0x4d, 0x48, 0x74, 0x0f, 0x6a, 0x98, 0xd2, 0x73, 0x36, 0xe9, 0xde, 0xea, 0x19, 0xfd, 0x86,
	0x1b, 0x53, 0xf6, 0xaf, 0x06, 0xd4, 0xb8, 0x01, 0x67, 0x84, 0x2c, 0xa8, 0x5f, 0x90, 0xef, 0x19,
	0xa6, 0xce, 0x48, 0xa0, 0x1b, 0x6e, 0x3d, 0x8c, 0x69, 0xd4, 0x83, 0xe6, 0x05, 0xc1, 0xd4, 0x8b,
	0xa6, 0x61, 0xe0, 0x8c, 0x62, 0x1b, 0xcd, 0x30, 0x65, 0x71, 0xf4, 0xcb, 0x30, 0x46, 0xdf, 0x96,
	0xe8, 0x28, 0xa6, 0xd1, 0x03, 0x80, 0x53, 0x1a, 0x2e, 0x62, 0xe9, 0xa6, 0x90, 0xc2, 0x78, 0xc5,
	0xb1, 0x9f, 0x40, 0xe7, 0x0c, 0x47, 0xa7, 0x22, 0x76, 0xe6, 0x04, 0xe3, 0xd0, 0xc5, 0xaf, 0xd0,
	0xc7, 0x89, 0x63, 0xc2, 0x99, 0xe6, 0xe1, 0xd6, 0x41, 0x9c, 0x2a, 0xc9, 0x75, 0x6b, 0x37, 0xe2,
	0x69, 0xff, 0x6e, 0x28, 0x68, 0x09, 0x96, 0x99, 0x38, 0x59, 0x9b, 0x89, 0x93, 0x82, 0x4c, 0xa0,
	0x13, 0xd8, 0x4a, 0x6d, 0x7c, 0x37, 0x65, 0x51, 0x77, 0xa3, 0xb7, 0xd1, 0x6f, 0x1e, 0xee, 0x1f,
	0x30, 0x51, 0x84, 0x2b, 0x8f, 0x4c, 0xaf, 0x88, 0x47, 0xbd, 0x05, 0x3b, 0x50, 0x3e, 0xb6, 0x35,
	0xd6, 0x40, 0xf6, 0x73, 0x68, 0x0d, 0x7d, 0x5f, 0x2a, 0x94, 0x08, 0x83, 0xbb, 0xe5, 0xe2, 0x57,
	0x8a, 0x5b, 0x54, 0x50, 0xf6, 0x31, 0xdc, 0x55, 0xec, 0x31, 0x82, 0x0e, 0xd5, 0x8a, 0xc7, 0x46,
	0x91, 0x6a, 0x54, 0x4a, 0x5c, 0xb8, 0x59, 0xbd, 0xdb, 0x7f, 0x1b, 0xd0, 0x76, 0x16, 0x24, 0xa4,
	0x51, 0xea, 0xd8, 0x27, 0x60, 0x4a, 0x42, 0x16, 0x41, 0x44, 0x6c, 0xf4, 0x36, 0xfa, 0x0d, 0xd7,
	0x1c, 0x67, 0xf8, 0xff, 0xa1, 0xfc, 0x7a, 0x89, 0x37, 0xb2, 0x25, 0xd6, 0x9a, 0xeb, 0xb6, 0xde,
	0x5c, 0xf6, 0x53, 0x68, 0xc9, 0x37, 0x17, 0xb3, 0xe5, 0x3c, 0xe2, 0xa9, 0xd0, 0xda, 0xb0, 0xb6,
	0x94, 0x36, 0x44, 0x8a, 0xb8, 0x86, 0x70, 0x60, 0x93, 0xa7, 0x88, 0x53, 0xf6, 0x6f, 0x06, 0x98,
	0x7a, 0x74, 0xd5, 0xd2, 0x84, 0xbe, 0x06, 0x53, 0x75, 0x44, 0xa4, 0xe4, 0x96, 0x68, 0x82, 0x9d,
	0x04, 0xa9, 0xca, 0x5d, 0x73, 0x99, 0xd1, 0xb6, 0xbf, 0x82, 0xdd, 0x55, 0x2f, 0x0e, 0x09, 0x99,
	0xff, 0xcc, 0xb9, 0x65, 0xba, 0xf9, 0x2f, 0x03, 0xee, 0x15, 0x59, 0xa8, 0xd4, 0xd2, 0xcf, 0xa1,
	0xb3, 0xaa, 0xf7, 0x12, 0xb3, 0x48, 0xe9, 0xea, 0xde, 0xda, 0xae, 0x8e, 0x75, 0xdd, 0xce, 0x38,
	0x0b, 0xb5, 0x3f, 0x07, 0x73, 0xe5, 0x5b, 0xd9, 0xc0, 0xb4, 0x63, 0xfa, 0x3f, 0x62, 0x7a, 0x47,
	0xc7, 0xf4, 0x08, 0xda, 0x43, 0xdf, 0x7f, 0x36, 0xf7, 0x6e, 0x66, 0xf3, 0x92, 0x91, 0x9c, 0x82,
	0xa9, 0x43, 0x2b, 0x1e, 0xca, 0x2f, 0x00, 0xb9, 0x78, 0x11, 0xbe, 0xc6, 0x95, 0xbc, 0x70, 0x60,
	0x3b, 0x87, 0xae, 0xe8, 0xc8, 0x11, 0xb4, 0xcf, 0x70, 0x54, 0xc9, 0x8b, 0x3f, 0x0c, 0xd1, 0x12,
	0xba, 0x0f, 0xe5, 0x8b, 0x7a, 0x01, 0x1d, 0x61, 0x42, 0x9c, 0x2e, 0xbd, 0xae, 0x0f, 0x0b, 0xea,
	0xfa, 0x62, 0x79, 0x3d, 0x9f, 0xde, 0x24, 0xca, 0x6e, 0xe7, 0x3a, 0x8b, 0xb5, 0x1f, 0x43, 0xd3,
	0x61, 0xa5, 0x87, 0xb0, 0xfd, 0x23, 0xb4, 0x52, 0x58, 0xa5, 0x48, 0x2c, 0xa8, 0x73, 0x64, 0x18,
	0x30, 0x2c, 0xa6, 0x60, 0xdd, 0xad, 0xd3, 0x98, 0xe6, 0xc7, 0xc7, 0x61, 0x4e, 0x20, 0x22, 0x2d,
	0x7b, 0x7c, 0x3c, 0xe8, 0x64, 0xb0, 0xef, 0xdc, 0xbd, 0x23, 0x68, 0x8f, 0xf0, 0x1c, 0x47, 0xb8,
	0x7c, 0xde, 0x4e, 0xc1, 0xd4, 0xa1, 0x15, 0x3b, 0xf1, 0x17, 0x03, 0x76, 0xb4, 0x6d, 0xc7, 0x1d,
	0x2b, 0xb3, 0x45, 0x6d, 0x68, 0xfd, 0xe4, 0x05, 0xfe, 0x1c, 0x6b, 0x8b, 0x42, 0xe3, 0xa1, 0x3d,
	0x68, 0x48, 0x9a, 0xa7, 0x47, 0x6e, 0xaa, 0x94, 0x61, 0x7f, 0x0b, 0xbb, 0x05, 0x1e, 0x54, 0x8c,
	0xe7, 0x25, 0xa0, 0x4b, 0xbc, 0xda, 0x4a, 0x0b, 0x8f, 0xce, 0x4a, 0x5f, 0x09, 0x38, 0x28, 0xbd,
	0x12, 0x70, 0x8a, 0x1f, 0xfd, 0x9c, 0xd5, 0x8a, 0x0e, 0x7e, 0x09, 0xdb, 0x67, 0x38, 0xba, 0xc4,
	0xf3, 0x71, 0xa5, 0x6d, 0xf5, 0xa7, 0x01, 0x3b, 0x79, 0xfc, 0xfb, 0xb0, 0xab, 0x0e, 0xff, 0xb9,
	0x03, 0xf1, 0x6d, 0x1a, 0x7d, 0x06, 0x0d, 0x2f, 0x29, 0x29, 0x5a, 0x6d, 0x72, 0xf5, 0x96, 0x66,
	0xed, 0x16, 0x70, 0x19, 0x41, 0x97, 0x80, 0x26, 0xb9, 0x65, 0x8c, 0xf6, 0x13, 0xe5, 0xc2, 0x55,
	0x6f, 0x3d, 0x78, 0x9b, 0x98, 0x11, 0x74, 0x0e, 0xe6, 0x24, 0x93, 0x33, 0x74, 0x5f, 0xc1, 0x64,
	0xab, 0x61, 0xed, 0xad, 0x17, 0x32, 0x82, 0x46, 0x70, 0x77, 0xa2, 0xee, 0x55, 0xd4, 0xcd, 0x7d,
	0x3f, 0x31, 0xf4, 0xe1, 0x1a, 0x09, 0x23, 0x68, 0x08, 0x2d, 0x4f, 0x59, 0x6a, 0xe8, 0x03, 0x25,
	0x21, 0xea, 0x66, 0xb0, 0xba, 0xc5, 0x02, 0x46, 0xd0, 0x37, 0xd0, 0xa6, 0xfa, 0x46, 0x42, 0x56,
	0xa2, 0x9c, 0x5f, 0x74, 0xd6, 0xfd, 0xb5, 0x32, 0x46, 0xd0, 0x63, 0xa8, 0x4f, 0xe3, 0x41, 0x8c,
	0xb6, 0x13, 0x45, 0x65, 0xa2, 0x5b, 0x3b, 0x79, 0xa6, 0xcc, 0xc5, 0x54, 0x9d, 0x92, 0x69, 0x2e,
	0xb2, 0x83, 0x37, 0xcd, 0x45, 0x7e, 0xac, 0x0e, 0xa1, 0x35, 0x51, 0x76, 0x5a, 0x9a, 0x8b, 0xcc,
	0x96, 0xb4, 0xba, 0xc5, 0x02, 0x69, 0xc2, 0x57, 0x06, 0x62, 0x6a, 0x22, 0x33, 0x61, 0x53, 0x13,
	0xb9, 0xf9, 0xf9, 0x02, 0x3a, 0x5e, 0x76, 0x10, 0xa1, 0xbd, 0xc2, 0x3e, 0x8d, 0xa7, 0xa4, 0xb5,
	0xff, 0x16, 0xa9, 0x2c, 0x10, 0xd3, 0xe7, 0x46, 0x5a, 0xa0, 0xfc, 0x98, 0x4a, 0x0b, 0x54, 0x34,
	0x6c, 0x86, 0xd0, 0x9a, 0x2a, 0x57, 0xee, 0x34, 0xc0, 0xcc, 0x6f, 0x46, 0x1a, 0x60, 0xf6, 0x86,
	0xfe, 0xec, 0xe1, 0x0f, 0x1f, 0xf1, 0xdf, 0xdc, 0x2b, 0xe7, 0x5c, 0xf9, 0xbf, 0x95, 0xca, 0x4f,
	0xe4, 0xe3, 0xba, 0x26, 0x98, 0x9f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x68, 0xf2, 0x63,
	0x2d, 0x0f, 0x00, 0x00,
}
