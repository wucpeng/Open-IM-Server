// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cache/cache.proto

/*
Package cache is a generated protocol buffer package.

It is generated from these files:
	cache/cache.proto

It has these top-level messages:
	CommonResp
	GetFriendIDListFromCacheReq
	GetFriendIDListFromCacheResp
	DelFriendIDListFromCacheReq
	DelFriendIDListFromCacheResp
	GetBlackIDListFromCacheReq
	GetBlackIDListFromCacheResp
	DelBlackIDListFromCacheReq
	DelBlackIDListFromCacheResp
	GetGroupMemberIDListFromCacheReq
	GetGroupMemberIDListFromCacheResp
	DelGroupMemberIDListFromCacheReq
	DelGroupMemberIDListFromCacheResp
*/
package cache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CommonResp) Reset()                    { *m = CommonResp{} }
func (m *CommonResp) String() string            { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()               {}
func (*CommonResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CommonResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetFriendIDListFromCacheReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *GetFriendIDListFromCacheReq) Reset()                    { *m = GetFriendIDListFromCacheReq{} }
func (m *GetFriendIDListFromCacheReq) String() string            { return proto.CompactTextString(m) }
func (*GetFriendIDListFromCacheReq) ProtoMessage()               {}
func (*GetFriendIDListFromCacheReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetFriendIDListFromCacheReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetFriendIDListFromCacheReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetFriendIDListFromCacheResp struct {
	UserIDList []string    `protobuf:"bytes,1,rep,name=userIDList" json:"userIDList,omitempty"`
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *GetFriendIDListFromCacheResp) Reset()                    { *m = GetFriendIDListFromCacheResp{} }
func (m *GetFriendIDListFromCacheResp) String() string            { return proto.CompactTextString(m) }
func (*GetFriendIDListFromCacheResp) ProtoMessage()               {}
func (*GetFriendIDListFromCacheResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetFriendIDListFromCacheResp) GetUserIDList() []string {
	if m != nil {
		return m.UserIDList
	}
	return nil
}

func (m *GetFriendIDListFromCacheResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type DelFriendIDListFromCacheReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *DelFriendIDListFromCacheReq) Reset()                    { *m = DelFriendIDListFromCacheReq{} }
func (m *DelFriendIDListFromCacheReq) String() string            { return proto.CompactTextString(m) }
func (*DelFriendIDListFromCacheReq) ProtoMessage()               {}
func (*DelFriendIDListFromCacheReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelFriendIDListFromCacheReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *DelFriendIDListFromCacheReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type DelFriendIDListFromCacheResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *DelFriendIDListFromCacheResp) Reset()                    { *m = DelFriendIDListFromCacheResp{} }
func (m *DelFriendIDListFromCacheResp) String() string            { return proto.CompactTextString(m) }
func (*DelFriendIDListFromCacheResp) ProtoMessage()               {}
func (*DelFriendIDListFromCacheResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelFriendIDListFromCacheResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetBlackIDListFromCacheReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *GetBlackIDListFromCacheReq) Reset()                    { *m = GetBlackIDListFromCacheReq{} }
func (m *GetBlackIDListFromCacheReq) String() string            { return proto.CompactTextString(m) }
func (*GetBlackIDListFromCacheReq) ProtoMessage()               {}
func (*GetBlackIDListFromCacheReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetBlackIDListFromCacheReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetBlackIDListFromCacheReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetBlackIDListFromCacheResp struct {
	UserIDList []string    `protobuf:"bytes,1,rep,name=userIDList" json:"userIDList,omitempty"`
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *GetBlackIDListFromCacheResp) Reset()                    { *m = GetBlackIDListFromCacheResp{} }
func (m *GetBlackIDListFromCacheResp) String() string            { return proto.CompactTextString(m) }
func (*GetBlackIDListFromCacheResp) ProtoMessage()               {}
func (*GetBlackIDListFromCacheResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetBlackIDListFromCacheResp) GetUserIDList() []string {
	if m != nil {
		return m.UserIDList
	}
	return nil
}

func (m *GetBlackIDListFromCacheResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type DelBlackIDListFromCacheReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *DelBlackIDListFromCacheReq) Reset()                    { *m = DelBlackIDListFromCacheReq{} }
func (m *DelBlackIDListFromCacheReq) String() string            { return proto.CompactTextString(m) }
func (*DelBlackIDListFromCacheReq) ProtoMessage()               {}
func (*DelBlackIDListFromCacheReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DelBlackIDListFromCacheReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *DelBlackIDListFromCacheReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type DelBlackIDListFromCacheResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *DelBlackIDListFromCacheResp) Reset()                    { *m = DelBlackIDListFromCacheResp{} }
func (m *DelBlackIDListFromCacheResp) String() string            { return proto.CompactTextString(m) }
func (*DelBlackIDListFromCacheResp) ProtoMessage()               {}
func (*DelBlackIDListFromCacheResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DelBlackIDListFromCacheResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetGroupMemberIDListFromCacheReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	GroupID     string `protobuf:"bytes,2,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *GetGroupMemberIDListFromCacheReq) Reset()         { *m = GetGroupMemberIDListFromCacheReq{} }
func (m *GetGroupMemberIDListFromCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetGroupMemberIDListFromCacheReq) ProtoMessage()    {}
func (*GetGroupMemberIDListFromCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9}
}

func (m *GetGroupMemberIDListFromCacheReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetGroupMemberIDListFromCacheReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type GetGroupMemberIDListFromCacheResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	UserIDList []string    `protobuf:"bytes,2,rep,name=userIDList" json:"userIDList,omitempty"`
}

func (m *GetGroupMemberIDListFromCacheResp) Reset()         { *m = GetGroupMemberIDListFromCacheResp{} }
func (m *GetGroupMemberIDListFromCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetGroupMemberIDListFromCacheResp) ProtoMessage()    {}
func (*GetGroupMemberIDListFromCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *GetGroupMemberIDListFromCacheResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetGroupMemberIDListFromCacheResp) GetUserIDList() []string {
	if m != nil {
		return m.UserIDList
	}
	return nil
}

type DelGroupMemberIDListFromCacheReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=groupID" json:"groupID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *DelGroupMemberIDListFromCacheReq) Reset()         { *m = DelGroupMemberIDListFromCacheReq{} }
func (m *DelGroupMemberIDListFromCacheReq) String() string { return proto.CompactTextString(m) }
func (*DelGroupMemberIDListFromCacheReq) ProtoMessage()    {}
func (*DelGroupMemberIDListFromCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

func (m *DelGroupMemberIDListFromCacheReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *DelGroupMemberIDListFromCacheReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type DelGroupMemberIDListFromCacheResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *DelGroupMemberIDListFromCacheResp) Reset()         { *m = DelGroupMemberIDListFromCacheResp{} }
func (m *DelGroupMemberIDListFromCacheResp) String() string { return proto.CompactTextString(m) }
func (*DelGroupMemberIDListFromCacheResp) ProtoMessage()    {}
func (*DelGroupMemberIDListFromCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *DelGroupMemberIDListFromCacheResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonResp)(nil), "cache.CommonResp")
	proto.RegisterType((*GetFriendIDListFromCacheReq)(nil), "cache.GetFriendIDListFromCacheReq")
	proto.RegisterType((*GetFriendIDListFromCacheResp)(nil), "cache.GetFriendIDListFromCacheResp")
	proto.RegisterType((*DelFriendIDListFromCacheReq)(nil), "cache.DelFriendIDListFromCacheReq")
	proto.RegisterType((*DelFriendIDListFromCacheResp)(nil), "cache.DelFriendIDListFromCacheResp")
	proto.RegisterType((*GetBlackIDListFromCacheReq)(nil), "cache.GetBlackIDListFromCacheReq")
	proto.RegisterType((*GetBlackIDListFromCacheResp)(nil), "cache.GetBlackIDListFromCacheResp")
	proto.RegisterType((*DelBlackIDListFromCacheReq)(nil), "cache.DelBlackIDListFromCacheReq")
	proto.RegisterType((*DelBlackIDListFromCacheResp)(nil), "cache.DelBlackIDListFromCacheResp")
	proto.RegisterType((*GetGroupMemberIDListFromCacheReq)(nil), "cache.GetGroupMemberIDListFromCacheReq")
	proto.RegisterType((*GetGroupMemberIDListFromCacheResp)(nil), "cache.GetGroupMemberIDListFromCacheResp")
	proto.RegisterType((*DelGroupMemberIDListFromCacheReq)(nil), "cache.DelGroupMemberIDListFromCacheReq")
	proto.RegisterType((*DelGroupMemberIDListFromCacheResp)(nil), "cache.DelGroupMemberIDListFromCacheResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cache service

type CacheClient interface {
	// friendInfo
	GetFriendIDListFromCache(ctx context.Context, in *GetFriendIDListFromCacheReq, opts ...grpc.CallOption) (*GetFriendIDListFromCacheResp, error)
	// for dtm
	DelFriendIDListFromCache(ctx context.Context, in *DelFriendIDListFromCacheReq, opts ...grpc.CallOption) (*DelFriendIDListFromCacheResp, error)
	// blackList
	GetBlackIDListFromCache(ctx context.Context, in *GetBlackIDListFromCacheReq, opts ...grpc.CallOption) (*GetBlackIDListFromCacheResp, error)
	// for dtm
	DelBlackIDListFromCache(ctx context.Context, in *DelBlackIDListFromCacheReq, opts ...grpc.CallOption) (*DelBlackIDListFromCacheResp, error)
	// group
	GetGroupMemberIDListFromCache(ctx context.Context, in *GetGroupMemberIDListFromCacheReq, opts ...grpc.CallOption) (*GetGroupMemberIDListFromCacheResp, error)
	// for dtm
	DelGroupMemberIDListFromCache(ctx context.Context, in *DelGroupMemberIDListFromCacheReq, opts ...grpc.CallOption) (*DelGroupMemberIDListFromCacheResp, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) GetFriendIDListFromCache(ctx context.Context, in *GetFriendIDListFromCacheReq, opts ...grpc.CallOption) (*GetFriendIDListFromCacheResp, error) {
	out := new(GetFriendIDListFromCacheResp)
	err := grpc.Invoke(ctx, "/cache.cache/GetFriendIDListFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) DelFriendIDListFromCache(ctx context.Context, in *DelFriendIDListFromCacheReq, opts ...grpc.CallOption) (*DelFriendIDListFromCacheResp, error) {
	out := new(DelFriendIDListFromCacheResp)
	err := grpc.Invoke(ctx, "/cache.cache/DelFriendIDListFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetBlackIDListFromCache(ctx context.Context, in *GetBlackIDListFromCacheReq, opts ...grpc.CallOption) (*GetBlackIDListFromCacheResp, error) {
	out := new(GetBlackIDListFromCacheResp)
	err := grpc.Invoke(ctx, "/cache.cache/GetBlackIDListFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) DelBlackIDListFromCache(ctx context.Context, in *DelBlackIDListFromCacheReq, opts ...grpc.CallOption) (*DelBlackIDListFromCacheResp, error) {
	out := new(DelBlackIDListFromCacheResp)
	err := grpc.Invoke(ctx, "/cache.cache/DelBlackIDListFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetGroupMemberIDListFromCache(ctx context.Context, in *GetGroupMemberIDListFromCacheReq, opts ...grpc.CallOption) (*GetGroupMemberIDListFromCacheResp, error) {
	out := new(GetGroupMemberIDListFromCacheResp)
	err := grpc.Invoke(ctx, "/cache.cache/GetGroupMemberIDListFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) DelGroupMemberIDListFromCache(ctx context.Context, in *DelGroupMemberIDListFromCacheReq, opts ...grpc.CallOption) (*DelGroupMemberIDListFromCacheResp, error) {
	out := new(DelGroupMemberIDListFromCacheResp)
	err := grpc.Invoke(ctx, "/cache.cache/DelGroupMemberIDListFromCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheServer interface {
	// friendInfo
	GetFriendIDListFromCache(context.Context, *GetFriendIDListFromCacheReq) (*GetFriendIDListFromCacheResp, error)
	// for dtm
	DelFriendIDListFromCache(context.Context, *DelFriendIDListFromCacheReq) (*DelFriendIDListFromCacheResp, error)
	// blackList
	GetBlackIDListFromCache(context.Context, *GetBlackIDListFromCacheReq) (*GetBlackIDListFromCacheResp, error)
	// for dtm
	DelBlackIDListFromCache(context.Context, *DelBlackIDListFromCacheReq) (*DelBlackIDListFromCacheResp, error)
	// group
	GetGroupMemberIDListFromCache(context.Context, *GetGroupMemberIDListFromCacheReq) (*GetGroupMemberIDListFromCacheResp, error)
	// for dtm
	DelGroupMemberIDListFromCache(context.Context, *DelGroupMemberIDListFromCacheReq) (*DelGroupMemberIDListFromCacheResp, error)
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_GetFriendIDListFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendIDListFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetFriendIDListFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.cache/GetFriendIDListFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetFriendIDListFromCache(ctx, req.(*GetFriendIDListFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_DelFriendIDListFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFriendIDListFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).DelFriendIDListFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.cache/DelFriendIDListFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).DelFriendIDListFromCache(ctx, req.(*DelFriendIDListFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetBlackIDListFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlackIDListFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetBlackIDListFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.cache/GetBlackIDListFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetBlackIDListFromCache(ctx, req.(*GetBlackIDListFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_DelBlackIDListFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBlackIDListFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).DelBlackIDListFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.cache/DelBlackIDListFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).DelBlackIDListFromCache(ctx, req.(*DelBlackIDListFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetGroupMemberIDListFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberIDListFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetGroupMemberIDListFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.cache/GetGroupMemberIDListFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetGroupMemberIDListFromCache(ctx, req.(*GetGroupMemberIDListFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_DelGroupMemberIDListFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGroupMemberIDListFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).DelGroupMemberIDListFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.cache/DelGroupMemberIDListFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).DelGroupMemberIDListFromCache(ctx, req.(*DelGroupMemberIDListFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cache.cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendIDListFromCache",
			Handler:    _Cache_GetFriendIDListFromCache_Handler,
		},
		{
			MethodName: "DelFriendIDListFromCache",
			Handler:    _Cache_DelFriendIDListFromCache_Handler,
		},
		{
			MethodName: "GetBlackIDListFromCache",
			Handler:    _Cache_GetBlackIDListFromCache_Handler,
		},
		{
			MethodName: "DelBlackIDListFromCache",
			Handler:    _Cache_DelBlackIDListFromCache_Handler,
		},
		{
			MethodName: "GetGroupMemberIDListFromCache",
			Handler:    _Cache_GetGroupMemberIDListFromCache_Handler,
		},
		{
			MethodName: "DelGroupMemberIDListFromCache",
			Handler:    _Cache_DelGroupMemberIDListFromCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache/cache.proto",
}

func init() { proto.RegisterFile("cache/cache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x8f, 0xd2, 0x40,
	0x14, 0x4f, 0x57, 0x77, 0x0d, 0x6f, 0x4f, 0x3b, 0x07, 0x6d, 0xea, 0xae, 0x96, 0x7a, 0xb0, 0x27,
	0x88, 0x78, 0x34, 0xf1, 0x00, 0x0d, 0x4d, 0x13, 0x89, 0xda, 0x03, 0x26, 0x1e, 0x54, 0x28, 0x2f,
	0x48, 0x68, 0x3b, 0xc3, 0x4c, 0xf1, 0xbf, 0x37, 0x31, 0x33, 0x2d, 0xa5, 0xd4, 0x9d, 0x96, 0x10,
	0xb8, 0x34, 0x79, 0xc3, 0xe3, 0xf7, 0x31, 0xef, 0x63, 0xe0, 0x2e, 0x9a, 0x45, 0xbf, 0xb1, 0xaf,
	0xbe, 0x3d, 0xc6, 0x69, 0x46, 0xc9, 0xb5, 0x0a, 0x9c, 0x8f, 0x00, 0x23, 0x9a, 0x24, 0x34, 0x0d,
	0x51, 0x30, 0x62, 0xc2, 0x33, 0xe4, 0x7c, 0x44, 0x17, 0x68, 0x1a, 0xb6, 0xe1, 0x5e, 0x87, 0xbb,
	0x90, 0x3c, 0x87, 0x1b, 0xe4, 0x7c, 0x22, 0x96, 0xe6, 0x95, 0x6d, 0xb8, 0x9d, 0xb0, 0x88, 0x9c,
	0x6f, 0xf0, 0xd2, 0xc7, 0x6c, 0xcc, 0x57, 0x98, 0x2e, 0x02, 0xef, 0xd3, 0x4a, 0x64, 0x63, 0x4e,
	0x93, 0x91, 0xc4, 0x0e, 0x71, 0x23, 0xff, 0xb6, 0x15, 0xc8, 0x03, 0x4f, 0xe1, 0x75, 0xc2, 0x22,
	0x22, 0x36, 0xdc, 0x52, 0x86, 0x7c, 0x96, 0xad, 0x68, 0x1a, 0x78, 0x05, 0x66, 0xf5, 0xc8, 0xd9,
	0xc0, 0xbd, 0x1e, 0x58, 0x30, 0xf2, 0x0a, 0x20, 0xc7, 0x92, 0x3f, 0x99, 0x86, 0xfd, 0xc4, 0xed,
	0x84, 0x95, 0x13, 0xf2, 0x0e, 0x20, 0x2a, 0x8d, 0x29, 0x82, 0xdb, 0xc1, 0x5d, 0x2f, 0xbf, 0x81,
	0xbd, 0xe3, 0xb0, 0x92, 0x24, 0xbd, 0x78, 0x18, 0x5f, 0xc0, 0xcb, 0x57, 0xb8, 0xd7, 0x03, 0x0b,
	0x56, 0xd3, 0x6a, 0x1c, 0xa3, 0x75, 0x0a, 0x96, 0x8f, 0xd9, 0x30, 0x9e, 0x45, 0xeb, 0xb3, 0x4a,
	0x65, 0xaa, 0x9e, 0x8f, 0xe3, 0x5e, 0xe6, 0xd6, 0xa7, 0x60, 0x79, 0x18, 0x9f, 0xdf, 0xc9, 0x17,
	0x55, 0x4d, 0xad, 0x93, 0x13, 0xee, 0xfc, 0x07, 0xd8, 0x3e, 0x66, 0x3e, 0xa7, 0x5b, 0x36, 0xc1,
	0x64, 0xbe, 0x33, 0x7d, 0xa0, 0xb7, 0xa6, 0xcb, 0xf8, 0x4f, 0x97, 0x9c, 0xb1, 0xa5, 0x84, 0x28,
	0x55, 0xef, 0x42, 0xe7, 0x0f, 0x74, 0x5b, 0xf0, 0x4f, 0xd2, 0x5d, 0x2b, 0xda, 0x55, 0xbd, 0x68,
	0xd2, 0x97, 0x87, 0x71, 0xb3, 0xaf, 0x8a, 0x6a, 0xe3, 0x40, 0xf5, 0x11, 0x95, 0x98, 0x42, 0xb7,
	0x05, 0xff, 0x24, 0x5f, 0x83, 0xbf, 0x4f, 0x21, 0xdf, 0x62, 0x24, 0x02, 0x53, 0xb7, 0x2c, 0x88,
	0x53, 0x80, 0x34, 0xac, 0x29, 0xeb, 0x4d, 0x6b, 0x8e, 0x60, 0x92, 0x44, 0x37, 0xc5, 0x25, 0x49,
	0xc3, 0xfe, 0x28, 0x49, 0x1a, 0x57, 0xc1, 0x2f, 0x78, 0xa1, 0x99, 0x3f, 0xd2, 0xdd, 0x8b, 0xd4,
	0x4c, 0x8b, 0xe5, 0xb4, 0xa5, 0xe4, 0x0c, 0x9a, 0xb9, 0x28, 0x19, 0xf4, 0xf3, 0x68, 0x39, 0x6d,
	0x29, 0x82, 0x11, 0x0e, 0x0f, 0x8d, 0x7d, 0x4c, 0xde, 0xee, 0x65, 0x36, 0x76, 0x9d, 0xe5, 0x1e,
	0x97, 0x98, 0x73, 0x36, 0xf6, 0x58, 0xc9, 0xd9, 0xd6, 0xe9, 0x25, 0x67, 0x6b, 0xcb, 0x0e, 0x5f,
	0x7f, 0x7f, 0xf8, 0xcc, 0x30, 0xfd, 0x19, 0x4c, 0xfa, 0x6c, 0xbd, 0xec, 0xab, 0x77, 0x35, 0x7f,
	0x63, 0x3f, 0xa8, 0xef, 0xfc, 0x46, 0x1d, 0xbd, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x92, 0x26,
	0xd1, 0x61, 0x7f, 0x07, 0x00, 0x00,
}
