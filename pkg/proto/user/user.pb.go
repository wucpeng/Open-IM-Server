// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	CommonResp
	GetAllUserIDReq
	GetAllUserIDResp
	AccountCheckReq
	AccountCheckResp
	GetUserInfoReq
	GetUserInfoResp
	UpdateUserInfoReq
	UpdateUserInfoResp
	SetGlobalRecvMessageOptReq
	SetGlobalRecvMessageOptResp
	SetConversationReq
	SetConversationResp
	SetRecvMsgOptReq
	SetRecvMsgOptResp
	GetConversationReq
	GetConversationResp
	GetConversationsReq
	GetConversationsResp
	GetAllConversationsReq
	GetAllConversationsResp
	BatchSetConversationsReq
	BatchSetConversationsResp
	GetUsersReq
	CmsUser
	GetUsersResp
	AddUserReq
	AddUserResp
	BlockUserReq
	BlockUserResp
	UnBlockUserReq
	UnBlockUserResp
	GetBlockUsersReq
	BlockUser
	GetBlockUsersResp
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import server_api_params "Open_IM/pkg/proto/sdk_ws"
import conversation "Open_IM/pkg/proto/conversation"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CommonResp) Reset()                    { *m = CommonResp{} }
func (m *CommonResp) String() string            { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()               {}
func (*CommonResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CommonResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetAllUserIDReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *GetAllUserIDReq) Reset()                    { *m = GetAllUserIDReq{} }
func (m *GetAllUserIDReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllUserIDReq) ProtoMessage()               {}
func (*GetAllUserIDReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetAllUserIDReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetAllUserIDReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetAllUserIDResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
	UserIDList []string    `protobuf:"bytes,2,rep,name=UserIDList,json=userIDList" json:"UserIDList,omitempty"`
}

func (m *GetAllUserIDResp) Reset()                    { *m = GetAllUserIDResp{} }
func (m *GetAllUserIDResp) String() string            { return proto.CompactTextString(m) }
func (*GetAllUserIDResp) ProtoMessage()               {}
func (*GetAllUserIDResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetAllUserIDResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetAllUserIDResp) GetUserIDList() []string {
	if m != nil {
		return m.UserIDList
	}
	return nil
}

type AccountCheckReq struct {
	CheckUserIDList []string `protobuf:"bytes,1,rep,name=CheckUserIDList,json=checkUserIDList" json:"CheckUserIDList,omitempty"`
	OpUserID        string   `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID     string   `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *AccountCheckReq) Reset()                    { *m = AccountCheckReq{} }
func (m *AccountCheckReq) String() string            { return proto.CompactTextString(m) }
func (*AccountCheckReq) ProtoMessage()               {}
func (*AccountCheckReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountCheckReq) GetCheckUserIDList() []string {
	if m != nil {
		return m.CheckUserIDList
	}
	return nil
}

func (m *AccountCheckReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *AccountCheckReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type AccountCheckResp struct {
	CommonResp *CommonResp                          `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	ResultList []*AccountCheckResp_SingleUserStatus `protobuf:"bytes,2,rep,name=ResultList,json=resultList" json:"ResultList,omitempty"`
}

func (m *AccountCheckResp) Reset()                    { *m = AccountCheckResp{} }
func (m *AccountCheckResp) String() string            { return proto.CompactTextString(m) }
func (*AccountCheckResp) ProtoMessage()               {}
func (*AccountCheckResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountCheckResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *AccountCheckResp) GetResultList() []*AccountCheckResp_SingleUserStatus {
	if m != nil {
		return m.ResultList
	}
	return nil
}

type AccountCheckResp_SingleUserStatus struct {
	UserID        string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	AccountStatus string `protobuf:"bytes,2,opt,name=accountStatus" json:"accountStatus,omitempty"`
}

func (m *AccountCheckResp_SingleUserStatus) Reset()         { *m = AccountCheckResp_SingleUserStatus{} }
func (m *AccountCheckResp_SingleUserStatus) String() string { return proto.CompactTextString(m) }
func (*AccountCheckResp_SingleUserStatus) ProtoMessage()    {}
func (*AccountCheckResp_SingleUserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

func (m *AccountCheckResp_SingleUserStatus) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AccountCheckResp_SingleUserStatus) GetAccountStatus() string {
	if m != nil {
		return m.AccountStatus
	}
	return ""
}

type GetUserInfoReq struct {
	UserIDList  []string `protobuf:"bytes,1,rep,name=userIDList" json:"userIDList,omitempty"`
	OpUserID    string   `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string   `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetUserInfoReq) Reset()                    { *m = GetUserInfoReq{} }
func (m *GetUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoReq) ProtoMessage()               {}
func (*GetUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetUserInfoReq) GetUserIDList() []string {
	if m != nil {
		return m.UserIDList
	}
	return nil
}

func (m *GetUserInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetUserInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetUserInfoResp struct {
	CommonResp   *CommonResp                   `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	UserInfoList []*server_api_params.UserInfo `protobuf:"bytes,3,rep,name=UserInfoList,json=userInfoList" json:"UserInfoList,omitempty"`
}

func (m *GetUserInfoResp) Reset()                    { *m = GetUserInfoResp{} }
func (m *GetUserInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResp) ProtoMessage()               {}
func (*GetUserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetUserInfoResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetUserInfoResp) GetUserInfoList() []*server_api_params.UserInfo {
	if m != nil {
		return m.UserInfoList
	}
	return nil
}

type UpdateUserInfoReq struct {
	UserInfo    *server_api_params.UserInfo `protobuf:"bytes,1,opt,name=UserInfo,json=userInfo" json:"UserInfo,omitempty"`
	OpUserID    string                      `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string                      `protobuf:"bytes,3,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *UpdateUserInfoReq) Reset()                    { *m = UpdateUserInfoReq{} }
func (m *UpdateUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserInfoReq) ProtoMessage()               {}
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateUserInfoReq) GetUserInfo() *server_api_params.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *UpdateUserInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *UpdateUserInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type UpdateUserInfoResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *UpdateUserInfoResp) Reset()                    { *m = UpdateUserInfoResp{} }
func (m *UpdateUserInfoResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserInfoResp) ProtoMessage()               {}
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateUserInfoResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type SetGlobalRecvMessageOptReq struct {
	UserID           string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OperationID      string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	GlobalRecvMsgOpt int32  `protobuf:"varint,3,opt,name=globalRecvMsgOpt" json:"globalRecvMsgOpt,omitempty"`
}

func (m *SetGlobalRecvMessageOptReq) Reset()                    { *m = SetGlobalRecvMessageOptReq{} }
func (m *SetGlobalRecvMessageOptReq) String() string            { return proto.CompactTextString(m) }
func (*SetGlobalRecvMessageOptReq) ProtoMessage()               {}
func (*SetGlobalRecvMessageOptReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SetGlobalRecvMessageOptReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SetGlobalRecvMessageOptReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *SetGlobalRecvMessageOptReq) GetGlobalRecvMsgOpt() int32 {
	if m != nil {
		return m.GlobalRecvMsgOpt
	}
	return 0
}

type SetGlobalRecvMessageOptResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *SetGlobalRecvMessageOptResp) Reset()                    { *m = SetGlobalRecvMessageOptResp{} }
func (m *SetGlobalRecvMessageOptResp) String() string            { return proto.CompactTextString(m) }
func (*SetGlobalRecvMessageOptResp) ProtoMessage()               {}
func (*SetGlobalRecvMessageOptResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetGlobalRecvMessageOptResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type SetConversationReq struct {
	Conversation     *conversation.Conversation `protobuf:"bytes,1,opt,name=Conversation,json=conversation" json:"Conversation,omitempty"`
	NotificationType int32                      `protobuf:"varint,2,opt,name=notificationType" json:"notificationType,omitempty"`
	OperationID      string                     `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *SetConversationReq) Reset()                    { *m = SetConversationReq{} }
func (m *SetConversationReq) String() string            { return proto.CompactTextString(m) }
func (*SetConversationReq) ProtoMessage()               {}
func (*SetConversationReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetConversationReq) GetConversation() *conversation.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *SetConversationReq) GetNotificationType() int32 {
	if m != nil {
		return m.NotificationType
	}
	return 0
}

func (m *SetConversationReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type SetConversationResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *SetConversationResp) Reset()                    { *m = SetConversationResp{} }
func (m *SetConversationResp) String() string            { return proto.CompactTextString(m) }
func (*SetConversationResp) ProtoMessage()               {}
func (*SetConversationResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SetConversationResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type SetRecvMsgOptReq struct {
	OwnerUserID      string `protobuf:"bytes,1,opt,name=OwnerUserID,json=ownerUserID" json:"OwnerUserID,omitempty"`
	ConversationID   string `protobuf:"bytes,2,opt,name=ConversationID,json=conversationID" json:"ConversationID,omitempty"`
	RecvMsgOpt       int32  `protobuf:"varint,3,opt,name=RecvMsgOpt,json=recvMsgOpt" json:"RecvMsgOpt,omitempty"`
	NotificationType int32  `protobuf:"varint,4,opt,name=notificationType" json:"notificationType,omitempty"`
	OperationID      string `protobuf:"bytes,5,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *SetRecvMsgOptReq) Reset()                    { *m = SetRecvMsgOptReq{} }
func (m *SetRecvMsgOptReq) String() string            { return proto.CompactTextString(m) }
func (*SetRecvMsgOptReq) ProtoMessage()               {}
func (*SetRecvMsgOptReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SetRecvMsgOptReq) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

func (m *SetRecvMsgOptReq) GetConversationID() string {
	if m != nil {
		return m.ConversationID
	}
	return ""
}

func (m *SetRecvMsgOptReq) GetRecvMsgOpt() int32 {
	if m != nil {
		return m.RecvMsgOpt
	}
	return 0
}

func (m *SetRecvMsgOptReq) GetNotificationType() int32 {
	if m != nil {
		return m.NotificationType
	}
	return 0
}

func (m *SetRecvMsgOptReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type SetRecvMsgOptResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *SetRecvMsgOptResp) Reset()                    { *m = SetRecvMsgOptResp{} }
func (m *SetRecvMsgOptResp) String() string            { return proto.CompactTextString(m) }
func (*SetRecvMsgOptResp) ProtoMessage()               {}
func (*SetRecvMsgOptResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SetRecvMsgOptResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetConversationReq struct {
	ConversationID string `protobuf:"bytes,1,opt,name=ConversationID,json=conversationID" json:"ConversationID,omitempty"`
	OwnerUserID    string `protobuf:"bytes,2,opt,name=OwnerUserID,json=ownerUserID" json:"OwnerUserID,omitempty"`
	OperationID    string `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetConversationReq) Reset()                    { *m = GetConversationReq{} }
func (m *GetConversationReq) String() string            { return proto.CompactTextString(m) }
func (*GetConversationReq) ProtoMessage()               {}
func (*GetConversationReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetConversationReq) GetConversationID() string {
	if m != nil {
		return m.ConversationID
	}
	return ""
}

func (m *GetConversationReq) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

func (m *GetConversationReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetConversationResp struct {
	CommonResp   *CommonResp                `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	Conversation *conversation.Conversation `protobuf:"bytes,2,opt,name=Conversation,json=conversation" json:"Conversation,omitempty"`
}

func (m *GetConversationResp) Reset()                    { *m = GetConversationResp{} }
func (m *GetConversationResp) String() string            { return proto.CompactTextString(m) }
func (*GetConversationResp) ProtoMessage()               {}
func (*GetConversationResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetConversationResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetConversationResp) GetConversation() *conversation.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

type GetConversationsReq struct {
	OwnerUserID     string   `protobuf:"bytes,1,opt,name=OwnerUserID,json=ownerUserID" json:"OwnerUserID,omitempty"`
	ConversationIDs []string `protobuf:"bytes,2,rep,name=ConversationIDs,json=conversationIDs" json:"ConversationIDs,omitempty"`
	OperationID     string   `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetConversationsReq) Reset()                    { *m = GetConversationsReq{} }
func (m *GetConversationsReq) String() string            { return proto.CompactTextString(m) }
func (*GetConversationsReq) ProtoMessage()               {}
func (*GetConversationsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetConversationsReq) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

func (m *GetConversationsReq) GetConversationIDs() []string {
	if m != nil {
		return m.ConversationIDs
	}
	return nil
}

func (m *GetConversationsReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetConversationsResp struct {
	CommonResp    *CommonResp                  `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	Conversations []*conversation.Conversation `protobuf:"bytes,2,rep,name=Conversations,json=conversations" json:"Conversations,omitempty"`
}

func (m *GetConversationsResp) Reset()                    { *m = GetConversationsResp{} }
func (m *GetConversationsResp) String() string            { return proto.CompactTextString(m) }
func (*GetConversationsResp) ProtoMessage()               {}
func (*GetConversationsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetConversationsResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetConversationsResp) GetConversations() []*conversation.Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type GetAllConversationsReq struct {
	OwnerUserID string `protobuf:"bytes,1,opt,name=OwnerUserID,json=ownerUserID" json:"OwnerUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetAllConversationsReq) Reset()                    { *m = GetAllConversationsReq{} }
func (m *GetAllConversationsReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllConversationsReq) ProtoMessage()               {}
func (*GetAllConversationsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetAllConversationsReq) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

func (m *GetAllConversationsReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetAllConversationsResp struct {
	CommonResp    *CommonResp                  `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	Conversations []*conversation.Conversation `protobuf:"bytes,2,rep,name=Conversations,json=conversations" json:"Conversations,omitempty"`
}

func (m *GetAllConversationsResp) Reset()                    { *m = GetAllConversationsResp{} }
func (m *GetAllConversationsResp) String() string            { return proto.CompactTextString(m) }
func (*GetAllConversationsResp) ProtoMessage()               {}
func (*GetAllConversationsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetAllConversationsResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetAllConversationsResp) GetConversations() []*conversation.Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type BatchSetConversationsReq struct {
	Conversations    []*conversation.Conversation `protobuf:"bytes,1,rep,name=Conversations,json=conversations" json:"Conversations,omitempty"`
	OwnerUserID      string                       `protobuf:"bytes,2,opt,name=OwnerUserID,json=ownerUserID" json:"OwnerUserID,omitempty"`
	NotificationType int32                        `protobuf:"varint,3,opt,name=notificationType" json:"notificationType,omitempty"`
	OperationID      string                       `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *BatchSetConversationsReq) Reset()                    { *m = BatchSetConversationsReq{} }
func (m *BatchSetConversationsReq) String() string            { return proto.CompactTextString(m) }
func (*BatchSetConversationsReq) ProtoMessage()               {}
func (*BatchSetConversationsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BatchSetConversationsReq) GetConversations() []*conversation.Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

func (m *BatchSetConversationsReq) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

func (m *BatchSetConversationsReq) GetNotificationType() int32 {
	if m != nil {
		return m.NotificationType
	}
	return 0
}

func (m *BatchSetConversationsReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type BatchSetConversationsResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	Success    []string    `protobuf:"bytes,2,rep,name=Success,json=success" json:"Success,omitempty"`
	Failed     []string    `protobuf:"bytes,3,rep,name=Failed,json=failed" json:"Failed,omitempty"`
}

func (m *BatchSetConversationsResp) Reset()                    { *m = BatchSetConversationsResp{} }
func (m *BatchSetConversationsResp) String() string            { return proto.CompactTextString(m) }
func (*BatchSetConversationsResp) ProtoMessage()               {}
func (*BatchSetConversationsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BatchSetConversationsResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *BatchSetConversationsResp) GetSuccess() []string {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *BatchSetConversationsResp) GetFailed() []string {
	if m != nil {
		return m.Failed
	}
	return nil
}

type GetUsersReq struct {
	OperationID string                               `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	Pagination  *server_api_params.RequestPagination `protobuf:"bytes,2,opt,name=pagination" json:"pagination,omitempty"`
	UserName    string                               `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	UserID      string                               `protobuf:"bytes,4,opt,name=userID" json:"userID,omitempty"`
	Content     string                               `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
}

func (m *GetUsersReq) Reset()                    { *m = GetUsersReq{} }
func (m *GetUsersReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsersReq) ProtoMessage()               {}
func (*GetUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetUsersReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetUsersReq) GetPagination() *server_api_params.RequestPagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetUsersReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *GetUsersReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUsersReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CmsUser struct {
	User    *server_api_params.UserInfo `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	IsBlock bool                        `protobuf:"varint,2,opt,name=isBlock" json:"isBlock,omitempty"`
}

func (m *CmsUser) Reset()                    { *m = CmsUser{} }
func (m *CmsUser) String() string            { return proto.CompactTextString(m) }
func (*CmsUser) ProtoMessage()               {}
func (*CmsUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CmsUser) GetUser() *server_api_params.UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CmsUser) GetIsBlock() bool {
	if m != nil {
		return m.IsBlock
	}
	return false
}

type GetUsersResp struct {
	CommonResp *CommonResp                           `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	UserList   []*CmsUser                            `protobuf:"bytes,2,rep,name=userList" json:"userList,omitempty"`
	Pagination *server_api_params.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,json=pagination" json:"Pagination,omitempty"`
	TotalNums  int32                                 `protobuf:"varint,4,opt,name=totalNums" json:"totalNums,omitempty"`
}

func (m *GetUsersResp) Reset()                    { *m = GetUsersResp{} }
func (m *GetUsersResp) String() string            { return proto.CompactTextString(m) }
func (*GetUsersResp) ProtoMessage()               {}
func (*GetUsersResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetUsersResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetUsersResp) GetUserList() []*CmsUser {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *GetUsersResp) GetPagination() *server_api_params.ResponsePagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetUsersResp) GetTotalNums() int32 {
	if m != nil {
		return m.TotalNums
	}
	return 0
}

type AddUserReq struct {
	UserInfo    *server_api_params.UserInfo `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	OperationID string                      `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *AddUserReq) Reset()                    { *m = AddUserReq{} }
func (m *AddUserReq) String() string            { return proto.CompactTextString(m) }
func (*AddUserReq) ProtoMessage()               {}
func (*AddUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AddUserReq) GetUserInfo() *server_api_params.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AddUserReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type AddUserResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *AddUserResp) Reset()                    { *m = AddUserResp{} }
func (m *AddUserResp) String() string            { return proto.CompactTextString(m) }
func (*AddUserResp) ProtoMessage()               {}
func (*AddUserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AddUserResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type BlockUserReq struct {
	UserID         string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	EndDisableTime string `protobuf:"bytes,2,opt,name=endDisableTime" json:"endDisableTime,omitempty"`
	OperationID    string `protobuf:"bytes,3,opt,name=operationID" json:"operationID,omitempty"`
	OpUserID       string `protobuf:"bytes,4,opt,name=opUserID" json:"opUserID,omitempty"`
}

func (m *BlockUserReq) Reset()                    { *m = BlockUserReq{} }
func (m *BlockUserReq) String() string            { return proto.CompactTextString(m) }
func (*BlockUserReq) ProtoMessage()               {}
func (*BlockUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BlockUserReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *BlockUserReq) GetEndDisableTime() string {
	if m != nil {
		return m.EndDisableTime
	}
	return ""
}

func (m *BlockUserReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *BlockUserReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type BlockUserResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *BlockUserResp) Reset()                    { *m = BlockUserResp{} }
func (m *BlockUserResp) String() string            { return proto.CompactTextString(m) }
func (*BlockUserResp) ProtoMessage()               {}
func (*BlockUserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BlockUserResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type UnBlockUserReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=opUserID" json:"opUserID,omitempty"`
}

func (m *UnBlockUserReq) Reset()                    { *m = UnBlockUserReq{} }
func (m *UnBlockUserReq) String() string            { return proto.CompactTextString(m) }
func (*UnBlockUserReq) ProtoMessage()               {}
func (*UnBlockUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UnBlockUserReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UnBlockUserReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *UnBlockUserReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type UnBlockUserResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *UnBlockUserResp) Reset()                    { *m = UnBlockUserResp{} }
func (m *UnBlockUserResp) String() string            { return proto.CompactTextString(m) }
func (*UnBlockUserResp) ProtoMessage()               {}
func (*UnBlockUserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *UnBlockUserResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetBlockUsersReq struct {
	Pagination        *server_api_params.RequestPagination `protobuf:"bytes,1,opt,name=pagination" json:"pagination,omitempty"`
	OperationID       string                               `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	UserID            string                               `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
	TotalBlockUserNum int32                                `protobuf:"varint,4,opt,name=totalBlockUserNum" json:"totalBlockUserNum,omitempty"`
}

func (m *GetBlockUsersReq) Reset()                    { *m = GetBlockUsersReq{} }
func (m *GetBlockUsersReq) String() string            { return proto.CompactTextString(m) }
func (*GetBlockUsersReq) ProtoMessage()               {}
func (*GetBlockUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetBlockUsersReq) GetPagination() *server_api_params.RequestPagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetBlockUsersReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetBlockUsersReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetBlockUsersReq) GetTotalBlockUserNum() int32 {
	if m != nil {
		return m.TotalBlockUserNum
	}
	return 0
}

type BlockUser struct {
	UserInfo         *server_api_params.UserInfo `protobuf:"bytes,1,opt,name=UserInfo,json=userInfo" json:"UserInfo,omitempty"`
	BeginDisableTime string                      `protobuf:"bytes,2,opt,name=BeginDisableTime,json=beginDisableTime" json:"BeginDisableTime,omitempty"`
	EndDisableTime   string                      `protobuf:"bytes,3,opt,name=EndDisableTime,json=endDisableTime" json:"EndDisableTime,omitempty"`
}

func (m *BlockUser) Reset()                    { *m = BlockUser{} }
func (m *BlockUser) String() string            { return proto.CompactTextString(m) }
func (*BlockUser) ProtoMessage()               {}
func (*BlockUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *BlockUser) GetUserInfo() *server_api_params.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *BlockUser) GetBeginDisableTime() string {
	if m != nil {
		return m.BeginDisableTime
	}
	return ""
}

func (m *BlockUser) GetEndDisableTime() string {
	if m != nil {
		return m.EndDisableTime
	}
	return ""
}

type GetBlockUsersResp struct {
	CommonResp *CommonResp                           `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
	BlockUsers []*BlockUser                          `protobuf:"bytes,2,rep,name=BlockUsers,json=blockUsers" json:"BlockUsers,omitempty"`
	Pagination *server_api_params.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,json=pagination" json:"Pagination,omitempty"`
	UserNums   int32                                 `protobuf:"varint,4,opt,name=UserNums,json=userNums" json:"UserNums,omitempty"`
}

func (m *GetBlockUsersResp) Reset()                    { *m = GetBlockUsersResp{} }
func (m *GetBlockUsersResp) String() string            { return proto.CompactTextString(m) }
func (*GetBlockUsersResp) ProtoMessage()               {}
func (*GetBlockUsersResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetBlockUsersResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetBlockUsersResp) GetBlockUsers() []*BlockUser {
	if m != nil {
		return m.BlockUsers
	}
	return nil
}

func (m *GetBlockUsersResp) GetPagination() *server_api_params.ResponsePagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetBlockUsersResp) GetUserNums() int32 {
	if m != nil {
		return m.UserNums
	}
	return 0
}

func init() {
	proto.RegisterType((*CommonResp)(nil), "user.CommonResp")
	proto.RegisterType((*GetAllUserIDReq)(nil), "user.GetAllUserIDReq")
	proto.RegisterType((*GetAllUserIDResp)(nil), "user.GetAllUserIDResp")
	proto.RegisterType((*AccountCheckReq)(nil), "user.AccountCheckReq")
	proto.RegisterType((*AccountCheckResp)(nil), "user.AccountCheckResp")
	proto.RegisterType((*AccountCheckResp_SingleUserStatus)(nil), "user.AccountCheckResp.SingleUserStatus")
	proto.RegisterType((*GetUserInfoReq)(nil), "user.GetUserInfoReq")
	proto.RegisterType((*GetUserInfoResp)(nil), "user.GetUserInfoResp")
	proto.RegisterType((*UpdateUserInfoReq)(nil), "user.UpdateUserInfoReq")
	proto.RegisterType((*UpdateUserInfoResp)(nil), "user.UpdateUserInfoResp")
	proto.RegisterType((*SetGlobalRecvMessageOptReq)(nil), "user.SetGlobalRecvMessageOptReq")
	proto.RegisterType((*SetGlobalRecvMessageOptResp)(nil), "user.SetGlobalRecvMessageOptResp")
	proto.RegisterType((*SetConversationReq)(nil), "user.SetConversationReq")
	proto.RegisterType((*SetConversationResp)(nil), "user.SetConversationResp")
	proto.RegisterType((*SetRecvMsgOptReq)(nil), "user.SetRecvMsgOptReq")
	proto.RegisterType((*SetRecvMsgOptResp)(nil), "user.SetRecvMsgOptResp")
	proto.RegisterType((*GetConversationReq)(nil), "user.GetConversationReq")
	proto.RegisterType((*GetConversationResp)(nil), "user.GetConversationResp")
	proto.RegisterType((*GetConversationsReq)(nil), "user.GetConversationsReq")
	proto.RegisterType((*GetConversationsResp)(nil), "user.GetConversationsResp")
	proto.RegisterType((*GetAllConversationsReq)(nil), "user.GetAllConversationsReq")
	proto.RegisterType((*GetAllConversationsResp)(nil), "user.GetAllConversationsResp")
	proto.RegisterType((*BatchSetConversationsReq)(nil), "user.BatchSetConversationsReq")
	proto.RegisterType((*BatchSetConversationsResp)(nil), "user.BatchSetConversationsResp")
	proto.RegisterType((*GetUsersReq)(nil), "user.GetUsersReq")
	proto.RegisterType((*CmsUser)(nil), "user.CmsUser")
	proto.RegisterType((*GetUsersResp)(nil), "user.GetUsersResp")
	proto.RegisterType((*AddUserReq)(nil), "user.AddUserReq")
	proto.RegisterType((*AddUserResp)(nil), "user.AddUserResp")
	proto.RegisterType((*BlockUserReq)(nil), "user.BlockUserReq")
	proto.RegisterType((*BlockUserResp)(nil), "user.BlockUserResp")
	proto.RegisterType((*UnBlockUserReq)(nil), "user.UnBlockUserReq")
	proto.RegisterType((*UnBlockUserResp)(nil), "user.UnBlockUserResp")
	proto.RegisterType((*GetBlockUsersReq)(nil), "user.GetBlockUsersReq")
	proto.RegisterType((*BlockUser)(nil), "user.BlockUser")
	proto.RegisterType((*GetBlockUsersResp)(nil), "user.GetBlockUsersResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	SetGlobalRecvMessageOpt(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error)
	GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error)
	AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error)
	GetConversation(ctx context.Context, in *GetConversationReq, opts ...grpc.CallOption) (*GetConversationResp, error)
	GetAllConversations(ctx context.Context, in *GetAllConversationsReq, opts ...grpc.CallOption) (*GetAllConversationsResp, error)
	GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error)
	BatchSetConversations(ctx context.Context, in *BatchSetConversationsReq, opts ...grpc.CallOption) (*BatchSetConversationsResp, error)
	SetConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error)
	SetRecvMsgOpt(ctx context.Context, in *SetRecvMsgOptReq, opts ...grpc.CallOption) (*SetRecvMsgOptResp, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*UnBlockUserResp, error)
	GetBlockUsers(ctx context.Context, in *GetBlockUsersReq, opts ...grpc.CallOption) (*GetBlockUsersResp, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := grpc.Invoke(ctx, "/user.user/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := grpc.Invoke(ctx, "/user.user/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetGlobalRecvMessageOpt(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error) {
	out := new(SetGlobalRecvMessageOptResp)
	err := grpc.Invoke(ctx, "/user.user/SetGlobalRecvMessageOpt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error) {
	out := new(GetAllUserIDResp)
	err := grpc.Invoke(ctx, "/user.user/GetAllUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error) {
	out := new(AccountCheckResp)
	err := grpc.Invoke(ctx, "/user.user/AccountCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConversation(ctx context.Context, in *GetConversationReq, opts ...grpc.CallOption) (*GetConversationResp, error) {
	out := new(GetConversationResp)
	err := grpc.Invoke(ctx, "/user.user/GetConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllConversations(ctx context.Context, in *GetAllConversationsReq, opts ...grpc.CallOption) (*GetAllConversationsResp, error) {
	out := new(GetAllConversationsResp)
	err := grpc.Invoke(ctx, "/user.user/GetAllConversations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error) {
	out := new(GetConversationsResp)
	err := grpc.Invoke(ctx, "/user.user/GetConversations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchSetConversations(ctx context.Context, in *BatchSetConversationsReq, opts ...grpc.CallOption) (*BatchSetConversationsResp, error) {
	out := new(BatchSetConversationsResp)
	err := grpc.Invoke(ctx, "/user.user/BatchSetConversations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error) {
	out := new(SetConversationResp)
	err := grpc.Invoke(ctx, "/user.user/SetConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetRecvMsgOpt(ctx context.Context, in *SetRecvMsgOptReq, opts ...grpc.CallOption) (*SetRecvMsgOptResp, error) {
	out := new(SetRecvMsgOptResp)
	err := grpc.Invoke(ctx, "/user.user/SetRecvMsgOpt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error) {
	out := new(GetUsersResp)
	err := grpc.Invoke(ctx, "/user.user/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := grpc.Invoke(ctx, "/user.user/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := grpc.Invoke(ctx, "/user.user/BlockUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*UnBlockUserResp, error) {
	out := new(UnBlockUserResp)
	err := grpc.Invoke(ctx, "/user.user/UnBlockUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBlockUsers(ctx context.Context, in *GetBlockUsersReq, opts ...grpc.CallOption) (*GetBlockUsersResp, error) {
	out := new(GetBlockUsersResp)
	err := grpc.Invoke(ctx, "/user.user/GetBlockUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	SetGlobalRecvMessageOpt(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error)
	GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error)
	AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error)
	GetConversation(context.Context, *GetConversationReq) (*GetConversationResp, error)
	GetAllConversations(context.Context, *GetAllConversationsReq) (*GetAllConversationsResp, error)
	GetConversations(context.Context, *GetConversationsReq) (*GetConversationsResp, error)
	BatchSetConversations(context.Context, *BatchSetConversationsReq) (*BatchSetConversationsResp, error)
	SetConversation(context.Context, *SetConversationReq) (*SetConversationResp, error)
	SetRecvMsgOpt(context.Context, *SetRecvMsgOptReq) (*SetRecvMsgOptResp, error)
	GetUsers(context.Context, *GetUsersReq) (*GetUsersResp, error)
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnBlockUser(context.Context, *UnBlockUserReq) (*UnBlockUserResp, error)
	GetBlockUsers(context.Context, *GetBlockUsersReq) (*GetBlockUsersResp, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetGlobalRecvMessageOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalRecvMessageOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetGlobalRecvMessageOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetGlobalRecvMessageOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetGlobalRecvMessageOpt(ctx, req.(*SetGlobalRecvMessageOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetAllUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllUserID(ctx, req.(*GetAllUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AccountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AccountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AccountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AccountCheck(ctx, req.(*AccountCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConversation(ctx, req.(*GetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetAllConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllConversations(ctx, req.(*GetAllConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConversations(ctx, req.(*GetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchSetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchSetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BatchSetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchSetConversations(ctx, req.(*BatchSetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetConversation(ctx, req.(*SetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetRecvMsgOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecvMsgOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetRecvMsgOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetRecvMsgOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetRecvMsgOpt(ctx, req.(*SetRecvMsgOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UnBlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnBlockUser(ctx, req.(*UnBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetBlockUsers(ctx, req.(*GetBlockUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "SetGlobalRecvMessageOpt",
			Handler:    _User_SetGlobalRecvMessageOpt_Handler,
		},
		{
			MethodName: "GetAllUserID",
			Handler:    _User_GetAllUserID_Handler,
		},
		{
			MethodName: "AccountCheck",
			Handler:    _User_AccountCheck_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _User_GetConversation_Handler,
		},
		{
			MethodName: "GetAllConversations",
			Handler:    _User_GetAllConversations_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _User_GetConversations_Handler,
		},
		{
			MethodName: "BatchSetConversations",
			Handler:    _User_BatchSetConversations_Handler,
		},
		{
			MethodName: "SetConversation",
			Handler:    _User_SetConversation_Handler,
		},
		{
			MethodName: "SetRecvMsgOpt",
			Handler:    _User_SetRecvMsgOpt_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _User_GetUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _User_AddUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _User_BlockUser_Handler,
		},
		{
			MethodName: "UnBlockUser",
			Handler:    _User_UnBlockUser_Handler,
		},
		{
			MethodName: "GetBlockUsers",
			Handler:    _User_GetBlockUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5b, 0x6f, 0x1b, 0xc5,
	0x17, 0xd7, 0xc4, 0x49, 0x93, 0x1c, 0xdf, 0xa7, 0x6d, 0xe2, 0x6e, 0x2f, 0xff, 0xfc, 0x57, 0xa5,
	0x84, 0x8a, 0xda, 0x10, 0x90, 0x40, 0x20, 0xda, 0x26, 0x4e, 0x6b, 0x45, 0x22, 0x75, 0xb5, 0x6e,
	0x25, 0x84, 0x10, 0xd1, 0x66, 0x3d, 0x71, 0x57, 0xb1, 0x77, 0xa7, 0x3b, 0xbb, 0xad, 0xfa, 0x04,
	0x02, 0x24, 0xa4, 0x0a, 0xde, 0x79, 0xe6, 0x93, 0x20, 0xf1, 0x80, 0x84, 0x78, 0xe0, 0x95, 0x27,
	0xbe, 0x0a, 0xda, 0xd9, 0xdb, 0xcc, 0x5e, 0x62, 0x77, 0xa9, 0xc4, 0x8b, 0xe5, 0x39, 0x33, 0x73,
	0xe6, 0xfc, 0x7e, 0x7b, 0xe6, 0x5c, 0x06, 0x9a, 0x1e, 0x23, 0x4e, 0xcf, 0xff, 0xe9, 0x52, 0xc7,
	0x76, 0x6d, 0xbc, 0xec, 0xff, 0x57, 0xb6, 0x87, 0x94, 0x58, 0xb7, 0x0e, 0x0e, 0x6f, 0x8d, 0x88,
	0xf3, 0x8c, 0x38, 0x3d, 0x7a, 0x3a, 0xe9, 0xf1, 0xf9, 0x1e, 0x1b, 0x9f, 0x1e, 0x3d, 0x67, 0xbd,
	0xe7, 0x2c, 0x58, 0xaf, 0x7c, 0x58, 0xb8, 0xd2, 0xb0, 0xad, 0x67, 0xc4, 0x61, 0xba, 0x6b, 0xda,
	0x96, 0x34, 0x08, 0x76, 0xaa, 0xb7, 0x01, 0xfa, 0xf6, 0x6c, 0x66, 0x5b, 0x1a, 0x61, 0x14, 0x77,
	0x60, 0x95, 0x38, 0x4e, 0xdf, 0x1e, 0x93, 0x0e, 0xda, 0x42, 0xdb, 0x2b, 0x5a, 0x34, 0xc4, 0x1b,
	0x70, 0x8e, 0x38, 0xce, 0x21, 0x9b, 0x74, 0x96, 0xb6, 0xd0, 0xf6, 0xba, 0x16, 0x8e, 0xd4, 0x21,
	0x34, 0x07, 0xc4, 0xdd, 0x9d, 0x4e, 0x1f, 0x33, 0xe2, 0x1c, 0xec, 0x6b, 0xe4, 0x29, 0x56, 0x60,
	0xcd, 0xa6, 0xc1, 0x90, 0x6b, 0x59, 0xd7, 0xe2, 0x31, 0xde, 0x82, 0xaa, 0x4d, 0x89, 0xc3, 0x2d,
	0x38, 0xd8, 0x0f, 0x75, 0x89, 0x22, 0x75, 0x0c, 0x2d, 0x59, 0x21, 0xa3, 0xf8, 0x1d, 0xd1, 0x48,
	0xae, 0xb3, 0xba, 0xd3, 0xea, 0x72, 0xbe, 0x12, 0xb9, 0x06, 0x46, 0x02, 0xe4, 0x1a, 0x40, 0xb0,
	0xff, 0x53, 0x93, 0xb9, 0x9d, 0xa5, 0xad, 0xca, 0xf6, 0xba, 0x06, 0x5e, 0x2c, 0x51, 0x5f, 0x40,
	0x73, 0xd7, 0x30, 0x6c, 0xcf, 0x72, 0xfb, 0x4f, 0x88, 0x71, 0xea, 0x9b, 0xbd, 0x0d, 0x4d, 0xfe,
	0x5f, 0xd8, 0x87, 0xf8, 0xbe, 0xa6, 0x21, 0x8b, 0x7d, 0x80, 0xc3, 0x08, 0xe0, 0x52, 0x16, 0xe0,
	0x50, 0x00, 0x58, 0xc9, 0x02, 0xfc, 0x1b, 0x41, 0x4b, 0x3e, 0x3b, 0x40, 0x68, 0xbc, 0x1a, 0xc2,
	0x01, 0x80, 0x46, 0x98, 0x37, 0x75, 0x63, 0x84, 0xd5, 0x9d, 0x37, 0x83, 0x1d, 0x69, 0xed, 0xdd,
	0x91, 0x69, 0x4d, 0xa6, 0xc4, 0xb7, 0x70, 0xe4, 0xea, 0xae, 0xc7, 0x34, 0x70, 0xe2, 0xad, 0xca,
	0x43, 0x68, 0xa5, 0xe7, 0xfd, 0xaf, 0xed, 0x89, 0x1f, 0x30, 0x1c, 0xe1, 0xeb, 0x50, 0xd7, 0x03,
	0xe5, 0xc1, 0xc2, 0x10, 0xbe, 0x2c, 0x54, 0x2d, 0x68, 0x0c, 0x88, 0xcb, 0x09, 0xb1, 0x4e, 0x6c,
	0x9f, 0xdb, 0x6b, 0x20, 0x90, 0x1f, 0xd2, 0x2a, 0x48, 0xfe, 0x25, 0xa3, 0xdf, 0x21, 0xee, 0x84,
	0xc9, 0x81, 0xa5, 0x08, 0xbd, 0x03, 0xb5, 0x48, 0x03, 0xb7, 0xb2, 0xc2, 0x29, 0xbd, 0xdc, 0x65,
	0xfc, 0x4a, 0x1d, 0xe9, 0xd4, 0x3c, 0xa2, 0xba, 0xa3, 0xcf, 0x58, 0x37, 0x3e, 0xa8, 0xe6, 0x09,
	0x1b, 0xd4, 0x97, 0x08, 0xda, 0x8f, 0xe9, 0x58, 0x77, 0x89, 0x08, 0xfd, 0x03, 0x58, 0x8b, 0x86,
	0xa1, 0x19, 0x67, 0xaa, 0x5c, 0x8b, 0x54, 0xce, 0xe3, 0xc4, 0x3e, 0x9b, 0x93, 0xfb, 0x80, 0xd3,
	0xb6, 0x94, 0x61, 0x45, 0xfd, 0x06, 0x81, 0x32, 0x22, 0xee, 0x60, 0x6a, 0x1f, 0xeb, 0x53, 0x8d,
	0x18, 0xcf, 0x0e, 0x09, 0x63, 0xfa, 0x84, 0x0c, 0xa9, 0xeb, 0xa3, 0x2b, 0x72, 0x94, 0xb9, 0xf7,
	0x1c, 0xdf, 0x84, 0xd6, 0x24, 0x51, 0xca, 0x26, 0x43, 0xea, 0x72, 0x1c, 0x2b, 0x5a, 0x46, 0xae,
	0x0e, 0xe1, 0x72, 0xa1, 0x0d, 0xa5, 0x50, 0xfd, 0x8c, 0x00, 0x8f, 0x88, 0xdb, 0x17, 0xe2, 0xa1,
	0x8f, 0xe6, 0x36, 0xd4, 0x44, 0x51, 0xa8, 0x4a, 0xe9, 0x4a, 0x71, 0x53, 0xda, 0x54, 0x13, 0xa7,
	0x7c, 0x4c, 0x96, 0xed, 0x9a, 0x27, 0xa6, 0xc1, 0xc7, 0x8f, 0x5e, 0x50, 0xc2, 0xa1, 0xaf, 0x68,
	0x19, 0xf9, 0x02, 0x6e, 0x3d, 0x80, 0xf3, 0x19, 0x1b, 0x4b, 0xa1, 0xfd, 0x1d, 0x41, 0x6b, 0x44,
	0xdc, 0x84, 0x50, 0x1f, 0xab, 0x7f, 0xfe, 0x73, 0x8b, 0x38, 0x52, 0xa0, 0xae, 0xda, 0x89, 0x08,
	0xdf, 0x80, 0x86, 0x78, 0x78, 0xfc, 0x19, 0x1b, 0x86, 0x24, 0xf5, 0x2f, 0x77, 0xe6, 0x1b, 0x82,
	0x13, 0x4b, 0x72, 0x59, 0x59, 0x5e, 0x8c, 0x95, 0x95, 0x2c, 0x2b, 0xf7, 0xa0, 0x9d, 0xc2, 0x52,
	0x8a, 0x93, 0xaf, 0x11, 0xe0, 0x41, 0xd6, 0x03, 0xb2, 0x98, 0x51, 0x2e, 0xe6, 0x14, 0x7b, 0x4b,
	0x59, 0xf6, 0xe6, 0x7f, 0xdf, 0xef, 0x11, 0x9c, 0x1f, 0xbc, 0x8e, 0x0f, 0x9c, 0xf1, 0xdb, 0xa5,
	0x57, 0xf3, 0x5b, 0xf5, 0xdb, 0xac, 0x25, 0x6c, 0x31, 0x1f, 0xf1, 0x93, 0xa6, 0xc4, 0x0c, 0x0b,
	0x93, 0x6d, 0x53, 0x26, 0x8c, 0x2d, 0xc0, 0xc7, 0x4b, 0x04, 0x17, 0xb2, 0x56, 0x94, 0x22, 0xe4,
	0x2e, 0xd4, 0x25, 0x35, 0x61, 0x7e, 0x3c, 0x8b, 0x91, 0xba, 0x38, 0xc5, 0xd4, 0x2f, 0x60, 0x23,
	0x28, 0x43, 0x4a, 0x90, 0x92, 0x82, 0x9a, 0x53, 0xe4, 0xfc, 0x88, 0x60, 0x33, 0x57, 0xfd, 0x7f,
	0x84, 0xf6, 0x0f, 0x04, 0x9d, 0x3d, 0xdd, 0x35, 0x9e, 0x8c, 0x72, 0xbc, 0x20, 0xa3, 0x1e, 0xbd,
	0xa2, 0xfa, 0x05, 0x6e, 0x4b, 0x5e, 0x8c, 0xa8, 0x2c, 0x16, 0x23, 0x96, 0xb3, 0xf4, 0x7e, 0x05,
	0x97, 0x0a, 0xd0, 0x94, 0xe2, 0xb7, 0x03, 0xab, 0x23, 0xcf, 0x30, 0x08, 0x8b, 0x9c, 0x7b, 0x95,
	0x05, 0x43, 0x3f, 0xfd, 0xdd, 0xd7, 0xcd, 0x29, 0x19, 0xf3, 0x6a, 0x61, 0x5d, 0x3b, 0x77, 0xc2,
	0x47, 0xea, 0xaf, 0x08, 0xaa, 0x61, 0x45, 0x12, 0xf9, 0x8c, 0x98, 0x0e, 0x51, 0x36, 0x1d, 0xee,
	0x03, 0x50, 0x7d, 0x62, 0x5a, 0xe2, 0x05, 0xbe, 0x9e, 0x53, 0x28, 0x68, 0xe4, 0xa9, 0x47, 0x98,
	0xfb, 0x30, 0x5e, 0xab, 0x09, 0xfb, 0xfc, 0x9a, 0xc1, 0x07, 0xf2, 0x40, 0x9f, 0x91, 0xf0, 0x86,
	0xc5, 0x63, 0x21, 0x55, 0x2f, 0x4b, 0xa9, 0xba, 0x03, 0xab, 0x86, 0x6d, 0xb9, 0xc4, 0x72, 0xc3,
	0x70, 0x1b, 0x0d, 0xd5, 0x47, 0xb0, 0xda, 0x9f, 0x31, 0x1f, 0x04, 0xee, 0x01, 0x6f, 0x49, 0x16,
	0xa9, 0x60, 0xf8, 0x42, 0x5f, 0xab, 0xc9, 0xf6, 0xa6, 0xb6, 0x71, 0xca, 0xc1, 0xac, 0x69, 0xd1,
	0x50, 0xfd, 0x13, 0x41, 0x2d, 0xe1, 0xa6, 0xd4, 0x07, 0x79, 0x2b, 0x80, 0x29, 0x54, 0xbe, 0xf5,
	0x70, 0x7d, 0x60, 0xae, 0x16, 0x4f, 0xe3, 0x7b, 0x00, 0x09, 0x57, 0x9c, 0x93, 0xea, 0xce, 0x1b,
	0xb9, 0xbc, 0x32, 0x6a, 0x5b, 0x8c, 0x14, 0x10, 0x7b, 0x05, 0xd6, 0x5d, 0xdb, 0xd5, 0xa7, 0x0f,
	0xbc, 0x19, 0x0b, 0x93, 0x57, 0x22, 0x50, 0x27, 0x00, 0xbb, 0xe3, 0x31, 0x3f, 0x39, 0xa8, 0xf8,
	0xbc, 0x52, 0x15, 0xdf, 0xfc, 0xe6, 0xe8, 0x0e, 0x54, 0xe3, 0x83, 0xca, 0xf4, 0x45, 0xea, 0x0f,
	0x08, 0x6a, 0xfc, 0x33, 0x44, 0xc6, 0x16, 0x15, 0x70, 0x37, 0xa0, 0x41, 0xac, 0xf1, 0xbe, 0xc9,
	0xf4, 0xe3, 0x29, 0x79, 0x64, 0xce, 0x48, 0x94, 0xfc, 0x65, 0xe9, 0xfc, 0x4a, 0x54, 0x6a, 0x07,
	0x97, 0xe5, 0x3a, 0x56, 0xdd, 0x85, 0xba, 0x60, 0x4d, 0x29, 0x44, 0x27, 0xd0, 0x78, 0x6c, 0x2d,
	0x04, 0x69, 0x7e, 0x4d, 0x2a, 0x9a, 0x5a, 0x49, 0x99, 0xda, 0x87, 0xa6, 0x74, 0x4e, 0x29, 0x63,
	0x7f, 0x41, 0xbc, 0xbb, 0x8d, 0xd5, 0xf0, 0xe0, 0x20, 0x5f, 0x7d, 0x54, 0xf2, 0xea, 0xcf, 0x47,
	0x97, 0xf0, 0x52, 0x91, 0x78, 0x79, 0x1b, 0xda, 0xdc, 0x95, 0x63, 0xab, 0x1e, 0x78, 0xb3, 0xd0,
	0xc7, 0xb3, 0x13, 0xea, 0x4f, 0x08, 0xd6, 0x63, 0x41, 0xf9, 0xee, 0xe6, 0x26, 0xb4, 0xf6, 0xc8,
	0xc4, 0xb4, 0xb2, 0x1e, 0xd6, 0x3a, 0x4e, 0xc9, 0x7d, 0x5f, 0xbc, 0x27, 0xfb, 0x62, 0x25, 0xcf,
	0x17, 0xd5, 0xbf, 0x10, 0xb4, 0x53, 0xec, 0x96, 0x7a, 0x3c, 0xe8, 0x01, 0x24, 0x3a, 0xc2, 0x00,
	0xd3, 0x0c, 0x76, 0x24, 0x0e, 0x00, 0xc7, 0xf1, 0x92, 0xd7, 0x15, 0x64, 0x94, 0x80, 0x4c, 0x21,
	0xc6, 0x04, 0xd1, 0xdb, 0x9b, 0xb1, 0x9d, 0xdf, 0xd6, 0x82, 0x08, 0x8c, 0x3f, 0x8a, 0x33, 0x0b,
	0xe7, 0xf1, 0x42, 0x60, 0x97, 0xdc, 0x6f, 0x2b, 0x17, 0x73, 0xa4, 0x8c, 0xe2, 0x3e, 0x34, 0xe4,
	0xa6, 0x10, 0x6f, 0x06, 0x0b, 0x33, 0x6d, 0xab, 0xd2, 0xc9, 0x9f, 0x60, 0x14, 0x7f, 0x09, 0x9b,
	0x05, 0xcd, 0x18, 0xde, 0x0a, 0x36, 0x15, 0xf7, 0x8b, 0xca, 0xff, 0xe7, 0xac, 0x60, 0x14, 0x7f,
	0xc2, 0xd3, 0x43, 0xfc, 0x00, 0x84, 0x13, 0x2c, 0xe2, 0x2b, 0x93, 0xb2, 0x91, 0x27, 0x0e, 0xb6,
	0x8b, 0xef, 0x1f, 0xd1, 0xf6, 0xd4, 0x6b, 0x4f, 0xb4, 0x3d, 0xf3, 0x10, 0x73, 0x9f, 0x3f, 0x25,
	0x88, 0x55, 0x03, 0xee, 0xc4, 0x27, 0xa5, 0xba, 0x05, 0xe5, 0x52, 0xc1, 0x0c, 0xa3, 0x58, 0xe3,
	0x15, 0x75, 0xba, 0xc0, 0xc3, 0x57, 0x44, 0xab, 0xd3, 0x95, 0x96, 0x72, 0xf5, 0x8c, 0x59, 0x46,
	0xf1, 0x01, 0x0f, 0x1e, 0xb2, 0xc2, 0x7c, 0x13, 0xb8, 0x36, 0xa5, 0x68, 0x8a, 0x51, 0xfc, 0x19,
	0x5c, 0xcc, 0xad, 0x90, 0xf0, 0xb5, 0xd0, 0xcf, 0x0b, 0x8a, 0x41, 0xe5, 0x7f, 0x67, 0xce, 0x07,
	0x04, 0x8e, 0xf2, 0x09, 0x1c, 0x15, 0x12, 0x98, 0xd7, 0xe6, 0xde, 0x85, 0xba, 0xd4, 0xe7, 0xe1,
	0x8d, 0x78, 0xad, 0xd4, 0xc8, 0x2a, 0x9b, 0xb9, 0x72, 0x46, 0xf1, 0xbb, 0xb0, 0x16, 0xd5, 0x19,
	0xb8, 0x2d, 0x5d, 0x08, 0x8e, 0x04, 0xa7, 0x45, 0x8c, 0xe2, 0x2e, 0xac, 0x86, 0xf9, 0x15, 0x87,
	0x21, 0x22, 0xc9, 0xeb, 0x4a, 0x3b, 0x25, 0x61, 0x14, 0xbf, 0x2f, 0xc6, 0x42, 0x9c, 0x0e, 0x11,
	0xe4, 0xa9, 0x72, 0x3e, 0x23, 0x63, 0xd4, 0xbf, 0xc2, 0x42, 0x2a, 0x89, 0xae, 0xb0, 0x9c, 0xc5,
	0xa2, 0x2b, 0x9c, 0xce, 0x39, 0x77, 0xa1, 0x2e, 0x85, 0x38, 0x9c, 0xdc, 0x03, 0x29, 0xab, 0x44,
	0xb4, 0x64, 0xe2, 0xe1, 0xde, 0xd5, 0xcf, 0x2f, 0x0f, 0x29, 0xb1, 0x8e, 0x0e, 0x0e, 0x85, 0x67,
	0x62, 0x7f, 0xed, 0xc7, 0xfe, 0xcf, 0xf1, 0x39, 0x2e, 0x78, 0xef, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x66, 0x52, 0xd4, 0xd5, 0x94, 0x16, 0x00, 0x00,
}
