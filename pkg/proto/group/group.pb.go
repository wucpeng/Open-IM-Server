// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group/group.proto

/*
Package group is a generated protocol buffer package.

It is generated from these files:
	group/group.proto

It has these top-level messages:
	CommonResp
	GroupAddMemberInfo
	CreateGroupReq
	CreateGroupResp
	GetGroupsInfoReq
	GetGroupsInfoResp
	SetGroupInfoReq
	SetGroupInfoResp
	GetGroupApplicationListReq
	GetGroupApplicationListResp
	GetUserReqApplicationListReq
	GetUserReqApplicationListResp
	TransferGroupOwnerReq
	TransferGroupOwnerResp
	JoinGroupReq
	JoinGroupResp
	GroupApplicationResponseReq
	GroupApplicationResponseResp
	QuitGroupReq
	QuitGroupResp
	GetGroupMemberListReq
	GetGroupMemberListResp
	GetGroupMembersInfoReq
	GetGroupMembersInfoResp
	KickGroupMemberReq
	Id2Result
	KickGroupMemberResp
	GetJoinedGroupListReq
	GetJoinedGroupListResp
	InviteUserToGroupReq
	InviteUserToGroupResp
	GetGroupAllMemberReq
	GetGroupAllMemberResp
	CMSGroup
	GetGroupsReq
	GetGroupsResp
	GetGroupMemberReq
	GetGroupMembersCMSReq
	GetGroupMembersCMSResp
	DismissGroupReq
	DismissGroupResp
	MuteGroupMemberReq
	MuteGroupMemberResp
	CancelMuteGroupMemberReq
	CancelMuteGroupMemberResp
	MuteGroupReq
	MuteGroupResp
	CancelMuteGroupReq
	CancelMuteGroupResp
	SetGroupMemberNicknameReq
	SetGroupMemberNicknameResp
	GetJoinedSuperGroupListReq
	GetJoinedSuperGroupListResp
	GetSuperGroupsInfoReq
	GetSuperGroupsInfoResp
	SetGroupMemberInfoReq
	SetGroupMemberInfoResp
	GetGroupAbstractInfoReq
	GetGroupAbstractInfoResp
*/
package group

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import server_api_params "Open_IM/pkg/proto/sdk_ws"
import google_protobuf "google.golang.org/protobuf/types/known/wrapperspb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
}

func (m *CommonResp) Reset()                    { *m = CommonResp{} }
func (m *CommonResp) String() string            { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()               {}
func (*CommonResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CommonResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GroupAddMemberInfo struct {
	UserID    string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	RoleLevel int32  `protobuf:"varint,2,opt,name=RoleLevel,json=roleLevel" json:"RoleLevel,omitempty"`
}

func (m *GroupAddMemberInfo) Reset()                    { *m = GroupAddMemberInfo{} }
func (m *GroupAddMemberInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupAddMemberInfo) ProtoMessage()               {}
func (*GroupAddMemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupAddMemberInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GroupAddMemberInfo) GetRoleLevel() int32 {
	if m != nil {
		return m.RoleLevel
	}
	return 0
}

type CreateGroupReq struct {
	InitMemberList []*GroupAddMemberInfo        `protobuf:"bytes,1,rep,name=InitMemberList,json=initMemberList" json:"InitMemberList,omitempty"`
	GroupInfo      *server_api_params.GroupInfo `protobuf:"bytes,2,opt,name=GroupInfo,json=groupInfo" json:"GroupInfo,omitempty"`
	OperationID    string                       `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID       string                       `protobuf:"bytes,4,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OwnerUserID    string                       `protobuf:"bytes,5,opt,name=OwnerUserID,json=ownerUserID" json:"OwnerUserID,omitempty"`
}

func (m *CreateGroupReq) Reset()                    { *m = CreateGroupReq{} }
func (m *CreateGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupReq) ProtoMessage()               {}
func (*CreateGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateGroupReq) GetInitMemberList() []*GroupAddMemberInfo {
	if m != nil {
		return m.InitMemberList
	}
	return nil
}

func (m *CreateGroupReq) GetGroupInfo() *server_api_params.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *CreateGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *CreateGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *CreateGroupReq) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

type CreateGroupResp struct {
	ErrCode   int32                        `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg    string                       `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	GroupInfo *server_api_params.GroupInfo `protobuf:"bytes,3,opt,name=GroupInfo,json=groupInfo" json:"GroupInfo,omitempty"`
}

func (m *CreateGroupResp) Reset()                    { *m = CreateGroupResp{} }
func (m *CreateGroupResp) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResp) ProtoMessage()               {}
func (*CreateGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateGroupResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CreateGroupResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateGroupResp) GetGroupInfo() *server_api_params.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

type GetGroupsInfoReq struct {
	GroupIDList []string `protobuf:"bytes,1,rep,name=GroupIDList,json=groupIDList" json:"GroupIDList,omitempty"`
	OperationID string   `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID    string   `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *GetGroupsInfoReq) Reset()                    { *m = GetGroupsInfoReq{} }
func (m *GetGroupsInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsInfoReq) ProtoMessage()               {}
func (*GetGroupsInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetGroupsInfoReq) GetGroupIDList() []string {
	if m != nil {
		return m.GroupIDList
	}
	return nil
}

func (m *GetGroupsInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetGroupsInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type GetGroupsInfoResp struct {
	ErrCode       int32                          `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg        string                         `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	GroupInfoList []*server_api_params.GroupInfo `protobuf:"bytes,3,rep,name=GroupInfoList,json=groupInfoList" json:"GroupInfoList,omitempty"`
}

func (m *GetGroupsInfoResp) Reset()                    { *m = GetGroupsInfoResp{} }
func (m *GetGroupsInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsInfoResp) ProtoMessage()               {}
func (*GetGroupsInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetGroupsInfoResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGroupsInfoResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetGroupsInfoResp) GetGroupInfoList() []*server_api_params.GroupInfo {
	if m != nil {
		return m.GroupInfoList
	}
	return nil
}

type SetGroupInfoReq struct {
	GroupInfoForSet *server_api_params.GroupInfoForSet `protobuf:"bytes,1,opt,name=groupInfoForSet" json:"groupInfoForSet,omitempty"`
	OpUserID        string                             `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID     string                             `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *SetGroupInfoReq) Reset()                    { *m = SetGroupInfoReq{} }
func (m *SetGroupInfoReq) String() string            { return proto.CompactTextString(m) }
func (*SetGroupInfoReq) ProtoMessage()               {}
func (*SetGroupInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetGroupInfoReq) GetGroupInfoForSet() *server_api_params.GroupInfoForSet {
	if m != nil {
		return m.GroupInfoForSet
	}
	return nil
}

func (m *SetGroupInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *SetGroupInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type SetGroupInfoResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *SetGroupInfoResp) Reset()                    { *m = SetGroupInfoResp{} }
func (m *SetGroupInfoResp) String() string            { return proto.CompactTextString(m) }
func (*SetGroupInfoResp) ProtoMessage()               {}
func (*SetGroupInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetGroupInfoResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetGroupApplicationListReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	FromUserID  string `protobuf:"bytes,3,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
}

func (m *GetGroupApplicationListReq) Reset()                    { *m = GetGroupApplicationListReq{} }
func (m *GetGroupApplicationListReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupApplicationListReq) ProtoMessage()               {}
func (*GetGroupApplicationListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetGroupApplicationListReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetGroupApplicationListReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetGroupApplicationListReq) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

type GetGroupApplicationListResp struct {
	ErrCode          int32                             `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg           string                            `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	GroupRequestList []*server_api_params.GroupRequest `protobuf:"bytes,3,rep,name=GroupRequestList,json=groupRequestList" json:"GroupRequestList,omitempty"`
}

func (m *GetGroupApplicationListResp) Reset()                    { *m = GetGroupApplicationListResp{} }
func (m *GetGroupApplicationListResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupApplicationListResp) ProtoMessage()               {}
func (*GetGroupApplicationListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetGroupApplicationListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGroupApplicationListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetGroupApplicationListResp) GetGroupRequestList() []*server_api_params.GroupRequest {
	if m != nil {
		return m.GroupRequestList
	}
	return nil
}

type GetUserReqApplicationListReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	OpUserID    string `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetUserReqApplicationListReq) Reset()                    { *m = GetUserReqApplicationListReq{} }
func (m *GetUserReqApplicationListReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserReqApplicationListReq) ProtoMessage()               {}
func (*GetUserReqApplicationListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetUserReqApplicationListReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserReqApplicationListReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetUserReqApplicationListReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetUserReqApplicationListResp struct {
	CommonResp       *CommonResp                       `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
	GroupRequestList []*server_api_params.GroupRequest `protobuf:"bytes,2,rep,name=GroupRequestList,json=groupRequestList" json:"GroupRequestList,omitempty"`
}

func (m *GetUserReqApplicationListResp) Reset()                    { *m = GetUserReqApplicationListResp{} }
func (m *GetUserReqApplicationListResp) String() string            { return proto.CompactTextString(m) }
func (*GetUserReqApplicationListResp) ProtoMessage()               {}
func (*GetUserReqApplicationListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetUserReqApplicationListResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetUserReqApplicationListResp) GetGroupRequestList() []*server_api_params.GroupRequest {
	if m != nil {
		return m.GroupRequestList
	}
	return nil
}

type TransferGroupOwnerReq struct {
	GroupID        string `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	OldOwnerUserID string `protobuf:"bytes,2,opt,name=OldOwnerUserID,json=oldOwnerUserID" json:"OldOwnerUserID,omitempty"`
	NewOwnerUserID string `protobuf:"bytes,3,opt,name=NewOwnerUserID,json=newOwnerUserID" json:"NewOwnerUserID,omitempty"`
	OperationID    string `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID       string `protobuf:"bytes,5,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *TransferGroupOwnerReq) Reset()                    { *m = TransferGroupOwnerReq{} }
func (m *TransferGroupOwnerReq) String() string            { return proto.CompactTextString(m) }
func (*TransferGroupOwnerReq) ProtoMessage()               {}
func (*TransferGroupOwnerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TransferGroupOwnerReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *TransferGroupOwnerReq) GetOldOwnerUserID() string {
	if m != nil {
		return m.OldOwnerUserID
	}
	return ""
}

func (m *TransferGroupOwnerReq) GetNewOwnerUserID() string {
	if m != nil {
		return m.NewOwnerUserID
	}
	return ""
}

func (m *TransferGroupOwnerReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *TransferGroupOwnerReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type TransferGroupOwnerResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *TransferGroupOwnerResp) Reset()                    { *m = TransferGroupOwnerResp{} }
func (m *TransferGroupOwnerResp) String() string            { return proto.CompactTextString(m) }
func (*TransferGroupOwnerResp) ProtoMessage()               {}
func (*TransferGroupOwnerResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TransferGroupOwnerResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type JoinGroupReq struct {
	GroupID       string `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	ReqMessage    string `protobuf:"bytes,2,opt,name=ReqMessage,json=reqMessage" json:"ReqMessage,omitempty"`
	OpUserID      string `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID   string `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	JoinSource    int32  `protobuf:"varint,5,opt,name=JoinSource,json=joinSource" json:"JoinSource,omitempty"`
	InviterUserID string `protobuf:"bytes,6,opt,name=InviterUserID,json=inviterUserID" json:"InviterUserID,omitempty"`
}

func (m *JoinGroupReq) Reset()                    { *m = JoinGroupReq{} }
func (m *JoinGroupReq) String() string            { return proto.CompactTextString(m) }
func (*JoinGroupReq) ProtoMessage()               {}
func (*JoinGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *JoinGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *JoinGroupReq) GetReqMessage() string {
	if m != nil {
		return m.ReqMessage
	}
	return ""
}

func (m *JoinGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *JoinGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *JoinGroupReq) GetJoinSource() int32 {
	if m != nil {
		return m.JoinSource
	}
	return 0
}

func (m *JoinGroupReq) GetInviterUserID() string {
	if m != nil {
		return m.InviterUserID
	}
	return ""
}

type JoinGroupResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *JoinGroupResp) Reset()                    { *m = JoinGroupResp{} }
func (m *JoinGroupResp) String() string            { return proto.CompactTextString(m) }
func (*JoinGroupResp) ProtoMessage()               {}
func (*JoinGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *JoinGroupResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GroupApplicationResponseReq struct {
	OperationID  string `protobuf:"bytes,1,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID     string `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	GroupID      string `protobuf:"bytes,3,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	FromUserID   string `protobuf:"bytes,4,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
	HandledMsg   string `protobuf:"bytes,5,opt,name=HandledMsg,json=handledMsg" json:"HandledMsg,omitempty"`
	HandleResult int32  `protobuf:"varint,6,opt,name=HandleResult,json=handleResult" json:"HandleResult,omitempty"`
}

func (m *GroupApplicationResponseReq) Reset()                    { *m = GroupApplicationResponseReq{} }
func (m *GroupApplicationResponseReq) String() string            { return proto.CompactTextString(m) }
func (*GroupApplicationResponseReq) ProtoMessage()               {}
func (*GroupApplicationResponseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GroupApplicationResponseReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GroupApplicationResponseReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GroupApplicationResponseReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupApplicationResponseReq) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

func (m *GroupApplicationResponseReq) GetHandledMsg() string {
	if m != nil {
		return m.HandledMsg
	}
	return ""
}

func (m *GroupApplicationResponseReq) GetHandleResult() int32 {
	if m != nil {
		return m.HandleResult
	}
	return 0
}

type GroupApplicationResponseResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *GroupApplicationResponseResp) Reset()                    { *m = GroupApplicationResponseResp{} }
func (m *GroupApplicationResponseResp) String() string            { return proto.CompactTextString(m) }
func (*GroupApplicationResponseResp) ProtoMessage()               {}
func (*GroupApplicationResponseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GroupApplicationResponseResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type QuitGroupReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *QuitGroupReq) Reset()                    { *m = QuitGroupReq{} }
func (m *QuitGroupReq) String() string            { return proto.CompactTextString(m) }
func (*QuitGroupReq) ProtoMessage()               {}
func (*QuitGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *QuitGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *QuitGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *QuitGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type QuitGroupResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *QuitGroupResp) Reset()                    { *m = QuitGroupResp{} }
func (m *QuitGroupResp) String() string            { return proto.CompactTextString(m) }
func (*QuitGroupResp) ProtoMessage()               {}
func (*QuitGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *QuitGroupResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetGroupMemberListReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	OpUserID    string `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	Filter      int32  `protobuf:"varint,4,opt,name=Filter,json=filter" json:"Filter,omitempty"`
	NextSeq     int32  `protobuf:"varint,5,opt,name=NextSeq,json=nextSeq" json:"NextSeq,omitempty"`
}

func (m *GetGroupMemberListReq) Reset()                    { *m = GetGroupMemberListReq{} }
func (m *GetGroupMemberListReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMemberListReq) ProtoMessage()               {}
func (*GetGroupMemberListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetGroupMemberListReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupMemberListReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetGroupMemberListReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetGroupMemberListReq) GetFilter() int32 {
	if m != nil {
		return m.Filter
	}
	return 0
}

func (m *GetGroupMemberListReq) GetNextSeq() int32 {
	if m != nil {
		return m.NextSeq
	}
	return 0
}

type GetGroupMemberListResp struct {
	ErrCode    int32                                    `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg     string                                   `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	MemberList []*server_api_params.GroupMemberFullInfo `protobuf:"bytes,3,rep,name=memberList" json:"memberList,omitempty"`
	NextSeq    int32                                    `protobuf:"varint,4,opt,name=nextSeq" json:"nextSeq,omitempty"`
}

func (m *GetGroupMemberListResp) Reset()                    { *m = GetGroupMemberListResp{} }
func (m *GetGroupMemberListResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMemberListResp) ProtoMessage()               {}
func (*GetGroupMemberListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetGroupMemberListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGroupMemberListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetGroupMemberListResp) GetMemberList() []*server_api_params.GroupMemberFullInfo {
	if m != nil {
		return m.MemberList
	}
	return nil
}

func (m *GetGroupMemberListResp) GetNextSeq() int32 {
	if m != nil {
		return m.NextSeq
	}
	return 0
}

type GetGroupMembersInfoReq struct {
	GroupID     string   `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	MemberList  []string `protobuf:"bytes,2,rep,name=memberList" json:"memberList,omitempty"`
	OpUserID    string   `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string   `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetGroupMembersInfoReq) Reset()                    { *m = GetGroupMembersInfoReq{} }
func (m *GetGroupMembersInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMembersInfoReq) ProtoMessage()               {}
func (*GetGroupMembersInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetGroupMembersInfoReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupMembersInfoReq) GetMemberList() []string {
	if m != nil {
		return m.MemberList
	}
	return nil
}

func (m *GetGroupMembersInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetGroupMembersInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetGroupMembersInfoResp struct {
	ErrCode    int32                                    `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg     string                                   `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	MemberList []*server_api_params.GroupMemberFullInfo `protobuf:"bytes,3,rep,name=memberList" json:"memberList,omitempty"`
}

func (m *GetGroupMembersInfoResp) Reset()                    { *m = GetGroupMembersInfoResp{} }
func (m *GetGroupMembersInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMembersInfoResp) ProtoMessage()               {}
func (*GetGroupMembersInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetGroupMembersInfoResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGroupMembersInfoResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetGroupMembersInfoResp) GetMemberList() []*server_api_params.GroupMemberFullInfo {
	if m != nil {
		return m.MemberList
	}
	return nil
}

type KickGroupMemberReq struct {
	GroupID          string   `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	KickedUserIDList []string `protobuf:"bytes,2,rep,name=KickedUserIDList,json=kickedUserIDList" json:"KickedUserIDList,omitempty"`
	Reason           string   `protobuf:"bytes,3,opt,name=Reason,json=reason" json:"Reason,omitempty"`
	OperationID      string   `protobuf:"bytes,5,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID         string   `protobuf:"bytes,6,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *KickGroupMemberReq) Reset()                    { *m = KickGroupMemberReq{} }
func (m *KickGroupMemberReq) String() string            { return proto.CompactTextString(m) }
func (*KickGroupMemberReq) ProtoMessage()               {}
func (*KickGroupMemberReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *KickGroupMemberReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *KickGroupMemberReq) GetKickedUserIDList() []string {
	if m != nil {
		return m.KickedUserIDList
	}
	return nil
}

func (m *KickGroupMemberReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *KickGroupMemberReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *KickGroupMemberReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type Id2Result struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	Result int32  `protobuf:"varint,2,opt,name=Result,json=result" json:"Result,omitempty"`
}

func (m *Id2Result) Reset()                    { *m = Id2Result{} }
func (m *Id2Result) String() string            { return proto.CompactTextString(m) }
func (*Id2Result) ProtoMessage()               {}
func (*Id2Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Id2Result) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Id2Result) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type KickGroupMemberResp struct {
	ErrCode       int32        `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg        string       `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	Id2ResultList []*Id2Result `protobuf:"bytes,3,rep,name=Id2ResultList,json=id2ResultList" json:"Id2ResultList,omitempty"`
}

func (m *KickGroupMemberResp) Reset()                    { *m = KickGroupMemberResp{} }
func (m *KickGroupMemberResp) String() string            { return proto.CompactTextString(m) }
func (*KickGroupMemberResp) ProtoMessage()               {}
func (*KickGroupMemberResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *KickGroupMemberResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *KickGroupMemberResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *KickGroupMemberResp) GetId2ResultList() []*Id2Result {
	if m != nil {
		return m.Id2ResultList
	}
	return nil
}

type GetJoinedGroupListReq struct {
	FromUserID  string `protobuf:"bytes,1,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *GetJoinedGroupListReq) Reset()                    { *m = GetJoinedGroupListReq{} }
func (m *GetJoinedGroupListReq) String() string            { return proto.CompactTextString(m) }
func (*GetJoinedGroupListReq) ProtoMessage()               {}
func (*GetJoinedGroupListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetJoinedGroupListReq) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

func (m *GetJoinedGroupListReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetJoinedGroupListReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type GetJoinedGroupListResp struct {
	ErrCode   int32                          `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg    string                         `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	GroupList []*server_api_params.GroupInfo `protobuf:"bytes,3,rep,name=GroupList,json=groupList" json:"GroupList,omitempty"`
}

func (m *GetJoinedGroupListResp) Reset()                    { *m = GetJoinedGroupListResp{} }
func (m *GetJoinedGroupListResp) String() string            { return proto.CompactTextString(m) }
func (*GetJoinedGroupListResp) ProtoMessage()               {}
func (*GetJoinedGroupListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetJoinedGroupListResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetJoinedGroupListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetJoinedGroupListResp) GetGroupList() []*server_api_params.GroupInfo {
	if m != nil {
		return m.GroupList
	}
	return nil
}

type InviteUserToGroupReq struct {
	OperationID       string   `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	GroupID           string   `protobuf:"bytes,3,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	Reason            string   `protobuf:"bytes,4,opt,name=Reason,json=reason" json:"Reason,omitempty"`
	InvitedUserIDList []string `protobuf:"bytes,5,rep,name=InvitedUserIDList,json=invitedUserIDList" json:"InvitedUserIDList,omitempty"`
	OpUserID          string   `protobuf:"bytes,6,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *InviteUserToGroupReq) Reset()                    { *m = InviteUserToGroupReq{} }
func (m *InviteUserToGroupReq) String() string            { return proto.CompactTextString(m) }
func (*InviteUserToGroupReq) ProtoMessage()               {}
func (*InviteUserToGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *InviteUserToGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *InviteUserToGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *InviteUserToGroupReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *InviteUserToGroupReq) GetInvitedUserIDList() []string {
	if m != nil {
		return m.InvitedUserIDList
	}
	return nil
}

func (m *InviteUserToGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type InviteUserToGroupResp struct {
	ErrCode       int32        `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg        string       `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	Id2ResultList []*Id2Result `protobuf:"bytes,3,rep,name=Id2ResultList,json=id2ResultList" json:"Id2ResultList,omitempty"`
}

func (m *InviteUserToGroupResp) Reset()                    { *m = InviteUserToGroupResp{} }
func (m *InviteUserToGroupResp) String() string            { return proto.CompactTextString(m) }
func (*InviteUserToGroupResp) ProtoMessage()               {}
func (*InviteUserToGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *InviteUserToGroupResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *InviteUserToGroupResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *InviteUserToGroupResp) GetId2ResultList() []*Id2Result {
	if m != nil {
		return m.Id2ResultList
	}
	return nil
}

type GetGroupAllMemberReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	OpUserID    string `protobuf:"bytes,2,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,3,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	Offset      int32  `protobuf:"varint,4,opt,name=Offset,json=offset" json:"Offset,omitempty"`
	Count       int32  `protobuf:"varint,5,opt,name=Count,json=count" json:"Count,omitempty"`
}

func (m *GetGroupAllMemberReq) Reset()                    { *m = GetGroupAllMemberReq{} }
func (m *GetGroupAllMemberReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupAllMemberReq) ProtoMessage()               {}
func (*GetGroupAllMemberReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetGroupAllMemberReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupAllMemberReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetGroupAllMemberReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetGroupAllMemberReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetGroupAllMemberReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetGroupAllMemberResp struct {
	ErrCode    int32                                    `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	ErrMsg     string                                   `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	MemberList []*server_api_params.GroupMemberFullInfo `protobuf:"bytes,3,rep,name=memberList" json:"memberList,omitempty"`
}

func (m *GetGroupAllMemberResp) Reset()                    { *m = GetGroupAllMemberResp{} }
func (m *GetGroupAllMemberResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupAllMemberResp) ProtoMessage()               {}
func (*GetGroupAllMemberResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetGroupAllMemberResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetGroupAllMemberResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetGroupAllMemberResp) GetMemberList() []*server_api_params.GroupMemberFullInfo {
	if m != nil {
		return m.MemberList
	}
	return nil
}

type CMSGroup struct {
	GroupInfo          *server_api_params.GroupInfo `protobuf:"bytes,1,opt,name=GroupInfo,json=groupInfo" json:"GroupInfo,omitempty"`
	GroupOwnerUserName string                       `protobuf:"bytes,2,opt,name=GroupOwnerUserName,json=groupOwnerUserName" json:"GroupOwnerUserName,omitempty"`
	GroupOwnerUserID   string                       `protobuf:"bytes,3,opt,name=GroupOwnerUserID,json=groupOwnerUserID" json:"GroupOwnerUserID,omitempty"`
}

func (m *CMSGroup) Reset()                    { *m = CMSGroup{} }
func (m *CMSGroup) String() string            { return proto.CompactTextString(m) }
func (*CMSGroup) ProtoMessage()               {}
func (*CMSGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CMSGroup) GetGroupInfo() *server_api_params.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *CMSGroup) GetGroupOwnerUserName() string {
	if m != nil {
		return m.GroupOwnerUserName
	}
	return ""
}

func (m *CMSGroup) GetGroupOwnerUserID() string {
	if m != nil {
		return m.GroupOwnerUserID
	}
	return ""
}

type GetGroupsReq struct {
	Pagination  *server_api_params.RequestPagination `protobuf:"bytes,1,opt,name=Pagination,json=pagination" json:"Pagination,omitempty"`
	GroupName   string                               `protobuf:"bytes,2,opt,name=GroupName,json=groupName" json:"GroupName,omitempty"`
	GroupID     string                               `protobuf:"bytes,3,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	OperationID string                               `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetGroupsReq) Reset()                    { *m = GetGroupsReq{} }
func (m *GetGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsReq) ProtoMessage()               {}
func (*GetGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetGroupsReq) GetPagination() *server_api_params.RequestPagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetGroupsReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GetGroupsReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupsReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetGroupsResp struct {
	CMSGroups  []*CMSGroup                           `protobuf:"bytes,1,rep,name=CMSGroups,json=cMSGroups" json:"CMSGroups,omitempty"`
	Pagination *server_api_params.ResponsePagination `protobuf:"bytes,2,opt,name=Pagination,json=pagination" json:"Pagination,omitempty"`
	GroupNum   int32                                 `protobuf:"varint,3,opt,name=GroupNum,json=groupNum" json:"GroupNum,omitempty"`
	CommonResp *CommonResp                           `protobuf:"bytes,4,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *GetGroupsResp) Reset()                    { *m = GetGroupsResp{} }
func (m *GetGroupsResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsResp) ProtoMessage()               {}
func (*GetGroupsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetGroupsResp) GetCMSGroups() []*CMSGroup {
	if m != nil {
		return m.CMSGroups
	}
	return nil
}

func (m *GetGroupsResp) GetPagination() *server_api_params.ResponsePagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetGroupsResp) GetGroupNum() int32 {
	if m != nil {
		return m.GroupNum
	}
	return 0
}

func (m *GetGroupsResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetGroupMemberReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetGroupMemberReq) Reset()                    { *m = GetGroupMemberReq{} }
func (m *GetGroupMemberReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMemberReq) ProtoMessage()               {}
func (*GetGroupMemberReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetGroupMemberReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupMemberReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetGroupMembersCMSReq struct {
	GroupID     string                               `protobuf:"bytes,1,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	UserName    string                               `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Pagination  *server_api_params.RequestPagination `protobuf:"bytes,3,opt,name=Pagination,json=pagination" json:"Pagination,omitempty"`
	OperationID string                               `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *GetGroupMembersCMSReq) Reset()                    { *m = GetGroupMembersCMSReq{} }
func (m *GetGroupMembersCMSReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMembersCMSReq) ProtoMessage()               {}
func (*GetGroupMembersCMSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetGroupMembersCMSReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupMembersCMSReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *GetGroupMembersCMSReq) GetPagination() *server_api_params.RequestPagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetGroupMembersCMSReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetGroupMembersCMSResp struct {
	Members    []*server_api_params.GroupMemberFullInfo `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	Pagination *server_api_params.ResponsePagination    `protobuf:"bytes,2,opt,name=Pagination,json=pagination" json:"Pagination,omitempty"`
	MemberNums int32                                    `protobuf:"varint,3,opt,name=MemberNums,json=memberNums" json:"MemberNums,omitempty"`
	CommonResp *CommonResp                              `protobuf:"bytes,4,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *GetGroupMembersCMSResp) Reset()                    { *m = GetGroupMembersCMSResp{} }
func (m *GetGroupMembersCMSResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupMembersCMSResp) ProtoMessage()               {}
func (*GetGroupMembersCMSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GetGroupMembersCMSResp) GetMembers() []*server_api_params.GroupMemberFullInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GetGroupMembersCMSResp) GetPagination() *server_api_params.ResponsePagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetGroupMembersCMSResp) GetMemberNums() int32 {
	if m != nil {
		return m.MemberNums
	}
	return 0
}

func (m *GetGroupMembersCMSResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type DismissGroupReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	GroupID     string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *DismissGroupReq) Reset()                    { *m = DismissGroupReq{} }
func (m *DismissGroupReq) String() string            { return proto.CompactTextString(m) }
func (*DismissGroupReq) ProtoMessage()               {}
func (*DismissGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DismissGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *DismissGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *DismissGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type DismissGroupResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *DismissGroupResp) Reset()                    { *m = DismissGroupResp{} }
func (m *DismissGroupResp) String() string            { return proto.CompactTextString(m) }
func (*DismissGroupResp) ProtoMessage()               {}
func (*DismissGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DismissGroupResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type MuteGroupMemberReq struct {
	OpUserID     string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID  string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	GroupID      string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
	UserID       string `protobuf:"bytes,4,opt,name=userID" json:"userID,omitempty"`
	MutedSeconds uint32 `protobuf:"varint,5,opt,name=mutedSeconds" json:"mutedSeconds,omitempty"`
}

func (m *MuteGroupMemberReq) Reset()                    { *m = MuteGroupMemberReq{} }
func (m *MuteGroupMemberReq) String() string            { return proto.CompactTextString(m) }
func (*MuteGroupMemberReq) ProtoMessage()               {}
func (*MuteGroupMemberReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *MuteGroupMemberReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *MuteGroupMemberReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *MuteGroupMemberReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *MuteGroupMemberReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *MuteGroupMemberReq) GetMutedSeconds() uint32 {
	if m != nil {
		return m.MutedSeconds
	}
	return 0
}

type MuteGroupMemberResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *MuteGroupMemberResp) Reset()                    { *m = MuteGroupMemberResp{} }
func (m *MuteGroupMemberResp) String() string            { return proto.CompactTextString(m) }
func (*MuteGroupMemberResp) ProtoMessage()               {}
func (*MuteGroupMemberResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *MuteGroupMemberResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type CancelMuteGroupMemberReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	GroupID     string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=userID" json:"userID,omitempty"`
}

func (m *CancelMuteGroupMemberReq) Reset()                    { *m = CancelMuteGroupMemberReq{} }
func (m *CancelMuteGroupMemberReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMuteGroupMemberReq) ProtoMessage()               {}
func (*CancelMuteGroupMemberReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CancelMuteGroupMemberReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *CancelMuteGroupMemberReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *CancelMuteGroupMemberReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *CancelMuteGroupMemberReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type CancelMuteGroupMemberResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *CancelMuteGroupMemberResp) Reset()                    { *m = CancelMuteGroupMemberResp{} }
func (m *CancelMuteGroupMemberResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMuteGroupMemberResp) ProtoMessage()               {}
func (*CancelMuteGroupMemberResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CancelMuteGroupMemberResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type MuteGroupReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	GroupID     string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *MuteGroupReq) Reset()                    { *m = MuteGroupReq{} }
func (m *MuteGroupReq) String() string            { return proto.CompactTextString(m) }
func (*MuteGroupReq) ProtoMessage()               {}
func (*MuteGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *MuteGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *MuteGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *MuteGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type MuteGroupResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *MuteGroupResp) Reset()                    { *m = MuteGroupResp{} }
func (m *MuteGroupResp) String() string            { return proto.CompactTextString(m) }
func (*MuteGroupResp) ProtoMessage()               {}
func (*MuteGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *MuteGroupResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type CancelMuteGroupReq struct {
	OpUserID    string `protobuf:"bytes,1,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	GroupID     string `protobuf:"bytes,3,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *CancelMuteGroupReq) Reset()                    { *m = CancelMuteGroupReq{} }
func (m *CancelMuteGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMuteGroupReq) ProtoMessage()               {}
func (*CancelMuteGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CancelMuteGroupReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *CancelMuteGroupReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *CancelMuteGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type CancelMuteGroupResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
}

func (m *CancelMuteGroupResp) Reset()                    { *m = CancelMuteGroupResp{} }
func (m *CancelMuteGroupResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMuteGroupResp) ProtoMessage()               {}
func (*CancelMuteGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CancelMuteGroupResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type SetGroupMemberNicknameReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=groupID" json:"groupID,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=operationID" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,5,opt,name=userID" json:"userID,omitempty"`
}

func (m *SetGroupMemberNicknameReq) Reset()                    { *m = SetGroupMemberNicknameReq{} }
func (m *SetGroupMemberNicknameReq) String() string            { return proto.CompactTextString(m) }
func (*SetGroupMemberNicknameReq) ProtoMessage()               {}
func (*SetGroupMemberNicknameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *SetGroupMemberNicknameReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *SetGroupMemberNicknameReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SetGroupMemberNicknameReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *SetGroupMemberNicknameReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *SetGroupMemberNicknameReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type SetGroupMemberNicknameResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *SetGroupMemberNicknameResp) Reset()                    { *m = SetGroupMemberNicknameResp{} }
func (m *SetGroupMemberNicknameResp) String() string            { return proto.CompactTextString(m) }
func (*SetGroupMemberNicknameResp) ProtoMessage()               {}
func (*SetGroupMemberNicknameResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SetGroupMemberNicknameResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetJoinedSuperGroupListReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=opUserID" json:"opUserID,omitempty"`
}

func (m *GetJoinedSuperGroupListReq) Reset()                    { *m = GetJoinedSuperGroupListReq{} }
func (m *GetJoinedSuperGroupListReq) String() string            { return proto.CompactTextString(m) }
func (*GetJoinedSuperGroupListReq) ProtoMessage()               {}
func (*GetJoinedSuperGroupListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *GetJoinedSuperGroupListReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetJoinedSuperGroupListReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetJoinedSuperGroupListReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type GetJoinedSuperGroupListResp struct {
	CommonResp *CommonResp                    `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	GroupList  []*server_api_params.GroupInfo `protobuf:"bytes,3,rep,name=GroupList,json=groupList" json:"GroupList,omitempty"`
}

func (m *GetJoinedSuperGroupListResp) Reset()                    { *m = GetJoinedSuperGroupListResp{} }
func (m *GetJoinedSuperGroupListResp) String() string            { return proto.CompactTextString(m) }
func (*GetJoinedSuperGroupListResp) ProtoMessage()               {}
func (*GetJoinedSuperGroupListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *GetJoinedSuperGroupListResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetJoinedSuperGroupListResp) GetGroupList() []*server_api_params.GroupInfo {
	if m != nil {
		return m.GroupList
	}
	return nil
}

type GetSuperGroupsInfoReq struct {
	GroupIDList []string `protobuf:"bytes,1,rep,name=GroupIDList,json=groupIDList" json:"GroupIDList,omitempty"`
	OperationID string   `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	OpUserID    string   `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
}

func (m *GetSuperGroupsInfoReq) Reset()                    { *m = GetSuperGroupsInfoReq{} }
func (m *GetSuperGroupsInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetSuperGroupsInfoReq) ProtoMessage()               {}
func (*GetSuperGroupsInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *GetSuperGroupsInfoReq) GetGroupIDList() []string {
	if m != nil {
		return m.GroupIDList
	}
	return nil
}

func (m *GetSuperGroupsInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetSuperGroupsInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type GetSuperGroupsInfoResp struct {
	CommonResp    *CommonResp                    `protobuf:"bytes,1,opt,name=commonResp" json:"commonResp,omitempty"`
	GroupInfoList []*server_api_params.GroupInfo `protobuf:"bytes,3,rep,name=GroupInfoList,json=groupInfoList" json:"GroupInfoList,omitempty"`
}

func (m *GetSuperGroupsInfoResp) Reset()                    { *m = GetSuperGroupsInfoResp{} }
func (m *GetSuperGroupsInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetSuperGroupsInfoResp) ProtoMessage()               {}
func (*GetSuperGroupsInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *GetSuperGroupsInfoResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetSuperGroupsInfoResp) GetGroupInfoList() []*server_api_params.GroupInfo {
	if m != nil {
		return m.GroupInfoList
	}
	return nil
}

type SetGroupMemberInfoReq struct {
	GroupID     string                       `protobuf:"bytes,1,opt,name=groupID" json:"groupID,omitempty"`
	UserID      string                       `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	OpUserID    string                       `protobuf:"bytes,3,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string                       `protobuf:"bytes,4,opt,name=operationID" json:"operationID,omitempty"`
	Nickname    *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=nickname" json:"nickname,omitempty"`
	FaceURL     *google_protobuf.StringValue `protobuf:"bytes,6,opt,name=faceURL" json:"faceURL,omitempty"`
	RoleLevel   *google_protobuf.Int32Value  `protobuf:"bytes,7,opt,name=roleLevel" json:"roleLevel,omitempty"`
	Ex          *google_protobuf.StringValue `protobuf:"bytes,8,opt,name=ex" json:"ex,omitempty"`
}

func (m *SetGroupMemberInfoReq) Reset()                    { *m = SetGroupMemberInfoReq{} }
func (m *SetGroupMemberInfoReq) String() string            { return proto.CompactTextString(m) }
func (*SetGroupMemberInfoReq) ProtoMessage()               {}
func (*SetGroupMemberInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *SetGroupMemberInfoReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *SetGroupMemberInfoReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SetGroupMemberInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *SetGroupMemberInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *SetGroupMemberInfoReq) GetNickname() *google_protobuf.StringValue {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *SetGroupMemberInfoReq) GetFaceURL() *google_protobuf.StringValue {
	if m != nil {
		return m.FaceURL
	}
	return nil
}

func (m *SetGroupMemberInfoReq) GetRoleLevel() *google_protobuf.Int32Value {
	if m != nil {
		return m.RoleLevel
	}
	return nil
}

func (m *SetGroupMemberInfoReq) GetEx() *google_protobuf.StringValue {
	if m != nil {
		return m.Ex
	}
	return nil
}

type SetGroupMemberInfoResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *SetGroupMemberInfoResp) Reset()                    { *m = SetGroupMemberInfoResp{} }
func (m *SetGroupMemberInfoResp) String() string            { return proto.CompactTextString(m) }
func (*SetGroupMemberInfoResp) ProtoMessage()               {}
func (*SetGroupMemberInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *SetGroupMemberInfoResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type GetGroupAbstractInfoReq struct {
	GroupID     string `protobuf:"bytes,1,opt,name=groupID" json:"groupID,omitempty"`
	OpUserID    string `protobuf:"bytes,2,opt,name=opUserID" json:"opUserID,omitempty"`
	OperationID string `protobuf:"bytes,3,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *GetGroupAbstractInfoReq) Reset()                    { *m = GetGroupAbstractInfoReq{} }
func (m *GetGroupAbstractInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupAbstractInfoReq) ProtoMessage()               {}
func (*GetGroupAbstractInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *GetGroupAbstractInfoReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GetGroupAbstractInfoReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *GetGroupAbstractInfoReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type GetGroupAbstractInfoResp struct {
	CommonResp          *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
	GroupMemberNumber   int32       `protobuf:"varint,2,opt,name=groupMemberNumber" json:"groupMemberNumber,omitempty"`
	GroupMemberListHash uint64      `protobuf:"varint,3,opt,name=groupMemberListHash" json:"groupMemberListHash,omitempty"`
}

func (m *GetGroupAbstractInfoResp) Reset()                    { *m = GetGroupAbstractInfoResp{} }
func (m *GetGroupAbstractInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetGroupAbstractInfoResp) ProtoMessage()               {}
func (*GetGroupAbstractInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *GetGroupAbstractInfoResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetGroupAbstractInfoResp) GetGroupMemberNumber() int32 {
	if m != nil {
		return m.GroupMemberNumber
	}
	return 0
}

func (m *GetGroupAbstractInfoResp) GetGroupMemberListHash() uint64 {
	if m != nil {
		return m.GroupMemberListHash
	}
	return 0
}

func init() {
	proto.RegisterType((*CommonResp)(nil), "group.CommonResp")
	proto.RegisterType((*GroupAddMemberInfo)(nil), "group.GroupAddMemberInfo")
	proto.RegisterType((*CreateGroupReq)(nil), "group.CreateGroupReq")
	proto.RegisterType((*CreateGroupResp)(nil), "group.CreateGroupResp")
	proto.RegisterType((*GetGroupsInfoReq)(nil), "group.GetGroupsInfoReq")
	proto.RegisterType((*GetGroupsInfoResp)(nil), "group.GetGroupsInfoResp")
	proto.RegisterType((*SetGroupInfoReq)(nil), "group.SetGroupInfoReq")
	proto.RegisterType((*SetGroupInfoResp)(nil), "group.SetGroupInfoResp")
	proto.RegisterType((*GetGroupApplicationListReq)(nil), "group.GetGroupApplicationListReq")
	proto.RegisterType((*GetGroupApplicationListResp)(nil), "group.GetGroupApplicationListResp")
	proto.RegisterType((*GetUserReqApplicationListReq)(nil), "group.GetUserReqApplicationListReq")
	proto.RegisterType((*GetUserReqApplicationListResp)(nil), "group.GetUserReqApplicationListResp")
	proto.RegisterType((*TransferGroupOwnerReq)(nil), "group.TransferGroupOwnerReq")
	proto.RegisterType((*TransferGroupOwnerResp)(nil), "group.TransferGroupOwnerResp")
	proto.RegisterType((*JoinGroupReq)(nil), "group.JoinGroupReq")
	proto.RegisterType((*JoinGroupResp)(nil), "group.JoinGroupResp")
	proto.RegisterType((*GroupApplicationResponseReq)(nil), "group.GroupApplicationResponseReq")
	proto.RegisterType((*GroupApplicationResponseResp)(nil), "group.GroupApplicationResponseResp")
	proto.RegisterType((*QuitGroupReq)(nil), "group.QuitGroupReq")
	proto.RegisterType((*QuitGroupResp)(nil), "group.QuitGroupResp")
	proto.RegisterType((*GetGroupMemberListReq)(nil), "group.GetGroupMemberListReq")
	proto.RegisterType((*GetGroupMemberListResp)(nil), "group.GetGroupMemberListResp")
	proto.RegisterType((*GetGroupMembersInfoReq)(nil), "group.GetGroupMembersInfoReq")
	proto.RegisterType((*GetGroupMembersInfoResp)(nil), "group.GetGroupMembersInfoResp")
	proto.RegisterType((*KickGroupMemberReq)(nil), "group.KickGroupMemberReq")
	proto.RegisterType((*Id2Result)(nil), "group.Id2Result")
	proto.RegisterType((*KickGroupMemberResp)(nil), "group.KickGroupMemberResp")
	proto.RegisterType((*GetJoinedGroupListReq)(nil), "group.GetJoinedGroupListReq")
	proto.RegisterType((*GetJoinedGroupListResp)(nil), "group.GetJoinedGroupListResp")
	proto.RegisterType((*InviteUserToGroupReq)(nil), "group.InviteUserToGroupReq")
	proto.RegisterType((*InviteUserToGroupResp)(nil), "group.InviteUserToGroupResp")
	proto.RegisterType((*GetGroupAllMemberReq)(nil), "group.GetGroupAllMemberReq")
	proto.RegisterType((*GetGroupAllMemberResp)(nil), "group.GetGroupAllMemberResp")
	proto.RegisterType((*CMSGroup)(nil), "group.CMSGroup")
	proto.RegisterType((*GetGroupsReq)(nil), "group.GetGroupsReq")
	proto.RegisterType((*GetGroupsResp)(nil), "group.GetGroupsResp")
	proto.RegisterType((*GetGroupMemberReq)(nil), "group.GetGroupMemberReq")
	proto.RegisterType((*GetGroupMembersCMSReq)(nil), "group.GetGroupMembersCMSReq")
	proto.RegisterType((*GetGroupMembersCMSResp)(nil), "group.GetGroupMembersCMSResp")
	proto.RegisterType((*DismissGroupReq)(nil), "group.DismissGroupReq")
	proto.RegisterType((*DismissGroupResp)(nil), "group.DismissGroupResp")
	proto.RegisterType((*MuteGroupMemberReq)(nil), "group.MuteGroupMemberReq")
	proto.RegisterType((*MuteGroupMemberResp)(nil), "group.MuteGroupMemberResp")
	proto.RegisterType((*CancelMuteGroupMemberReq)(nil), "group.CancelMuteGroupMemberReq")
	proto.RegisterType((*CancelMuteGroupMemberResp)(nil), "group.CancelMuteGroupMemberResp")
	proto.RegisterType((*MuteGroupReq)(nil), "group.MuteGroupReq")
	proto.RegisterType((*MuteGroupResp)(nil), "group.MuteGroupResp")
	proto.RegisterType((*CancelMuteGroupReq)(nil), "group.CancelMuteGroupReq")
	proto.RegisterType((*CancelMuteGroupResp)(nil), "group.CancelMuteGroupResp")
	proto.RegisterType((*SetGroupMemberNicknameReq)(nil), "group.SetGroupMemberNicknameReq")
	proto.RegisterType((*SetGroupMemberNicknameResp)(nil), "group.SetGroupMemberNicknameResp")
	proto.RegisterType((*GetJoinedSuperGroupListReq)(nil), "group.GetJoinedSuperGroupListReq")
	proto.RegisterType((*GetJoinedSuperGroupListResp)(nil), "group.GetJoinedSuperGroupListResp")
	proto.RegisterType((*GetSuperGroupsInfoReq)(nil), "group.GetSuperGroupsInfoReq")
	proto.RegisterType((*GetSuperGroupsInfoResp)(nil), "group.GetSuperGroupsInfoResp")
	proto.RegisterType((*SetGroupMemberInfoReq)(nil), "group.SetGroupMemberInfoReq")
	proto.RegisterType((*SetGroupMemberInfoResp)(nil), "group.SetGroupMemberInfoResp")
	proto.RegisterType((*GetGroupAbstractInfoReq)(nil), "group.GetGroupAbstractInfoReq")
	proto.RegisterType((*GetGroupAbstractInfoResp)(nil), "group.GetGroupAbstractInfoResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Group service

type GroupClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
	QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error)
	GetGroupsInfo(ctx context.Context, in *GetGroupsInfoReq, opts ...grpc.CallOption) (*GetGroupsInfoResp, error)
	SetGroupInfo(ctx context.Context, in *SetGroupInfoReq, opts ...grpc.CallOption) (*SetGroupInfoResp, error)
	GetGroupApplicationList(ctx context.Context, in *GetGroupApplicationListReq, opts ...grpc.CallOption) (*GetGroupApplicationListResp, error)
	GetUserReqApplicationList(ctx context.Context, in *GetUserReqApplicationListReq, opts ...grpc.CallOption) (*GetUserReqApplicationListResp, error)
	TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error)
	GroupApplicationResponse(ctx context.Context, in *GroupApplicationResponseReq, opts ...grpc.CallOption) (*GroupApplicationResponseResp, error)
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error)
	GetGroupMembersInfo(ctx context.Context, in *GetGroupMembersInfoReq, opts ...grpc.CallOption) (*GetGroupMembersInfoResp, error)
	KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error)
	GetJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListResp, error)
	InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*InviteUserToGroupResp, error)
	GetGroupAllMember(ctx context.Context, in *GetGroupAllMemberReq, opts ...grpc.CallOption) (*GetGroupAllMemberResp, error)
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error)
	GetGroupMembersCMS(ctx context.Context, in *GetGroupMembersCMSReq, opts ...grpc.CallOption) (*GetGroupMembersCMSResp, error)
	DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*DismissGroupResp, error)
	MuteGroupMember(ctx context.Context, in *MuteGroupMemberReq, opts ...grpc.CallOption) (*MuteGroupMemberResp, error)
	CancelMuteGroupMember(ctx context.Context, in *CancelMuteGroupMemberReq, opts ...grpc.CallOption) (*CancelMuteGroupMemberResp, error)
	MuteGroup(ctx context.Context, in *MuteGroupReq, opts ...grpc.CallOption) (*MuteGroupResp, error)
	CancelMuteGroup(ctx context.Context, in *CancelMuteGroupReq, opts ...grpc.CallOption) (*CancelMuteGroupResp, error)
	SetGroupMemberNickname(ctx context.Context, in *SetGroupMemberNicknameReq, opts ...grpc.CallOption) (*SetGroupMemberNicknameResp, error)
	GetJoinedSuperGroupList(ctx context.Context, in *GetJoinedSuperGroupListReq, opts ...grpc.CallOption) (*GetJoinedSuperGroupListResp, error)
	GetSuperGroupsInfo(ctx context.Context, in *GetSuperGroupsInfoReq, opts ...grpc.CallOption) (*GetSuperGroupsInfoResp, error)
	SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*SetGroupMemberInfoResp, error)
	GetGroupAbstractInfo(ctx context.Context, in *GetGroupAbstractInfoReq, opts ...grpc.CallOption) (*GetGroupAbstractInfoResp, error)
}

type groupClient struct {
	cc *grpc.ClientConn
}

func NewGroupClient(cc *grpc.ClientConn) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := grpc.Invoke(ctx, "/group.group/createGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	out := new(JoinGroupResp)
	err := grpc.Invoke(ctx, "/group.group/joinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error) {
	out := new(QuitGroupResp)
	err := grpc.Invoke(ctx, "/group.group/quitGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupsInfo(ctx context.Context, in *GetGroupsInfoReq, opts ...grpc.CallOption) (*GetGroupsInfoResp, error) {
	out := new(GetGroupsInfoResp)
	err := grpc.Invoke(ctx, "/group.group/getGroupsInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupInfo(ctx context.Context, in *SetGroupInfoReq, opts ...grpc.CallOption) (*SetGroupInfoResp, error) {
	out := new(SetGroupInfoResp)
	err := grpc.Invoke(ctx, "/group.group/setGroupInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupApplicationList(ctx context.Context, in *GetGroupApplicationListReq, opts ...grpc.CallOption) (*GetGroupApplicationListResp, error) {
	out := new(GetGroupApplicationListResp)
	err := grpc.Invoke(ctx, "/group.group/getGroupApplicationList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUserReqApplicationList(ctx context.Context, in *GetUserReqApplicationListReq, opts ...grpc.CallOption) (*GetUserReqApplicationListResp, error) {
	out := new(GetUserReqApplicationListResp)
	err := grpc.Invoke(ctx, "/group.group/getUserReqApplicationList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error) {
	out := new(TransferGroupOwnerResp)
	err := grpc.Invoke(ctx, "/group.group/transferGroupOwner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupApplicationResponse(ctx context.Context, in *GroupApplicationResponseReq, opts ...grpc.CallOption) (*GroupApplicationResponseResp, error) {
	out := new(GroupApplicationResponseResp)
	err := grpc.Invoke(ctx, "/group.group/groupApplicationResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error) {
	out := new(GetGroupMemberListResp)
	err := grpc.Invoke(ctx, "/group.group/getGroupMemberList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembersInfo(ctx context.Context, in *GetGroupMembersInfoReq, opts ...grpc.CallOption) (*GetGroupMembersInfoResp, error) {
	out := new(GetGroupMembersInfoResp)
	err := grpc.Invoke(ctx, "/group.group/getGroupMembersInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error) {
	out := new(KickGroupMemberResp)
	err := grpc.Invoke(ctx, "/group.group/kickGroupMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListResp, error) {
	out := new(GetJoinedGroupListResp)
	err := grpc.Invoke(ctx, "/group.group/getJoinedGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*InviteUserToGroupResp, error) {
	out := new(InviteUserToGroupResp)
	err := grpc.Invoke(ctx, "/group.group/inviteUserToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupAllMember(ctx context.Context, in *GetGroupAllMemberReq, opts ...grpc.CallOption) (*GetGroupAllMemberResp, error) {
	out := new(GetGroupAllMemberResp)
	err := grpc.Invoke(ctx, "/group.group/getGroupAllMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error) {
	out := new(GetGroupsResp)
	err := grpc.Invoke(ctx, "/group.group/GetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembersCMS(ctx context.Context, in *GetGroupMembersCMSReq, opts ...grpc.CallOption) (*GetGroupMembersCMSResp, error) {
	out := new(GetGroupMembersCMSResp)
	err := grpc.Invoke(ctx, "/group.group/GetGroupMembersCMS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*DismissGroupResp, error) {
	out := new(DismissGroupResp)
	err := grpc.Invoke(ctx, "/group.group/DismissGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteGroupMember(ctx context.Context, in *MuteGroupMemberReq, opts ...grpc.CallOption) (*MuteGroupMemberResp, error) {
	out := new(MuteGroupMemberResp)
	err := grpc.Invoke(ctx, "/group.group/MuteGroupMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelMuteGroupMember(ctx context.Context, in *CancelMuteGroupMemberReq, opts ...grpc.CallOption) (*CancelMuteGroupMemberResp, error) {
	out := new(CancelMuteGroupMemberResp)
	err := grpc.Invoke(ctx, "/group.group/CancelMuteGroupMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteGroup(ctx context.Context, in *MuteGroupReq, opts ...grpc.CallOption) (*MuteGroupResp, error) {
	out := new(MuteGroupResp)
	err := grpc.Invoke(ctx, "/group.group/MuteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelMuteGroup(ctx context.Context, in *CancelMuteGroupReq, opts ...grpc.CallOption) (*CancelMuteGroupResp, error) {
	out := new(CancelMuteGroupResp)
	err := grpc.Invoke(ctx, "/group.group/CancelMuteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupMemberNickname(ctx context.Context, in *SetGroupMemberNicknameReq, opts ...grpc.CallOption) (*SetGroupMemberNicknameResp, error) {
	out := new(SetGroupMemberNicknameResp)
	err := grpc.Invoke(ctx, "/group.group/SetGroupMemberNickname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedSuperGroupList(ctx context.Context, in *GetJoinedSuperGroupListReq, opts ...grpc.CallOption) (*GetJoinedSuperGroupListResp, error) {
	out := new(GetJoinedSuperGroupListResp)
	err := grpc.Invoke(ctx, "/group.group/GetJoinedSuperGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetSuperGroupsInfo(ctx context.Context, in *GetSuperGroupsInfoReq, opts ...grpc.CallOption) (*GetSuperGroupsInfoResp, error) {
	out := new(GetSuperGroupsInfoResp)
	err := grpc.Invoke(ctx, "/group.group/GetSuperGroupsInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*SetGroupMemberInfoResp, error) {
	out := new(SetGroupMemberInfoResp)
	err := grpc.Invoke(ctx, "/group.group/SetGroupMemberInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupAbstractInfo(ctx context.Context, in *GetGroupAbstractInfoReq, opts ...grpc.CallOption) (*GetGroupAbstractInfoResp, error) {
	out := new(GetGroupAbstractInfoResp)
	err := grpc.Invoke(ctx, "/group.group/GetGroupAbstractInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Group service

type GroupServer interface {
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error)
	QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error)
	GetGroupsInfo(context.Context, *GetGroupsInfoReq) (*GetGroupsInfoResp, error)
	SetGroupInfo(context.Context, *SetGroupInfoReq) (*SetGroupInfoResp, error)
	GetGroupApplicationList(context.Context, *GetGroupApplicationListReq) (*GetGroupApplicationListResp, error)
	GetUserReqApplicationList(context.Context, *GetUserReqApplicationListReq) (*GetUserReqApplicationListResp, error)
	TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error)
	GroupApplicationResponse(context.Context, *GroupApplicationResponseReq) (*GroupApplicationResponseResp, error)
	GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error)
	GetGroupMembersInfo(context.Context, *GetGroupMembersInfoReq) (*GetGroupMembersInfoResp, error)
	KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error)
	GetJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListResp, error)
	InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*InviteUserToGroupResp, error)
	GetGroupAllMember(context.Context, *GetGroupAllMemberReq) (*GetGroupAllMemberResp, error)
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error)
	GetGroupMembersCMS(context.Context, *GetGroupMembersCMSReq) (*GetGroupMembersCMSResp, error)
	DismissGroup(context.Context, *DismissGroupReq) (*DismissGroupResp, error)
	MuteGroupMember(context.Context, *MuteGroupMemberReq) (*MuteGroupMemberResp, error)
	CancelMuteGroupMember(context.Context, *CancelMuteGroupMemberReq) (*CancelMuteGroupMemberResp, error)
	MuteGroup(context.Context, *MuteGroupReq) (*MuteGroupResp, error)
	CancelMuteGroup(context.Context, *CancelMuteGroupReq) (*CancelMuteGroupResp, error)
	SetGroupMemberNickname(context.Context, *SetGroupMemberNicknameReq) (*SetGroupMemberNicknameResp, error)
	GetJoinedSuperGroupList(context.Context, *GetJoinedSuperGroupListReq) (*GetJoinedSuperGroupListResp, error)
	GetSuperGroupsInfo(context.Context, *GetSuperGroupsInfoReq) (*GetSuperGroupsInfoResp, error)
	SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*SetGroupMemberInfoResp, error)
	GetGroupAbstractInfo(context.Context, *GetGroupAbstractInfoReq) (*GetGroupAbstractInfoResp, error)
}

func RegisterGroupServer(s *grpc.Server, srv GroupServer) {
	s.RegisterService(&_Group_serviceDesc, srv)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/QuitGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QuitGroup(ctx, req.(*QuitGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupsInfo(ctx, req.(*GetGroupsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/SetGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupInfo(ctx, req.(*SetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupApplicationList(ctx, req.(*GetGroupApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUserReqApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReqApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUserReqApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetUserReqApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUserReqApplicationList(ctx, req.(*GetUserReqApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_TransferGroupOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).TransferGroupOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/TransferGroupOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).TransferGroupOwner(ctx, req.(*TransferGroupOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupApplicationResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GroupApplicationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupApplicationResponse(ctx, req.(*GroupApplicationResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupMembersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembersInfo(ctx, req.(*GetGroupMembersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_KickGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).KickGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/KickGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).KickGroupMember(ctx, req.(*KickGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetJoinedGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedGroupList(ctx, req.(*GetJoinedGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/InviteUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteUserToGroup(ctx, req.(*InviteUserToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupAllMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAllMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupAllMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupAllMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupAllMember(ctx, req.(*GetGroupAllMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembersCMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersCMSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembersCMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupMembersCMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembersCMS(ctx, req.(*GetGroupMembersCMSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DismissGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DismissGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/DismissGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DismissGroup(ctx, req.(*DismissGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/MuteGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteGroupMember(ctx, req.(*MuteGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelMuteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelMuteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CancelMuteGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelMuteGroupMember(ctx, req.(*CancelMuteGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/MuteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteGroup(ctx, req.(*MuteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelMuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelMuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CancelMuteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelMuteGroup(ctx, req.(*CancelMuteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupMemberNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMemberNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupMemberNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/SetGroupMemberNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupMemberNickname(ctx, req.(*SetGroupMemberNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedSuperGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedSuperGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedSuperGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetJoinedSuperGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedSuperGroupList(ctx, req.(*GetJoinedSuperGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetSuperGroupsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperGroupsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetSuperGroupsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetSuperGroupsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetSuperGroupsInfo(ctx, req.(*GetSuperGroupsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/SetGroupMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, req.(*SetGroupMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupAbstractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAbstractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupAbstractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupAbstractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupAbstractInfo(ctx, req.(*GetGroupAbstractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Group_serviceDesc = grpc.ServiceDesc{
	ServiceName: "group.group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "joinGroup",
			Handler:    _Group_JoinGroup_Handler,
		},
		{
			MethodName: "quitGroup",
			Handler:    _Group_QuitGroup_Handler,
		},
		{
			MethodName: "getGroupsInfo",
			Handler:    _Group_GetGroupsInfo_Handler,
		},
		{
			MethodName: "setGroupInfo",
			Handler:    _Group_SetGroupInfo_Handler,
		},
		{
			MethodName: "getGroupApplicationList",
			Handler:    _Group_GetGroupApplicationList_Handler,
		},
		{
			MethodName: "getUserReqApplicationList",
			Handler:    _Group_GetUserReqApplicationList_Handler,
		},
		{
			MethodName: "transferGroupOwner",
			Handler:    _Group_TransferGroupOwner_Handler,
		},
		{
			MethodName: "groupApplicationResponse",
			Handler:    _Group_GroupApplicationResponse_Handler,
		},
		{
			MethodName: "getGroupMemberList",
			Handler:    _Group_GetGroupMemberList_Handler,
		},
		{
			MethodName: "getGroupMembersInfo",
			Handler:    _Group_GetGroupMembersInfo_Handler,
		},
		{
			MethodName: "kickGroupMember",
			Handler:    _Group_KickGroupMember_Handler,
		},
		{
			MethodName: "getJoinedGroupList",
			Handler:    _Group_GetJoinedGroupList_Handler,
		},
		{
			MethodName: "inviteUserToGroup",
			Handler:    _Group_InviteUserToGroup_Handler,
		},
		{
			MethodName: "getGroupAllMember",
			Handler:    _Group_GetGroupAllMember_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Group_GetGroups_Handler,
		},
		{
			MethodName: "GetGroupMembersCMS",
			Handler:    _Group_GetGroupMembersCMS_Handler,
		},
		{
			MethodName: "DismissGroup",
			Handler:    _Group_DismissGroup_Handler,
		},
		{
			MethodName: "MuteGroupMember",
			Handler:    _Group_MuteGroupMember_Handler,
		},
		{
			MethodName: "CancelMuteGroupMember",
			Handler:    _Group_CancelMuteGroupMember_Handler,
		},
		{
			MethodName: "MuteGroup",
			Handler:    _Group_MuteGroup_Handler,
		},
		{
			MethodName: "CancelMuteGroup",
			Handler:    _Group_CancelMuteGroup_Handler,
		},
		{
			MethodName: "SetGroupMemberNickname",
			Handler:    _Group_SetGroupMemberNickname_Handler,
		},
		{
			MethodName: "GetJoinedSuperGroupList",
			Handler:    _Group_GetJoinedSuperGroupList_Handler,
		},
		{
			MethodName: "GetSuperGroupsInfo",
			Handler:    _Group_GetSuperGroupsInfo_Handler,
		},
		{
			MethodName: "SetGroupMemberInfo",
			Handler:    _Group_SetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetGroupAbstractInfo",
			Handler:    _Group_GetGroupAbstractInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group/group.proto",
}

func init() { proto.RegisterFile("group/group.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x4f, 0x6f, 0x1c, 0x49,
	0x15, 0x57, 0x8f, 0x3d, 0x63, 0xcf, 0xf3, 0x8c, 0x3d, 0x2e, 0xc7, 0xce, 0xa4, 0xe3, 0x38, 0xde,
	0xde, 0xb0, 0x8a, 0x50, 0x62, 0x83, 0x57, 0x8a, 0x80, 0x45, 0x2c, 0xf1, 0xbf, 0x78, 0x36, 0xb1,
	0x8d, 0x7b, 0xb2, 0x20, 0xad, 0x84, 0x42, 0x7b, 0xa6, 0xa6, 0xd3, 0xeb, 0x99, 0xee, 0x76, 0x57,
	0x77, 0x1c, 0x71, 0x59, 0x71, 0x41, 0x02, 0x21, 0x01, 0xe2, 0xba, 0x08, 0xc1, 0x05, 0x0e, 0x80,
	0x38, 0xc0, 0x99, 0x2f, 0xc0, 0x11, 0x21, 0x71, 0xe5, 0x0b, 0x70, 0xe1, 0x03, 0xa0, 0xae, 0xaa,
	0xae, 0xa9, 0xfe, 0x3b, 0x4e, 0x7b, 0x93, 0x5c, 0x2c, 0x77, 0xd5, 0xab, 0xaa, 0xf7, 0x5e, 0xbd,
	0xf7, 0xab, 0xf7, 0x67, 0x60, 0xd1, 0xf4, 0x9c, 0xc0, 0xdd, 0xa4, 0x7f, 0x37, 0x5c, 0xcf, 0xf1,
	0x1d, 0x54, 0xa5, 0x1f, 0xea, 0xdd, 0x63, 0x17, 0xdb, 0xf7, 0x3b, 0x87, 0xf7, 0xbb, 0xd8, 0x7b,
	0x81, 0xbd, 0x4d, 0xf7, 0xcc, 0xdc, 0xa4, 0x04, 0x9b, 0xa4, 0x7f, 0xf6, 0xec, 0x82, 0x6c, 0x5e,
	0x10, 0xb6, 0x40, 0xdd, 0x98, 0x48, 0xe9, 0x19, 0xae, 0x8b, 0x3d, 0x4e, 0xaf, 0x7d, 0x0b, 0x60,
	0xc7, 0x19, 0x8d, 0x1c, 0x5b, 0xc7, 0xc4, 0x45, 0x6d, 0x98, 0xd9, 0xf3, 0xbc, 0x1d, 0xa7, 0x8f,
	0xdb, 0xca, 0xba, 0x72, 0xb7, 0xaa, 0xcf, 0x60, 0xf6, 0x89, 0x56, 0xa0, 0xb6, 0xe7, 0x79, 0x87,
	0xc4, 0x6c, 0x57, 0xd6, 0x95, 0xbb, 0x75, 0xbd, 0x86, 0xe9, 0x97, 0xf6, 0x11, 0xa0, 0x47, 0x21,
	0x8b, 0x0f, 0xfb, 0xfd, 0x43, 0x3c, 0x3a, 0xc5, 0x5e, 0xc7, 0x1e, 0x38, 0x21, 0xf5, 0xc7, 0x04,
	0x7b, 0x9d, 0x5d, 0xba, 0x4d, 0x5d, 0xaf, 0x05, 0xf4, 0x0b, 0xad, 0x42, 0x5d, 0x77, 0x86, 0xf8,
	0x09, 0x7e, 0x81, 0x87, 0x74, 0xa3, 0xaa, 0x5e, 0xf7, 0xa2, 0x01, 0xed, 0xbf, 0x0a, 0xcc, 0xef,
	0x78, 0xd8, 0xf0, 0x31, 0xdd, 0x52, 0xc7, 0xe7, 0xe8, 0x21, 0xcc, 0x77, 0x6c, 0xcb, 0x67, 0x5b,
	0x3f, 0xb1, 0x88, 0xdf, 0x56, 0xd6, 0xa7, 0xee, 0xce, 0x6d, 0xdd, 0xd8, 0x60, 0x5a, 0x4a, 0x9f,
	0xad, 0xcf, 0x5b, 0xb1, 0x05, 0xe8, 0x1b, 0x50, 0xa7, 0x54, 0xe1, 0x24, 0x3d, 0x73, 0x6e, 0x6b,
	0x75, 0x83, 0x50, 0xed, 0x3c, 0x33, 0x5c, 0xeb, 0x99, 0x6b, 0x78, 0xc6, 0x88, 0x6c, 0x08, 0x1a,
	0xbd, 0x6e, 0x46, 0xff, 0xa2, 0x75, 0x98, 0x3b, 0x76, 0xb1, 0x67, 0xf8, 0x96, 0x63, 0x77, 0x76,
	0xdb, 0x53, 0x54, 0x98, 0x39, 0x67, 0x3c, 0x84, 0x54, 0x98, 0x3d, 0x76, 0xb9, 0xac, 0xd3, 0x74,
	0x7a, 0xd6, 0xe1, 0xdf, 0x74, 0xf5, 0x85, 0x8d, 0x3d, 0x3e, 0x5d, 0xe5, 0xab, 0xc7, 0x43, 0xda,
	0x67, 0xb0, 0x10, 0x13, 0xb8, 0xcc, 0x15, 0xc4, 0x05, 0x9c, 0x7a, 0x25, 0x01, 0x35, 0x0f, 0x5a,
	0x8f, 0xb0, 0x4f, 0xa7, 0x08, 0x9d, 0xc3, 0xe7, 0x21, 0xdb, 0x8c, 0x76, 0x57, 0x28, 0xbc, 0xae,
	0xcf, 0x99, 0xe3, 0xa1, 0xa4, 0x5a, 0x2a, 0xc5, 0x6a, 0x99, 0x8a, 0xab, 0x45, 0xfb, 0x89, 0x02,
	0x8b, 0x89, 0x43, 0x4b, 0xc9, 0xbd, 0x0d, 0x4d, 0x21, 0x13, 0xe5, 0x74, 0x8a, 0x9a, 0x46, 0xb1,
	0xec, 0x4d, 0x53, 0x5e, 0xa2, 0xfd, 0x5a, 0x81, 0x85, 0x2e, 0xe7, 0x25, 0x92, 0xff, 0x09, 0x2c,
	0x08, 0xa2, 0x7d, 0xc7, 0xeb, 0x62, 0x9f, 0x72, 0x34, 0xb7, 0xa5, 0x15, 0xed, 0xcc, 0x28, 0xf5,
	0xe4, 0xd2, 0x98, 0x26, 0x2a, 0x19, 0x06, 0x52, 0x68, 0x5e, 0xda, 0x1e, 0xb4, 0xe2, 0xec, 0x11,
	0x17, 0x7d, 0x55, 0x76, 0x59, 0xce, 0xda, 0x22, 0xf7, 0x87, 0xf1, 0x84, 0x0e, 0x3d, 0xf1, 0xbf,
	0xf6, 0x43, 0x50, 0x23, 0x8d, 0x3f, 0x74, 0xdd, 0xa1, 0xd5, 0xa3, 0xfb, 0x87, 0x1a, 0x08, 0x05,
	0x96, 0x59, 0x54, 0x8a, 0x59, 0xcc, 0xb8, 0xea, 0x35, 0x80, 0x7d, 0xcf, 0x19, 0xc5, 0x2e, 0x1b,
	0x06, 0x62, 0x44, 0xfb, 0x5c, 0x81, 0x9b, 0xb9, 0x87, 0x97, 0xba, 0xf8, 0xc7, 0xd0, 0x8a, 0x00,
	0x22, 0xc0, 0xc4, 0x97, 0xee, 0xfe, 0x76, 0xde, 0x0d, 0x71, 0x52, 0xbd, 0x65, 0x26, 0x16, 0x6a,
	0x3e, 0xac, 0x3e, 0xc2, 0x7e, 0xc8, 0xab, 0x8e, 0xcf, 0x33, 0x94, 0x93, 0x07, 0x65, 0x57, 0xbb,
	0xd7, 0xdf, 0x28, 0x70, 0xab, 0xe0, 0xd8, 0x52, 0xb7, 0x9c, 0xa9, 0x97, 0x4a, 0x59, 0xbd, 0xfc,
	0x5d, 0x81, 0xe5, 0xa7, 0x9e, 0x61, 0x93, 0x01, 0xf6, 0x28, 0x29, 0x85, 0xb2, 0x50, 0x23, 0x6d,
	0x98, 0xe1, 0xf8, 0xc0, 0x55, 0x32, 0xc3, 0xb1, 0x01, 0xbd, 0x07, 0xf3, 0xc7, 0xc3, 0xbe, 0x8c,
	0x79, 0x4c, 0x33, 0xf3, 0x4e, 0x6c, 0x34, 0xa4, 0x3b, 0xc2, 0x17, 0x32, 0x1d, 0x53, 0xd1, 0xbc,
	0x1d, 0x1b, 0x4d, 0xea, 0x71, 0xba, 0x18, 0x67, 0xaa, 0x09, 0x9c, 0x79, 0x0c, 0x2b, 0x59, 0x02,
	0x94, 0xf3, 0xa0, 0x7f, 0x28, 0xd0, 0xf8, 0xc8, 0xb1, 0x6c, 0xf1, 0x32, 0xe5, 0x6b, 0x61, 0x0d,
	0x40, 0xc7, 0xe7, 0x87, 0x98, 0x10, 0xc3, 0xc4, 0x5c, 0x03, 0xe0, 0x89, 0x91, 0x22, 0x6c, 0xbc,
	0x84, 0xc4, 0x6b, 0x00, 0x21, 0x1f, 0x5d, 0x27, 0xf0, 0x7a, 0x98, 0xca, 0x5c, 0xd5, 0xe1, 0x53,
	0x31, 0x82, 0xee, 0x40, 0xb3, 0x63, 0xbf, 0xb0, 0x7c, 0xa1, 0xda, 0x1a, 0xdd, 0xa3, 0x69, 0xc9,
	0x83, 0xda, 0x36, 0x34, 0x25, 0x69, 0xca, 0xa9, 0xe4, 0xdf, 0xa1, 0x63, 0x27, 0xbc, 0x3a, 0x9c,
	0x70, 0x6c, 0x82, 0xf9, 0x3b, 0x22, 0xcb, 0xa2, 0x14, 0xdf, 0x5e, 0xd2, 0x87, 0x24, 0xfd, 0x4e,
	0xa5, 0xf4, 0x2b, 0x01, 0xce, 0x74, 0x12, 0x70, 0xc2, 0xf9, 0x03, 0xc3, 0xee, 0x0f, 0x71, 0x3f,
	0x84, 0x0e, 0x66, 0x15, 0xf0, 0x5c, 0x8c, 0x20, 0x0d, 0x1a, 0x6c, 0x5e, 0xc7, 0x24, 0x18, 0xfa,
	0x54, 0x41, 0x55, 0xbd, 0xf1, 0x5c, 0x1a, 0xd3, 0x4e, 0x60, 0x35, 0x5f, 0xb4, 0x72, 0xea, 0x1a,
	0x40, 0xe3, 0x24, 0xb0, 0xfc, 0x4b, 0x18, 0xd0, 0xd5, 0x9e, 0xd7, 0x6d, 0x68, 0x4a, 0xe7, 0x94,
	0xe3, 0xf5, 0xb7, 0x0a, 0x2c, 0x47, 0x98, 0x3d, 0x0e, 0xa5, 0x8a, 0xb9, 0xbe, 0x12, 0x20, 0x86,
	0x30, 0xbb, 0x6f, 0x0d, 0x7d, 0xec, 0xd1, 0x0b, 0xad, 0xea, 0xb5, 0x01, 0xfd, 0x0a, 0xcf, 0x3b,
	0xc2, 0x2f, 0xfd, 0x2e, 0x3e, 0xe7, 0xb6, 0x3e, 0x63, 0xb3, 0x4f, 0xed, 0x8f, 0x0a, 0xac, 0x64,
	0xf1, 0x58, 0xea, 0x49, 0xd9, 0x07, 0x18, 0x8d, 0x63, 0x4c, 0xf6, 0x98, 0xbc, 0x97, 0x07, 0x9a,
	0xec, 0xb4, 0xfd, 0x60, 0x38, 0xa4, 0x6f, 0xb2, 0xb4, 0x32, 0x3c, 0x99, 0xf3, 0xc7, 0xe5, 0x10,
	0xec, 0xfe, 0x22, 0xc5, 0xae, 0x08, 0xb8, 0x0a, 0xa1, 0x44, 0x62, 0xab, 0x42, 0x23, 0x31, 0xf9,
	0xb8, 0x2b, 0x41, 0x89, 0xf6, 0x2b, 0x05, 0xae, 0x67, 0xb2, 0xf4, 0x36, 0x55, 0xa8, 0xfd, 0x45,
	0x01, 0xf4, 0xd8, 0xea, 0x9d, 0x49, 0x74, 0xc5, 0x4a, 0xfa, 0x32, 0xb4, 0x42, 0x7a, 0xdc, 0x67,
	0x82, 0x4b, 0xaa, 0x6a, 0x9d, 0x25, 0xc6, 0x43, 0xe6, 0x75, 0x6c, 0x10, 0xc7, 0xe6, 0xea, 0xaa,
	0x79, 0xf4, 0x2b, 0xa9, 0xac, 0x6a, 0xb1, 0xcb, 0xd5, 0x12, 0x2e, 0xf7, 0x01, 0xd4, 0x3b, 0xfd,
	0x2d, 0x06, 0x1d, 0xb9, 0x01, 0x03, 0x3d, 0x9a, 0x02, 0x0e, 0x4b, 0x7c, 0x6a, 0x1e, 0x83, 0x9a,
	0xcf, 0x60, 0x29, 0x25, 0x6e, 0xa9, 0x0b, 0x78, 0x00, 0x4d, 0xc1, 0x85, 0x74, 0x07, 0x2d, 0xee,
	0xea, 0x62, 0x4e, 0x6f, 0x5a, 0x32, 0x99, 0x16, 0x50, 0x5f, 0x0f, 0x9f, 0x03, 0xdc, 0xa7, 0x5c,
	0x44, 0xbe, 0x1e, 0x07, 0x5a, 0x25, 0x05, 0xb4, 0xeb, 0x20, 0x6b, 0xe8, 0x55, 0x71, 0xea, 0xc7,
	0xcc, 0x21, 0x52, 0xe7, 0x5e, 0x29, 0x07, 0xba, 0x74, 0x1e, 0xc0, 0x72, 0x20, 0x2a, 0xff, 0x5f,
	0x15, 0xb8, 0xc6, 0x9e, 0xcc, 0x90, 0xb3, 0xa7, 0x8e, 0x40, 0xe8, 0xc9, 0x38, 0x9c, 0xff, 0x48,
	0x8d, 0x0d, 0x6d, 0x3a, 0x66, 0x68, 0xf7, 0x60, 0x91, 0x9d, 0x25, 0x5b, 0x6b, 0x95, 0x5a, 0xeb,
	0xa2, 0x95, 0x9c, 0x28, 0x34, 0xba, 0x1f, 0x29, 0xb0, 0x9c, 0xc1, 0xf6, 0x1b, 0x35, 0x9d, 0xcf,
	0x15, 0xb8, 0x26, 0x62, 0xfb, 0xe1, 0xf0, 0x32, 0xde, 0x7a, 0xe5, 0x67, 0xe2, 0x78, 0x30, 0x20,
	0xd8, 0x8f, 0x9e, 0x09, 0x87, 0x7e, 0xa1, 0x6b, 0x50, 0xdd, 0x71, 0x02, 0xdb, 0xe7, 0x8f, 0x44,
	0xb5, 0x17, 0x7e, 0x68, 0xbf, 0x94, 0x9e, 0x31, 0x89, 0xbd, 0xb7, 0x0a, 0x6f, 0xbf, 0x53, 0x60,
	0x76, 0xe7, 0xb0, 0x4b, 0xc9, 0xe2, 0xa9, 0xbb, 0xf2, 0x6a, 0xb5, 0x89, 0x0d, 0x5e, 0x79, 0x11,
	0x01, 0xf3, 0x91, 0x31, 0x8a, 0xc2, 0x4d, 0x64, 0xa6, 0x66, 0x42, 0x98, 0x8c, 0xd3, 0x0b, 0x0d,
	0xb7, 0xcc, 0xc4, 0xb8, 0xf6, 0x67, 0x05, 0x1a, 0x22, 0x45, 0x0f, 0xef, 0x73, 0x17, 0xe0, 0x3b,
	0x86, 0x69, 0xd9, 0xf4, 0x1e, 0x38, 0xa7, 0x77, 0x32, 0x38, 0xe5, 0x19, 0xc4, 0x98, 0x56, 0x07,
	0x57, 0xfc, 0x8f, 0x56, 0xb9, 0xb8, 0x12, 0xa7, 0x4c, 0x20, 0xca, 0x60, 0xbe, 0x33, 0x4d, 0x7e,
	0xca, 0xfe, 0xa9, 0x40, 0x53, 0x62, 0x98, 0xb8, 0xe8, 0x3e, 0xd4, 0x23, 0x35, 0x13, 0x5e, 0x34,
	0x5a, 0x88, 0x82, 0x1e, 0x3e, 0xae, 0xd7, 0x7b, 0x11, 0x05, 0xda, 0x8b, 0x09, 0xc8, 0xca, 0x44,
	0x5f, 0xca, 0x14, 0x90, 0x45, 0x81, 0x39, 0x12, 0xaa, 0x30, 0xcb, 0x24, 0x0c, 0x46, 0x54, 0x88,
	0xaa, 0x3e, 0x6b, 0xf2, 0xef, 0x30, 0x0e, 0x1b, 0x87, 0x58, 0x54, 0x88, 0x89, 0x71, 0xd8, 0xf1,
	0xb8, 0x52, 0x72, 0x19, 0xdf, 0x9a, 0x08, 0x58, 0xda, 0xdf, 0x52, 0x81, 0x1d, 0xd9, 0x39, 0xec,
	0x4e, 0xf4, 0xd8, 0x84, 0x79, 0xcd, 0x06, 0x91, 0x51, 0xc5, 0xed, 0x62, 0xaa, 0xa4, 0x5d, 0x4c,
	0xbe, 0xdf, 0xff, 0xa5, 0xa3, 0x27, 0xca, 0x37, 0x71, 0xd1, 0xb7, 0x61, 0x86, 0xb9, 0x57, 0x74,
	0xcd, 0x97, 0xf5, 0xca, 0x68, 0xd9, 0x17, 0x75, 0xf7, 0x6b, 0x00, 0xec, 0x84, 0xa3, 0x60, 0x44,
	0xf8, 0xed, 0x73, 0xcf, 0x0f, 0x47, 0xca, 0xdc, 0xbf, 0x05, 0x0b, 0xbb, 0x16, 0x19, 0x59, 0x84,
	0x88, 0x47, 0x49, 0x05, 0x81, 0x97, 0x59, 0xc5, 0x1a, 0x67, 0xe2, 0x83, 0x65, 0x66, 0xfa, 0x98,
	0xb6, 0x07, 0xad, 0xf8, 0x51, 0x2c, 0x73, 0xe8, 0xbd, 0x62, 0xe6, 0xf0, 0x07, 0x05, 0xd0, 0x61,
	0xc0, 0x0b, 0x9a, 0x63, 0x9b, 0x7d, 0x4d, 0x5c, 0x87, 0x68, 0x1d, 0xc8, 0x79, 0x60, 0x14, 0x6c,
	0x69, 0xd0, 0x18, 0x05, 0x3e, 0xee, 0x77, 0x71, 0xcf, 0xb1, 0xfb, 0x84, 0x3e, 0x0b, 0x4d, 0x3d,
	0x36, 0xa6, 0x1d, 0xc0, 0x52, 0x8a, 0xd3, 0x72, 0x42, 0xff, 0x54, 0x81, 0xf6, 0x8e, 0x61, 0xf7,
	0xf0, 0xf0, 0xed, 0x8b, 0xae, 0x1d, 0xc1, 0x8d, 0x1c, 0x5e, 0xca, 0x09, 0x37, 0x80, 0x86, 0xd8,
	0xe9, 0x75, 0x1a, 0xe0, 0x36, 0x34, 0xa5, 0x73, 0xca, 0xf1, 0x3a, 0x04, 0x94, 0x90, 0xfd, 0x75,
	0x72, 0x7c, 0x00, 0x4b, 0xa9, 0xd3, 0xca, 0xf1, 0xfd, 0x7b, 0x05, 0x6e, 0x74, 0x63, 0xf0, 0x76,
	0x64, 0xf5, 0xce, 0x6c, 0x63, 0x84, 0x39, 0x34, 0x9b, 0xb9, 0xd0, 0x6c, 0x73, 0xc2, 0x08, 0x9a,
	0xa3, 0xef, 0x98, 0xd4, 0x53, 0xc5, 0x52, 0x4f, 0x67, 0x06, 0x5a, 0x81, 0x5c, 0x56, 0x8b, 0xac,
	0xeb, 0x18, 0xd4, 0x3c, 0x46, 0xcb, 0x95, 0x1a, 0x3c, 0x5a, 0x9a, 0x66, 0x59, 0x40, 0x37, 0x70,
	0x79, 0xad, 0x2e, 0x4a, 0x41, 0x12, 0x8c, 0x2a, 0x45, 0x8c, 0x56, 0x92, 0xf5, 0xd9, 0x3c, 0xf1,
	0xb5, 0x9f, 0xb1, 0x92, 0x74, 0xf6, 0xa1, 0xa5, 0x6e, 0xf0, 0x4a, 0x09, 0xc8, 0x05, 0x7d, 0x93,
	0xc7, 0x7c, 0xbc, 0xb1, 0x4e, 0xcc, 0xcf, 0xd9, 0xab, 0x9a, 0x3a, 0xb9, 0x9c, 0x0a, 0xbe, 0x88,
	0x7e, 0xcc, 0x7f, 0x2a, 0xb0, 0x1c, 0xb7, 0x2f, 0xa9, 0x48, 0x92, 0xe3, 0x04, 0x25, 0x2c, 0xe0,
	0x12, 0x0e, 0xf0, 0x35, 0xc9, 0xb5, 0xaa, 0x3c, 0x32, 0x37, 0x1d, 0xc7, 0x1c, 0x62, 0xd6, 0x39,
	0x3d, 0x0d, 0x06, 0x1b, 0x5d, 0xdf, 0xb3, 0x6c, 0xf3, 0xbb, 0xc6, 0x30, 0xc0, 0x92, 0xe3, 0x3d,
	0x80, 0x99, 0x81, 0xd1, 0xc3, 0x1f, 0xeb, 0x4f, 0x68, 0xce, 0x36, 0x69, 0x61, 0x44, 0x8c, 0xbe,
	0x0e, 0xe3, 0x5e, 0x68, 0x7b, 0x86, 0xae, 0xbc, 0x99, 0x5a, 0xd9, 0xb1, 0xfd, 0xf7, 0xb7, 0xd8,
	0xc2, 0x31, 0x35, 0xba, 0x07, 0x15, 0xfc, 0xb2, 0x3d, 0x7b, 0x89, 0xd3, 0x2a, 0xf8, 0xa5, 0xf6,
	0x18, 0x56, 0xb2, 0x74, 0x5c, 0xce, 0x7f, 0xcf, 0xc7, 0x35, 0xa4, 0x87, 0xa7, 0xc4, 0xf7, 0x8c,
	0x9e, 0x3f, 0xf9, 0xca, 0xe4, 0xab, 0xa9, 0x14, 0x5f, 0x4d, 0x46, 0xf3, 0xe4, 0x4f, 0x0a, 0xb4,
	0xb3, 0xcf, 0x2c, 0xd7, 0x37, 0xb9, 0xc7, 0x3b, 0xef, 0x22, 0x7a, 0x3b, 0xc5, 0x1e, 0x2f, 0xd2,
	0xa4, 0x27, 0xd0, 0x57, 0x60, 0xc9, 0x8c, 0xd7, 0x1c, 0x0f, 0x0c, 0xf2, 0x9c, 0xf2, 0x39, 0xad,
	0x67, 0x4d, 0x6d, 0xfd, 0xab, 0x05, 0xac, 0x8f, 0x8f, 0xbe, 0x09, 0x73, 0xbd, 0x71, 0xbf, 0x17,
	0x2d, 0x47, 0x7c, 0xc5, 0x9a, 0xde, 0xea, 0x4a, 0xd6, 0x30, 0x71, 0xd1, 0x03, 0xa8, 0x7f, 0x1a,
	0x15, 0xed, 0xd1, 0x12, 0x27, 0x92, 0x9b, 0x12, 0xea, 0xb5, 0xf4, 0x20, 0x5b, 0x77, 0x1e, 0x55,
	0x84, 0xc5, 0x3a, 0xb9, 0x16, 0x2d, 0xd6, 0xc5, 0x0b, 0xc7, 0xdb, 0xd0, 0x34, 0xe5, 0x3e, 0x2d,
	0xba, 0x1e, 0x75, 0xdd, 0x13, 0x2d, 0x63, 0xb5, 0x9d, 0x3d, 0x41, 0x5c, 0xf4, 0x21, 0x34, 0x88,
	0xd4, 0xc0, 0x44, 0x91, 0x6c, 0x89, 0xa6, 0xab, 0x7a, 0x3d, 0x73, 0x9c, 0xb8, 0xe8, 0x07, 0x70,
	0xdd, 0xcc, 0xee, 0x1e, 0xa2, 0x77, 0x12, 0xa7, 0xa6, 0xbb, 0x77, 0xaa, 0x36, 0x89, 0x84, 0xb8,
	0x68, 0x00, 0x37, 0xcc, 0xbc, 0x56, 0x1c, 0x7a, 0x77, 0xbc, 0x41, 0x6e, 0x8f, 0x50, 0xbd, 0x33,
	0x99, 0x88, 0xb8, 0xe8, 0x04, 0x90, 0x9f, 0xea, 0x47, 0xa1, 0x55, 0xbe, 0x36, 0xb3, 0xd7, 0xa6,
	0xde, 0x2a, 0x98, 0x25, 0x2e, 0xea, 0x41, 0xdb, 0xcc, 0x69, 0x53, 0x20, 0x2d, 0xf6, 0x13, 0x89,
	0xcc, 0x16, 0x8d, 0xfa, 0xee, 0x44, 0x1a, 0xc6, 0xb7, 0x99, 0xaa, 0xb3, 0x0b, 0xbe, 0x33, 0xdb,
	0x04, 0x82, 0xef, 0x9c, 0x02, 0xfd, 0x53, 0x58, 0x32, 0xd3, 0x85, 0x67, 0x94, 0xbd, 0x4a, 0x58,
	0xd9, 0x5a, 0xd1, 0x34, 0x71, 0xd1, 0x01, 0x2c, 0x9c, 0xc5, 0x2b, 0xa9, 0x28, 0xfa, 0x9d, 0x48,
	0xba, 0xa0, 0xac, 0xaa, 0x79, 0x53, 0x42, 0xe4, 0x44, 0x69, 0x52, 0x16, 0x39, 0x5d, 0x2d, 0x95,
	0x45, 0xce, 0xaa, 0x69, 0x1e, 0x01, 0xaf, 0xef, 0x49, 0xd5, 0x3a, 0x74, 0x33, 0x2a, 0xb0, 0x65,
	0x94, 0x1f, 0xd5, 0xd5, 0xfc, 0x49, 0xb6, 0x9f, 0x99, 0x2c, 0x6d, 0x89, 0xfd, 0xb2, 0x6a, 0x72,
	0xea, 0x6a, 0xfe, 0x24, 0x03, 0x09, 0xe1, 0xbd, 0x02, 0x24, 0xe4, 0x1a, 0x90, 0x00, 0x89, 0x78,
	0x9d, 0xe5, 0x04, 0x50, 0x3a, 0x31, 0xcf, 0xb1, 0x0e, 0x5e, 0x6b, 0xc8, 0xb1, 0x0e, 0x91, 0xd1,
	0x7f, 0x08, 0x0d, 0x39, 0x15, 0x15, 0x98, 0x91, 0x48, 0x85, 0x05, 0x66, 0xa4, 0xf2, 0xd6, 0x03,
	0x58, 0x48, 0x24, 0x3f, 0xc2, 0x10, 0xd2, 0x09, 0x9a, 0x30, 0x84, 0xac, 0x7c, 0xe9, 0x13, 0x58,
	0xce, 0x4c, 0xa6, 0xd0, 0xed, 0x08, 0xa3, 0x73, 0xd2, 0x3e, 0x75, 0xbd, 0x98, 0x80, 0x69, 0x5c,
	0x0c, 0x0b, 0x8d, 0xcb, 0x89, 0x8b, 0xd0, 0x78, 0x3c, 0xbf, 0x38, 0x80, 0x85, 0xc4, 0xa6, 0x42,
	0xba, 0x74, 0xf2, 0x23, 0xa4, 0xcb, 0xca, 0x54, 0xbe, 0x9f, 0x0c, 0x04, 0xa2, 0x60, 0x1e, 0xad,
	0x27, 0xe0, 0x38, 0x95, 0x94, 0xa8, 0xef, 0x4c, 0xa0, 0x60, 0xd0, 0x9d, 0x13, 0x65, 0xcb, 0xd0,
	0x9d, 0x13, 0xfa, 0xcb, 0xd0, 0x9d, 0x1b, 0xa8, 0x33, 0xe3, 0x4b, 0xc4, 0xaf, 0xb2, 0xf1, 0xa5,
	0x83, 0x6a, 0xd9, 0xf8, 0xb2, 0x02, 0xdf, 0x13, 0x40, 0xe9, 0xe0, 0x48, 0x6c, 0x99, 0x19, 0x9b,
	0x8a, 0x2d, 0x73, 0xa2, 0xaa, 0xef, 0x49, 0x45, 0x72, 0x29, 0x5c, 0x41, 0x49, 0x3c, 0x4b, 0xc4,
	0x4f, 0xea, 0xed, 0xc2, 0x79, 0xe2, 0x6e, 0xdf, 0xfe, 0xe4, 0xd6, 0xb1, 0x8b, 0xed, 0x67, 0x9d,
	0x43, 0xe9, 0x77, 0x7e, 0x74, 0xcd, 0x07, 0xf4, 0xef, 0x69, 0x8d, 0x0e, 0xbd, 0xff, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x64, 0xb5, 0x39, 0xb8, 0x5a, 0x28, 0x00, 0x00,
}
