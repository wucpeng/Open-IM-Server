// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/auth.proto

/*
Package pbAuth is a generated protocol buffer package.

It is generated from these files:
	auth/auth.proto

It has these top-level messages:
	CommonResp
	UserRegisterReq
	UserRegisterResp
	UserTokenReq
	UserTokenResp
	ForceLogoutReq
	ForceLogoutResp
	ParseTokenReq
	ParseTokenResp
*/
package pbAuth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import server_api_params "Open_IM/pkg/proto/sdk_ws"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CommonResp) Reset()                    { *m = CommonResp{} }
func (m *CommonResp) String() string            { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()               {}
func (*CommonResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CommonResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type UserRegisterReq struct {
	UserInfo    *server_api_params.UserInfo `protobuf:"bytes,1,opt,name=UserInfo,json=userInfo" json:"UserInfo,omitempty"`
	OperationID string                      `protobuf:"bytes,2,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *UserRegisterReq) Reset()                    { *m = UserRegisterReq{} }
func (m *UserRegisterReq) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterReq) ProtoMessage()               {}
func (*UserRegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserRegisterReq) GetUserInfo() *server_api_params.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *UserRegisterReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type UserRegisterResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *UserRegisterResp) Reset()                    { *m = UserRegisterResp{} }
func (m *UserRegisterResp) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterResp) ProtoMessage()               {}
func (*UserRegisterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserRegisterResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type UserTokenReq struct {
	Platform    int32  `protobuf:"varint,1,opt,name=Platform,json=platform" json:"Platform,omitempty"`
	FromUserID  string `protobuf:"bytes,2,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	LoginIp     string `protobuf:"bytes,5,opt,name=LoginIp,json=loginIp" json:"LoginIp,omitempty"`
}

func (m *UserTokenReq) Reset()                    { *m = UserTokenReq{} }
func (m *UserTokenReq) String() string            { return proto.CompactTextString(m) }
func (*UserTokenReq) ProtoMessage()               {}
func (*UserTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserTokenReq) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *UserTokenReq) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

func (m *UserTokenReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *UserTokenReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *UserTokenReq) GetLoginIp() string {
	if m != nil {
		return m.LoginIp
	}
	return ""
}

type UserTokenResp struct {
	CommonResp  *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
	Token       string      `protobuf:"bytes,2,opt,name=Token,json=token" json:"Token,omitempty"`
	ExpiredTime int64       `protobuf:"varint,3,opt,name=ExpiredTime,json=expiredTime" json:"ExpiredTime,omitempty"`
}

func (m *UserTokenResp) Reset()                    { *m = UserTokenResp{} }
func (m *UserTokenResp) String() string            { return proto.CompactTextString(m) }
func (*UserTokenResp) ProtoMessage()               {}
func (*UserTokenResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserTokenResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *UserTokenResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserTokenResp) GetExpiredTime() int64 {
	if m != nil {
		return m.ExpiredTime
	}
	return 0
}

type ForceLogoutReq struct {
	Platform    int32  `protobuf:"varint,1,opt,name=Platform,json=platform" json:"Platform,omitempty"`
	FromUserID  string `protobuf:"bytes,2,opt,name=FromUserID,json=fromUserID" json:"FromUserID,omitempty"`
	OpUserID    string `protobuf:"bytes,3,opt,name=OpUserID,json=opUserID" json:"OpUserID,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
}

func (m *ForceLogoutReq) Reset()                    { *m = ForceLogoutReq{} }
func (m *ForceLogoutReq) String() string            { return proto.CompactTextString(m) }
func (*ForceLogoutReq) ProtoMessage()               {}
func (*ForceLogoutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ForceLogoutReq) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ForceLogoutReq) GetFromUserID() string {
	if m != nil {
		return m.FromUserID
	}
	return ""
}

func (m *ForceLogoutReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

func (m *ForceLogoutReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type ForceLogoutResp struct {
	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,json=commonResp" json:"CommonResp,omitempty"`
}

func (m *ForceLogoutResp) Reset()                    { *m = ForceLogoutResp{} }
func (m *ForceLogoutResp) String() string            { return proto.CompactTextString(m) }
func (*ForceLogoutResp) ProtoMessage()               {}
func (*ForceLogoutResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ForceLogoutResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type ParseTokenReq struct {
	Token       string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *ParseTokenReq) Reset()                    { *m = ParseTokenReq{} }
func (m *ParseTokenReq) String() string            { return proto.CompactTextString(m) }
func (*ParseTokenReq) ProtoMessage()               {}
func (*ParseTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ParseTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ParseTokenReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type ParseTokenResp struct {
	UserID            string      `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Platform          string      `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	CommonResp        *CommonResp `protobuf:"bytes,3,opt,name=commonResp" json:"commonResp,omitempty"`
	ExpireTimeSeconds uint32      `protobuf:"varint,4,opt,name=expireTimeSeconds" json:"expireTimeSeconds,omitempty"`
}

func (m *ParseTokenResp) Reset()                    { *m = ParseTokenResp{} }
func (m *ParseTokenResp) String() string            { return proto.CompactTextString(m) }
func (*ParseTokenResp) ProtoMessage()               {}
func (*ParseTokenResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ParseTokenResp) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ParseTokenResp) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ParseTokenResp) GetCommonResp() *CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *ParseTokenResp) GetExpireTimeSeconds() uint32 {
	if m != nil {
		return m.ExpireTimeSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*CommonResp)(nil), "pbAuth.CommonResp")
	proto.RegisterType((*UserRegisterReq)(nil), "pbAuth.UserRegisterReq")
	proto.RegisterType((*UserRegisterResp)(nil), "pbAuth.UserRegisterResp")
	proto.RegisterType((*UserTokenReq)(nil), "pbAuth.UserTokenReq")
	proto.RegisterType((*UserTokenResp)(nil), "pbAuth.UserTokenResp")
	proto.RegisterType((*ForceLogoutReq)(nil), "pbAuth.ForceLogoutReq")
	proto.RegisterType((*ForceLogoutResp)(nil), "pbAuth.ForceLogoutResp")
	proto.RegisterType((*ParseTokenReq)(nil), "pbAuth.ParseTokenReq")
	proto.RegisterType((*ParseTokenResp)(nil), "pbAuth.ParseTokenResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error)
	ForceLogout(ctx context.Context, in *ForceLogoutReq, opts ...grpc.CallOption) (*ForceLogoutResp, error)
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	out := new(UserRegisterResp)
	err := grpc.Invoke(ctx, "/pbAuth.Auth/UserRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error) {
	out := new(UserTokenResp)
	err := grpc.Invoke(ctx, "/pbAuth.Auth/UserToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ForceLogout(ctx context.Context, in *ForceLogoutReq, opts ...grpc.CallOption) (*ForceLogoutResp, error) {
	out := new(ForceLogoutResp)
	err := grpc.Invoke(ctx, "/pbAuth.Auth/ForceLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	out := new(ParseTokenResp)
	err := grpc.Invoke(ctx, "/pbAuth.Auth/ParseToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	UserToken(context.Context, *UserTokenReq) (*UserTokenResp, error)
	ForceLogout(context.Context, *ForceLogoutReq) (*ForceLogoutResp, error)
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/UserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UserToken(ctx, req.(*UserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ForceLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ForceLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/ForceLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ForceLogout(ctx, req.(*ForceLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/ParseToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbAuth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _Auth_UserRegister_Handler,
		},
		{
			MethodName: "UserToken",
			Handler:    _Auth_UserToken_Handler,
		},
		{
			MethodName: "ForceLogout",
			Handler:    _Auth_ForceLogout_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Auth_ParseToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

func init() { proto.RegisterFile("auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xdb, 0x26, 0x4d, 0xc7, 0xa4, 0x81, 0x55, 0x48, 0x2d, 0x23, 0x20, 0xf2, 0x29, 0x07,
	0x6a, 0x4b, 0xe1, 0x00, 0x52, 0xa5, 0x4a, 0xa5, 0x34, 0xc8, 0x52, 0xa3, 0x54, 0x6e, 0xb9, 0x70,
	0x89, 0xdc, 0x64, 0xe3, 0x5a, 0x89, 0xbd, 0xcb, 0xae, 0x4d, 0x91, 0xb8, 0x70, 0xe6, 0x67, 0x70,
	0xe0, 0x77, 0xa2, 0xfd, 0xf0, 0x47, 0xda, 0x08, 0xa4, 0x5e, 0x7a, 0x49, 0x3c, 0x6f, 0x66, 0x67,
	0xde, 0xbc, 0x99, 0x5d, 0xe8, 0x84, 0x79, 0x76, 0xe3, 0x89, 0x1f, 0x97, 0x32, 0x92, 0x11, 0xd4,
	0xa4, 0xd7, 0x27, 0x79, 0x76, 0x63, 0x0f, 0x26, 0x14, 0xa7, 0x87, 0xfe, 0xf8, 0xf0, 0x12, 0xb3,
	0x6f, 0x98, 0x79, 0x74, 0x19, 0x79, 0x32, 0xc2, 0xe3, 0xf3, 0xe5, 0xf4, 0x96, 0x7b, 0xb7, 0x5c,
	0x9d, 0x70, 0x8e, 0x01, 0x4e, 0x49, 0x92, 0x90, 0x34, 0xc0, 0x9c, 0x22, 0x0b, 0x76, 0x31, 0x63,
	0xa7, 0x64, 0x8e, 0x2d, 0xa3, 0x6f, 0x0c, 0x1a, 0x41, 0x61, 0xa2, 0x1e, 0x34, 0x31, 0x63, 0x63,
	0x1e, 0x59, 0x5b, 0x7d, 0x63, 0xb0, 0x17, 0x68, 0xcb, 0x59, 0x41, 0xe7, 0x33, 0xc7, 0x2c, 0xc0,
	0x51, 0xcc, 0x33, 0xf1, 0xff, 0x15, 0xbd, 0x83, 0x96, 0x80, 0xfc, 0x74, 0x41, 0x64, 0x16, 0x73,
	0xf8, 0xc2, 0xe5, 0x92, 0xc7, 0x34, 0xa4, 0xf1, 0x94, 0x86, 0x2c, 0x4c, 0xb8, 0x5b, 0x84, 0x04,
	0xad, 0x5c, 0x7f, 0xa1, 0x3e, 0x98, 0x13, 0x8a, 0x59, 0x98, 0xc5, 0x24, 0xf5, 0x3f, 0xea, 0x42,
	0x26, 0xa9, 0x20, 0x67, 0x04, 0x4f, 0xd7, 0xab, 0x71, 0x8a, 0x86, 0xf5, 0x0e, 0x74, 0x41, 0xe4,
	0x2a, 0x21, 0xdc, 0xca, 0x13, 0xc0, 0xac, 0xfc, 0x76, 0x7e, 0x1b, 0xf0, 0x44, 0x24, 0xba, 0x22,
	0x4b, 0x9c, 0x0a, 0xce, 0x36, 0xb4, 0x2e, 0x56, 0x61, 0xb6, 0x20, 0x2c, 0xd1, 0x9d, 0xb7, 0xa8,
	0xb6, 0xd1, 0x2b, 0x80, 0x11, 0x23, 0x89, 0x24, 0x5c, 0xb0, 0x82, 0x45, 0x89, 0x88, 0xb3, 0x13,
	0xaa, 0xbd, 0xdb, 0xd2, 0xdb, 0x22, 0xda, 0xbe, 0xdb, 0xd2, 0xce, 0xbd, 0x96, 0x84, 0xe4, 0xe7,
	0x24, 0x8a, 0x53, 0x9f, 0x5a, 0x0d, 0xe9, 0xdd, 0x5d, 0x29, 0xd3, 0xf9, 0x01, 0xed, 0x1a, 0xc7,
	0x87, 0x75, 0x8a, 0xba, 0xd0, 0x90, 0x09, 0x34, 0xef, 0x46, 0x26, 0x0c, 0x41, 0xeb, 0xec, 0x3b,
	0x8d, 0x19, 0x9e, 0x5f, 0xc5, 0x09, 0x96, 0xac, 0xb7, 0x03, 0x13, 0x57, 0x90, 0xf3, 0xcb, 0x80,
	0xfd, 0x11, 0x61, 0x33, 0x7c, 0x4e, 0x22, 0x92, 0x67, 0x8f, 0xaa, 0x91, 0x73, 0x06, 0x9d, 0x35,
	0x2e, 0x0f, 0x9c, 0xfa, 0x27, 0x68, 0x5f, 0x84, 0x8c, 0xe3, 0x72, 0xea, 0x5d, 0x50, 0x7a, 0xc8,
	0xf3, 0x75, 0x71, 0xc8, 0xbf, 0xd7, 0xf0, 0x8f, 0x01, 0xfb, 0xf5, 0x4c, 0x9c, 0x8a, 0xfb, 0x91,
	0xab, 0xf6, 0x54, 0x2e, 0x6d, 0x89, 0xc6, 0x0b, 0x91, 0x74, 0xa6, 0x4a, 0xb4, 0x21, 0xd4, 0xd8,
	0x49, 0x59, 0xfe, 0x3f, 0xcf, 0x37, 0xf0, 0x4c, 0x8d, 0x49, 0x4c, 0xe9, 0x12, 0xcf, 0x48, 0x3a,
	0xe7, 0x52, 0xb2, 0x76, 0x70, 0xdf, 0x31, 0xfc, 0xb9, 0x05, 0x3b, 0x22, 0x1b, 0x3a, 0x51, 0xfb,
	0x5e, 0x5c, 0x1c, 0x74, 0x50, 0x94, 0xb9, 0x73, 0x79, 0x6d, 0x6b, 0xb3, 0x83, 0x53, 0xf4, 0x1e,
	0xf6, 0xca, 0x75, 0x44, 0xdd, 0x7a, 0x58, 0xa1, 0xa7, 0xfd, 0x7c, 0x03, 0xca, 0x29, 0x3a, 0x06,
	0xb3, 0x36, 0x3e, 0xd4, 0x2b, 0xa2, 0xd6, 0xf7, 0xcb, 0x3e, 0xd8, 0x88, 0x73, 0x8a, 0x8e, 0x00,
	0x2a, 0xb5, 0x51, 0x59, 0x64, 0x6d, 0x96, 0x76, 0x6f, 0x13, 0xcc, 0xe9, 0x87, 0xd7, 0x5f, 0x5e,
	0x8a, 0xc7, 0x70, 0xea, 0x8f, 0x6b, 0xaf, 0xa0, 0x78, 0x32, 0x8f, 0x54, 0xfc, 0x75, 0x53, 0x42,
	0x6f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x72, 0x9e, 0xa2, 0x4d, 0x05, 0x00, 0x00,
}
