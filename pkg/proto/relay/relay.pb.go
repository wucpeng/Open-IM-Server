// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay/relay.proto

/*
Package pbRelay is a generated protocol buffer package.

It is generated from these files:
	relay/relay.proto

It has these top-level messages:
	OnlinePushMsgReq
	OnlinePushMsgResp
	SingelMsgToUserResultList
	OnlineBatchPushOneMsgReq
	OnlineBatchPushOneMsgResp
	SingleMsgToUserPlatform
	GetUsersOnlineStatusReq
	GetUsersOnlineStatusResp
	KickUserOfflineReq
	KickUserOfflineResp
	MultiTerminalLoginCheckReq
	MultiTerminalLoginCheckResp
	OnlineUserReq
	OnlineUserResp
*/
package pbRelay

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import server_api_params "Open_IM/pkg/proto/sdk_ws"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OnlinePushMsgReq struct {
	OperationID  string                     `protobuf:"bytes,1,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	MsgData      *server_api_params.MsgData `protobuf:"bytes,2,opt,name=msgData" json:"msgData,omitempty"`
	PushToUserID string                     `protobuf:"bytes,3,opt,name=pushToUserID" json:"pushToUserID,omitempty"`
}

func (m *OnlinePushMsgReq) Reset()                    { *m = OnlinePushMsgReq{} }
func (m *OnlinePushMsgReq) String() string            { return proto.CompactTextString(m) }
func (*OnlinePushMsgReq) ProtoMessage()               {}
func (*OnlinePushMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OnlinePushMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *OnlinePushMsgReq) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func (m *OnlinePushMsgReq) GetPushToUserID() string {
	if m != nil {
		return m.PushToUserID
	}
	return ""
}

type OnlinePushMsgResp struct {
	Resp []*SingleMsgToUserPlatform `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *OnlinePushMsgResp) Reset()                    { *m = OnlinePushMsgResp{} }
func (m *OnlinePushMsgResp) String() string            { return proto.CompactTextString(m) }
func (*OnlinePushMsgResp) ProtoMessage()               {}
func (*OnlinePushMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OnlinePushMsgResp) GetResp() []*SingleMsgToUserPlatform {
	if m != nil {
		return m.Resp
	}
	return nil
}

type SingelMsgToUserResultList struct {
	UserID     string                     `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Resp       []*SingleMsgToUserPlatform `protobuf:"bytes,2,rep,name=resp" json:"resp,omitempty"`
	OnlinePush bool                       `protobuf:"varint,3,opt,name=onlinePush" json:"onlinePush,omitempty"`
}

func (m *SingelMsgToUserResultList) Reset()                    { *m = SingelMsgToUserResultList{} }
func (m *SingelMsgToUserResultList) String() string            { return proto.CompactTextString(m) }
func (*SingelMsgToUserResultList) ProtoMessage()               {}
func (*SingelMsgToUserResultList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SingelMsgToUserResultList) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SingelMsgToUserResultList) GetResp() []*SingleMsgToUserPlatform {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *SingelMsgToUserResultList) GetOnlinePush() bool {
	if m != nil {
		return m.OnlinePush
	}
	return false
}

type OnlineBatchPushOneMsgReq struct {
	OperationID      string                     `protobuf:"bytes,1,opt,name=OperationID,json=operationID" json:"OperationID,omitempty"`
	MsgData          *server_api_params.MsgData `protobuf:"bytes,2,opt,name=msgData" json:"msgData,omitempty"`
	PushToUserIDList []string                   `protobuf:"bytes,3,rep,name=pushToUserIDList" json:"pushToUserIDList,omitempty"`
}

func (m *OnlineBatchPushOneMsgReq) Reset()                    { *m = OnlineBatchPushOneMsgReq{} }
func (m *OnlineBatchPushOneMsgReq) String() string            { return proto.CompactTextString(m) }
func (*OnlineBatchPushOneMsgReq) ProtoMessage()               {}
func (*OnlineBatchPushOneMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OnlineBatchPushOneMsgReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *OnlineBatchPushOneMsgReq) GetMsgData() *server_api_params.MsgData {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func (m *OnlineBatchPushOneMsgReq) GetPushToUserIDList() []string {
	if m != nil {
		return m.PushToUserIDList
	}
	return nil
}

type OnlineBatchPushOneMsgResp struct {
	SinglePushResult []*SingelMsgToUserResultList `protobuf:"bytes,1,rep,name=singlePushResult" json:"singlePushResult,omitempty"`
}

func (m *OnlineBatchPushOneMsgResp) Reset()                    { *m = OnlineBatchPushOneMsgResp{} }
func (m *OnlineBatchPushOneMsgResp) String() string            { return proto.CompactTextString(m) }
func (*OnlineBatchPushOneMsgResp) ProtoMessage()               {}
func (*OnlineBatchPushOneMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OnlineBatchPushOneMsgResp) GetSinglePushResult() []*SingelMsgToUserResultList {
	if m != nil {
		return m.SinglePushResult
	}
	return nil
}

type SingleMsgToUserPlatform struct {
	ResultCode     int64  `protobuf:"varint,1,opt,name=ResultCode,json=resultCode" json:"ResultCode,omitempty"`
	RecvID         string `protobuf:"bytes,2,opt,name=RecvID,json=recvID" json:"RecvID,omitempty"`
	RecvPlatFormID int32  `protobuf:"varint,3,opt,name=RecvPlatFormID,json=recvPlatFormID" json:"RecvPlatFormID,omitempty"`
}

func (m *SingleMsgToUserPlatform) Reset()                    { *m = SingleMsgToUserPlatform{} }
func (m *SingleMsgToUserPlatform) String() string            { return proto.CompactTextString(m) }
func (*SingleMsgToUserPlatform) ProtoMessage()               {}
func (*SingleMsgToUserPlatform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SingleMsgToUserPlatform) GetResultCode() int64 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *SingleMsgToUserPlatform) GetRecvID() string {
	if m != nil {
		return m.RecvID
	}
	return ""
}

func (m *SingleMsgToUserPlatform) GetRecvPlatFormID() int32 {
	if m != nil {
		return m.RecvPlatFormID
	}
	return 0
}

type GetUsersOnlineStatusReq struct {
	UserIDList  []string `protobuf:"bytes,1,rep,name=userIDList" json:"userIDList,omitempty"`
	OperationID string   `protobuf:"bytes,2,opt,name=operationID" json:"operationID,omitempty"`
	OpUserID    string   `protobuf:"bytes,3,opt,name=opUserID" json:"opUserID,omitempty"`
}

func (m *GetUsersOnlineStatusReq) Reset()                    { *m = GetUsersOnlineStatusReq{} }
func (m *GetUsersOnlineStatusReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsersOnlineStatusReq) ProtoMessage()               {}
func (*GetUsersOnlineStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetUsersOnlineStatusReq) GetUserIDList() []string {
	if m != nil {
		return m.UserIDList
	}
	return nil
}

func (m *GetUsersOnlineStatusReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *GetUsersOnlineStatusReq) GetOpUserID() string {
	if m != nil {
		return m.OpUserID
	}
	return ""
}

type GetUsersOnlineStatusResp struct {
	ErrCode       int32                                     `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg        string                                    `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	SuccessResult []*GetUsersOnlineStatusResp_SuccessResult `protobuf:"bytes,3,rep,name=successResult" json:"successResult,omitempty"`
	FailedResult  []*GetUsersOnlineStatusResp_FailedDetail  `protobuf:"bytes,4,rep,name=failedResult" json:"failedResult,omitempty"`
}

func (m *GetUsersOnlineStatusResp) Reset()                    { *m = GetUsersOnlineStatusResp{} }
func (m *GetUsersOnlineStatusResp) String() string            { return proto.CompactTextString(m) }
func (*GetUsersOnlineStatusResp) ProtoMessage()               {}
func (*GetUsersOnlineStatusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetUsersOnlineStatusResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetUsersOnlineStatusResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetUsersOnlineStatusResp) GetSuccessResult() []*GetUsersOnlineStatusResp_SuccessResult {
	if m != nil {
		return m.SuccessResult
	}
	return nil
}

func (m *GetUsersOnlineStatusResp) GetFailedResult() []*GetUsersOnlineStatusResp_FailedDetail {
	if m != nil {
		return m.FailedResult
	}
	return nil
}

type GetUsersOnlineStatusResp_SuccessDetail struct {
	Platform string `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GetUsersOnlineStatusResp_SuccessDetail) Reset() {
	*m = GetUsersOnlineStatusResp_SuccessDetail{}
}
func (m *GetUsersOnlineStatusResp_SuccessDetail) String() string { return proto.CompactTextString(m) }
func (*GetUsersOnlineStatusResp_SuccessDetail) ProtoMessage()    {}
func (*GetUsersOnlineStatusResp_SuccessDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

func (m *GetUsersOnlineStatusResp_SuccessDetail) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetUsersOnlineStatusResp_SuccessDetail) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetUsersOnlineStatusResp_FailedDetail struct {
	UserID  string `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *GetUsersOnlineStatusResp_FailedDetail) Reset()         { *m = GetUsersOnlineStatusResp_FailedDetail{} }
func (m *GetUsersOnlineStatusResp_FailedDetail) String() string { return proto.CompactTextString(m) }
func (*GetUsersOnlineStatusResp_FailedDetail) ProtoMessage()    {}
func (*GetUsersOnlineStatusResp_FailedDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 1}
}

func (m *GetUsersOnlineStatusResp_FailedDetail) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUsersOnlineStatusResp_FailedDetail) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetUsersOnlineStatusResp_FailedDetail) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetUsersOnlineStatusResp_SuccessResult struct {
	UserID               string                                    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Status               string                                    `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	DetailPlatformStatus []*GetUsersOnlineStatusResp_SuccessDetail `protobuf:"bytes,3,rep,name=detailPlatformStatus" json:"detailPlatformStatus,omitempty"`
}

func (m *GetUsersOnlineStatusResp_SuccessResult) Reset() {
	*m = GetUsersOnlineStatusResp_SuccessResult{}
}
func (m *GetUsersOnlineStatusResp_SuccessResult) String() string { return proto.CompactTextString(m) }
func (*GetUsersOnlineStatusResp_SuccessResult) ProtoMessage()    {}
func (*GetUsersOnlineStatusResp_SuccessResult) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 2}
}

func (m *GetUsersOnlineStatusResp_SuccessResult) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUsersOnlineStatusResp_SuccessResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetUsersOnlineStatusResp_SuccessResult) GetDetailPlatformStatus() []*GetUsersOnlineStatusResp_SuccessDetail {
	if m != nil {
		return m.DetailPlatformStatus
	}
	return nil
}

type KickUserOfflineReq struct {
	OperationID    string   `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	PlatformID     int32    `protobuf:"varint,2,opt,name=platformID" json:"platformID,omitempty"`
	KickUserIDList []string `protobuf:"bytes,3,rep,name=kickUserIDList" json:"kickUserIDList,omitempty"`
}

func (m *KickUserOfflineReq) Reset()                    { *m = KickUserOfflineReq{} }
func (m *KickUserOfflineReq) String() string            { return proto.CompactTextString(m) }
func (*KickUserOfflineReq) ProtoMessage()               {}
func (*KickUserOfflineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *KickUserOfflineReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *KickUserOfflineReq) GetPlatformID() int32 {
	if m != nil {
		return m.PlatformID
	}
	return 0
}

func (m *KickUserOfflineReq) GetKickUserIDList() []string {
	if m != nil {
		return m.KickUserIDList
	}
	return nil
}

type KickUserOfflineResp struct {
}

func (m *KickUserOfflineResp) Reset()                    { *m = KickUserOfflineResp{} }
func (m *KickUserOfflineResp) String() string            { return proto.CompactTextString(m) }
func (*KickUserOfflineResp) ProtoMessage()               {}
func (*KickUserOfflineResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type MultiTerminalLoginCheckReq struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	PlatformID  int32  `protobuf:"varint,2,opt,name=platformID" json:"platformID,omitempty"`
	Token       string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=operationID" json:"operationID,omitempty"`
}

func (m *MultiTerminalLoginCheckReq) Reset()                    { *m = MultiTerminalLoginCheckReq{} }
func (m *MultiTerminalLoginCheckReq) String() string            { return proto.CompactTextString(m) }
func (*MultiTerminalLoginCheckReq) ProtoMessage()               {}
func (*MultiTerminalLoginCheckReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MultiTerminalLoginCheckReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *MultiTerminalLoginCheckReq) GetPlatformID() int32 {
	if m != nil {
		return m.PlatformID
	}
	return 0
}

func (m *MultiTerminalLoginCheckReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MultiTerminalLoginCheckReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

type MultiTerminalLoginCheckResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *MultiTerminalLoginCheckResp) Reset()                    { *m = MultiTerminalLoginCheckResp{} }
func (m *MultiTerminalLoginCheckResp) String() string            { return proto.CompactTextString(m) }
func (*MultiTerminalLoginCheckResp) ProtoMessage()               {}
func (*MultiTerminalLoginCheckResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MultiTerminalLoginCheckResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *MultiTerminalLoginCheckResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type OnlineUserReq struct {
	OperationID string `protobuf:"bytes,1,opt,name=operationID" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *OnlineUserReq) Reset()                    { *m = OnlineUserReq{} }
func (m *OnlineUserReq) String() string            { return proto.CompactTextString(m) }
func (*OnlineUserReq) ProtoMessage()               {}
func (*OnlineUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *OnlineUserReq) GetOperationID() string {
	if m != nil {
		return m.OperationID
	}
	return ""
}

func (m *OnlineUserReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type OnlineUserResp struct {
	PlatformIDs []int32 `protobuf:"varint,1,rep,packed,name=platformIDs" json:"platformIDs,omitempty"`
}

func (m *OnlineUserResp) Reset()                    { *m = OnlineUserResp{} }
func (m *OnlineUserResp) String() string            { return proto.CompactTextString(m) }
func (*OnlineUserResp) ProtoMessage()               {}
func (*OnlineUserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OnlineUserResp) GetPlatformIDs() []int32 {
	if m != nil {
		return m.PlatformIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*OnlinePushMsgReq)(nil), "relay.OnlinePushMsgReq")
	proto.RegisterType((*OnlinePushMsgResp)(nil), "relay.OnlinePushMsgResp")
	proto.RegisterType((*SingelMsgToUserResultList)(nil), "relay.SingelMsgToUserResultList")
	proto.RegisterType((*OnlineBatchPushOneMsgReq)(nil), "relay.OnlineBatchPushOneMsgReq")
	proto.RegisterType((*OnlineBatchPushOneMsgResp)(nil), "relay.OnlineBatchPushOneMsgResp")
	proto.RegisterType((*SingleMsgToUserPlatform)(nil), "relay.SingleMsgToUserPlatform")
	proto.RegisterType((*GetUsersOnlineStatusReq)(nil), "relay.GetUsersOnlineStatusReq")
	proto.RegisterType((*GetUsersOnlineStatusResp)(nil), "relay.GetUsersOnlineStatusResp")
	proto.RegisterType((*GetUsersOnlineStatusResp_SuccessDetail)(nil), "relay.GetUsersOnlineStatusResp.SuccessDetail")
	proto.RegisterType((*GetUsersOnlineStatusResp_FailedDetail)(nil), "relay.GetUsersOnlineStatusResp.FailedDetail")
	proto.RegisterType((*GetUsersOnlineStatusResp_SuccessResult)(nil), "relay.GetUsersOnlineStatusResp.SuccessResult")
	proto.RegisterType((*KickUserOfflineReq)(nil), "relay.KickUserOfflineReq")
	proto.RegisterType((*KickUserOfflineResp)(nil), "relay.KickUserOfflineResp")
	proto.RegisterType((*MultiTerminalLoginCheckReq)(nil), "relay.MultiTerminalLoginCheckReq")
	proto.RegisterType((*MultiTerminalLoginCheckResp)(nil), "relay.MultiTerminalLoginCheckResp")
	proto.RegisterType((*OnlineUserReq)(nil), "relay.OnlineUserReq")
	proto.RegisterType((*OnlineUserResp)(nil), "relay.OnlineUserResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Relay service

type RelayClient interface {
	OnlinePushMsg(ctx context.Context, in *OnlinePushMsgReq, opts ...grpc.CallOption) (*OnlinePushMsgResp, error)
	GetUsersOnlineStatus(ctx context.Context, in *GetUsersOnlineStatusReq, opts ...grpc.CallOption) (*GetUsersOnlineStatusResp, error)
	OnlineBatchPushOneMsg(ctx context.Context, in *OnlineBatchPushOneMsgReq, opts ...grpc.CallOption) (*OnlineBatchPushOneMsgResp, error)
	SuperGroupOnlineBatchPushOneMsg(ctx context.Context, in *OnlineBatchPushOneMsgReq, opts ...grpc.CallOption) (*OnlineBatchPushOneMsgResp, error)
	KickUserOffline(ctx context.Context, in *KickUserOfflineReq, opts ...grpc.CallOption) (*KickUserOfflineResp, error)
	MultiTerminalLoginCheck(ctx context.Context, in *MultiTerminalLoginCheckReq, opts ...grpc.CallOption) (*MultiTerminalLoginCheckResp, error)
	GetUserOnlinePlatformIds(ctx context.Context, in *OnlineUserReq, opts ...grpc.CallOption) (*OnlineUserResp, error)
}

type relayClient struct {
	cc *grpc.ClientConn
}

func NewRelayClient(cc *grpc.ClientConn) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) OnlinePushMsg(ctx context.Context, in *OnlinePushMsgReq, opts ...grpc.CallOption) (*OnlinePushMsgResp, error) {
	out := new(OnlinePushMsgResp)
	err := grpc.Invoke(ctx, "/relay.relay/OnlinePushMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetUsersOnlineStatus(ctx context.Context, in *GetUsersOnlineStatusReq, opts ...grpc.CallOption) (*GetUsersOnlineStatusResp, error) {
	out := new(GetUsersOnlineStatusResp)
	err := grpc.Invoke(ctx, "/relay.relay/GetUsersOnlineStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) OnlineBatchPushOneMsg(ctx context.Context, in *OnlineBatchPushOneMsgReq, opts ...grpc.CallOption) (*OnlineBatchPushOneMsgResp, error) {
	out := new(OnlineBatchPushOneMsgResp)
	err := grpc.Invoke(ctx, "/relay.relay/OnlineBatchPushOneMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) SuperGroupOnlineBatchPushOneMsg(ctx context.Context, in *OnlineBatchPushOneMsgReq, opts ...grpc.CallOption) (*OnlineBatchPushOneMsgResp, error) {
	out := new(OnlineBatchPushOneMsgResp)
	err := grpc.Invoke(ctx, "/relay.relay/SuperGroupOnlineBatchPushOneMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) KickUserOffline(ctx context.Context, in *KickUserOfflineReq, opts ...grpc.CallOption) (*KickUserOfflineResp, error) {
	out := new(KickUserOfflineResp)
	err := grpc.Invoke(ctx, "/relay.relay/KickUserOffline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) MultiTerminalLoginCheck(ctx context.Context, in *MultiTerminalLoginCheckReq, opts ...grpc.CallOption) (*MultiTerminalLoginCheckResp, error) {
	out := new(MultiTerminalLoginCheckResp)
	err := grpc.Invoke(ctx, "/relay.relay/MultiTerminalLoginCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetUserOnlinePlatformIds(ctx context.Context, in *OnlineUserReq, opts ...grpc.CallOption) (*OnlineUserResp, error) {
	out := new(OnlineUserResp)
	err := grpc.Invoke(ctx, "/relay.relay/GetUserOnlinePlatformIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Relay service

type RelayServer interface {
	OnlinePushMsg(context.Context, *OnlinePushMsgReq) (*OnlinePushMsgResp, error)
	GetUsersOnlineStatus(context.Context, *GetUsersOnlineStatusReq) (*GetUsersOnlineStatusResp, error)
	OnlineBatchPushOneMsg(context.Context, *OnlineBatchPushOneMsgReq) (*OnlineBatchPushOneMsgResp, error)
	SuperGroupOnlineBatchPushOneMsg(context.Context, *OnlineBatchPushOneMsgReq) (*OnlineBatchPushOneMsgResp, error)
	KickUserOffline(context.Context, *KickUserOfflineReq) (*KickUserOfflineResp, error)
	MultiTerminalLoginCheck(context.Context, *MultiTerminalLoginCheckReq) (*MultiTerminalLoginCheckResp, error)
	GetUserOnlinePlatformIds(context.Context, *OnlineUserReq) (*OnlineUserResp, error)
}

func RegisterRelayServer(s *grpc.Server, srv RelayServer) {
	s.RegisterService(&_Relay_serviceDesc, srv)
}

func _Relay_OnlinePushMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlinePushMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).OnlinePushMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/OnlinePushMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).OnlinePushMsg(ctx, req.(*OnlinePushMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetUsersOnlineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersOnlineStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetUsersOnlineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/GetUsersOnlineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetUsersOnlineStatus(ctx, req.(*GetUsersOnlineStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_OnlineBatchPushOneMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineBatchPushOneMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).OnlineBatchPushOneMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/OnlineBatchPushOneMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).OnlineBatchPushOneMsg(ctx, req.(*OnlineBatchPushOneMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_SuperGroupOnlineBatchPushOneMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineBatchPushOneMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).SuperGroupOnlineBatchPushOneMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/SuperGroupOnlineBatchPushOneMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).SuperGroupOnlineBatchPushOneMsg(ctx, req.(*OnlineBatchPushOneMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_KickUserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).KickUserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/KickUserOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).KickUserOffline(ctx, req.(*KickUserOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_MultiTerminalLoginCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTerminalLoginCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).MultiTerminalLoginCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/MultiTerminalLoginCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).MultiTerminalLoginCheck(ctx, req.(*MultiTerminalLoginCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetUserOnlinePlatformIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetUserOnlinePlatformIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.relay/GetUserOnlinePlatformIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetUserOnlinePlatformIds(ctx, req.(*OnlineUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relay.relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlinePushMsg",
			Handler:    _Relay_OnlinePushMsg_Handler,
		},
		{
			MethodName: "GetUsersOnlineStatus",
			Handler:    _Relay_GetUsersOnlineStatus_Handler,
		},
		{
			MethodName: "OnlineBatchPushOneMsg",
			Handler:    _Relay_OnlineBatchPushOneMsg_Handler,
		},
		{
			MethodName: "SuperGroupOnlineBatchPushOneMsg",
			Handler:    _Relay_SuperGroupOnlineBatchPushOneMsg_Handler,
		},
		{
			MethodName: "KickUserOffline",
			Handler:    _Relay_KickUserOffline_Handler,
		},
		{
			MethodName: "MultiTerminalLoginCheck",
			Handler:    _Relay_MultiTerminalLoginCheck_Handler,
		},
		{
			MethodName: "GetUserOnlinePlatformIds",
			Handler:    _Relay_GetUserOnlinePlatformIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/relay.proto",
}

func init() { proto.RegisterFile("relay/relay.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 876 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x06, 0x2d, 0xc9, 0x89, 0xc7, 0x3f, 0x75, 0xb6, 0x76, 0x4d, 0xb3, 0x80, 0xac, 0xec, 0xa1,
	0x10, 0x8a, 0x5a, 0x02, 0xd4, 0xde, 0x7a, 0xb3, 0x85, 0xb8, 0x42, 0x2d, 0xc8, 0x58, 0xa5, 0x68,
	0x91, 0x8b, 0xcb, 0x48, 0x6b, 0x99, 0x10, 0x45, 0x6e, 0x76, 0xc8, 0x18, 0xb9, 0xf4, 0xda, 0x4b,
	0xd1, 0x47, 0xe8, 0xa1, 0x2f, 0xd1, 0x87, 0xe9, 0xcb, 0x14, 0xfb, 0x43, 0x9a, 0x94, 0x44, 0x3b,
	0x29, 0xe0, 0x8b, 0x8d, 0xf9, 0x38, 0x7f, 0xdf, 0x37, 0xb3, 0xbb, 0x82, 0x17, 0x92, 0x87, 0xfe,
	0x87, 0xae, 0xfe, 0xdb, 0x11, 0x32, 0x4e, 0x62, 0xd2, 0xd0, 0x86, 0xd7, 0x1e, 0x09, 0x1e, 0x9d,
	0x0e, 0x86, 0xa7, 0x63, 0x2e, 0xdf, 0x73, 0xd9, 0x15, 0xf3, 0x59, 0x57, 0x3b, 0x74, 0x71, 0x3a,
	0xbf, 0xbe, 0xc3, 0xee, 0x1d, 0x9a, 0x00, 0xfa, 0xa7, 0x03, 0xfb, 0xa3, 0x28, 0x0c, 0x22, 0x7e,
	0x95, 0xe2, 0xed, 0x10, 0x67, 0x8c, 0xbf, 0x23, 0x2d, 0xd8, 0x1e, 0x09, 0x2e, 0xfd, 0x24, 0x88,
	0xa3, 0x41, 0xdf, 0x75, 0x5a, 0x4e, 0x7b, 0x8b, 0x6d, 0xc7, 0xf7, 0x10, 0xf9, 0x0e, 0x9e, 0x2d,
	0x70, 0xd6, 0xf7, 0x13, 0xdf, 0xdd, 0x68, 0x39, 0xed, 0xed, 0x9e, 0xd7, 0x41, 0x5d, 0xea, 0xda,
	0x17, 0xc1, 0xb5, 0xf0, 0xa5, 0xbf, 0xc0, 0xce, 0xd0, 0x78, 0xb0, 0xcc, 0x95, 0x50, 0xd8, 0x11,
	0x29, 0xde, 0xbe, 0x8e, 0x7f, 0x42, 0x2e, 0x07, 0x7d, 0xb7, 0xa6, 0x13, 0x97, 0x30, 0x7a, 0x01,
	0x2f, 0x96, 0xfa, 0x41, 0x41, 0x7a, 0x50, 0x97, 0x1c, 0x85, 0xeb, 0xb4, 0x6a, 0xed, 0xed, 0x5e,
	0xb3, 0x63, 0x28, 0x8f, 0x83, 0x68, 0x16, 0xf2, 0x21, 0xce, 0x4c, 0xf0, 0x55, 0xe8, 0x27, 0x37,
	0xb1, 0x5c, 0x30, 0xed, 0x4b, 0x7f, 0x77, 0xe0, 0x58, 0x79, 0xf0, 0x30, 0xf7, 0x60, 0x1c, 0xd3,
	0x30, 0xb9, 0x0c, 0x30, 0x21, 0x5f, 0xc0, 0x66, 0x6a, 0x9a, 0x30, 0xec, 0xac, 0x95, 0x57, 0xda,
	0xf8, 0xf8, 0x4a, 0xa4, 0x09, 0x10, 0xe7, 0x2d, 0x6b, 0x52, 0xcf, 0x59, 0x01, 0xa1, 0x7f, 0x39,
	0xe0, 0x1a, 0x4e, 0x67, 0x7e, 0x32, 0xb9, 0x55, 0xd8, 0x28, 0xe2, 0x4f, 0xac, 0xf5, 0xd7, 0xb0,
	0x5f, 0xd4, 0x55, 0x91, 0x76, 0x6b, 0xad, 0x5a, 0x7b, 0x8b, 0xad, 0xe0, 0x34, 0x80, 0xe3, 0x8a,
	0xfe, 0x50, 0x90, 0x4b, 0xd8, 0x47, 0x4d, 0x5f, 0xe1, 0x46, 0x41, 0x3b, 0x87, 0x56, 0x41, 0x9d,
	0xb5, 0x2a, 0xb3, 0x95, 0x48, 0xfa, 0x01, 0x8e, 0x2a, 0xc4, 0x54, 0x32, 0x1a, 0xa7, 0xf3, 0x78,
	0xca, 0xb5, 0x10, 0x35, 0x06, 0x32, 0x47, 0xd4, 0xc8, 0x18, 0x9f, 0xbc, 0x1f, 0xf4, 0xb5, 0x0c,
	0x5b, 0x6c, 0x53, 0x6a, 0x8b, 0x7c, 0x05, 0x7b, 0x0a, 0x57, 0x79, 0x5e, 0xc5, 0x72, 0x61, 0xf7,
	0xaa, 0xc1, 0xf6, 0x64, 0x09, 0xa5, 0x77, 0x70, 0x74, 0xc1, 0x13, 0x55, 0x12, 0x0d, 0xdb, 0x71,
	0xe2, 0x27, 0x29, 0xaa, 0x21, 0x34, 0x01, 0xd2, 0x7b, 0x99, 0x1c, 0x2d, 0x53, 0x01, 0x51, 0x43,
	0x2a, 0x4c, 0xc4, 0xd6, 0x2f, 0x0d, 0xc9, 0x83, 0xe7, 0xb1, 0x28, 0xad, 0x75, 0x6e, 0xd3, 0x7f,
	0xea, 0xe0, 0xae, 0xaf, 0x8c, 0x82, 0xb8, 0xf0, 0x8c, 0x4b, 0x99, 0x53, 0x6e, 0xb0, 0xcc, 0x54,
	0x7c, 0xb9, 0x94, 0x43, 0x9c, 0x65, 0x7c, 0x8d, 0x45, 0xc6, 0xb0, 0x8b, 0xe9, 0x64, 0xc2, 0x11,
	0xed, 0x34, 0x6a, 0x7a, 0x1a, 0xa7, 0x76, 0x1a, 0x55, 0x95, 0x3a, 0xe3, 0x62, 0x10, 0x2b, 0xe7,
	0x20, 0x57, 0xb0, 0x73, 0xe3, 0x07, 0x21, 0x9f, 0xda, 0x9c, 0x75, 0x9d, 0xf3, 0x9b, 0xc7, 0x72,
	0xbe, 0xd2, 0x31, 0x7d, 0x9e, 0xf8, 0x41, 0xc8, 0x4a, 0x19, 0xbc, 0x73, 0xd8, 0xb5, 0x15, 0xcd,
	0x67, 0x25, 0x91, 0xb0, 0xb3, 0xb6, 0x6b, 0x9e, 0xdb, 0x8a, 0x2b, 0xea, 0xac, 0x19, 0x57, 0x63,
	0x79, 0xbf, 0xc0, 0x4e, 0xb1, 0x44, 0xe1, 0xd8, 0xd6, 0x4a, 0xc7, 0xf6, 0x93, 0x55, 0xf4, 0xfe,
	0x76, 0xf2, 0xfe, 0xac, 0x04, 0x55, 0x57, 0x42, 0x45, 0x6f, 0xc4, 0x87, 0x83, 0xa9, 0xee, 0x2a,
	0xdb, 0x60, 0xa3, 0xcb, 0x27, 0x8e, 0xc3, 0x6a, 0xb7, 0x36, 0x15, 0xfd, 0x0d, 0xc8, 0x8f, 0xc1,
	0x64, 0xae, 0x12, 0x8c, 0x6e, 0x6e, 0x54, 0x02, 0x7b, 0x65, 0xc4, 0x0f, 0x5f, 0x19, 0x4d, 0x80,
	0x4c, 0x5a, 0xbb, 0xae, 0x0d, 0x56, 0x40, 0xd4, 0x91, 0x99, 0xdb, 0xbc, 0xa5, 0xab, 0x61, 0x09,
	0xa5, 0x87, 0xf0, 0xf9, 0x4a, 0x7d, 0x14, 0xf4, 0x0f, 0x07, 0xbc, 0x61, 0x1a, 0x26, 0xc1, 0x6b,
	0x2e, 0x17, 0x41, 0xe4, 0x87, 0x97, 0xf1, 0x2c, 0x88, 0xce, 0x6f, 0xf9, 0x64, 0xae, 0xfa, 0xab,
	0x12, 0xf2, 0xb1, 0xae, 0x0e, 0xa0, 0x91, 0xc4, 0x73, 0x1e, 0xd9, 0xd9, 0x1a, 0x63, 0x99, 0x6d,
	0x7d, 0x85, 0x2d, 0x1d, 0xc1, 0x97, 0x95, 0xdd, 0xfc, 0x9f, 0x13, 0x46, 0x07, 0xb0, 0x6b, 0xc6,
	0x65, 0xae, 0xb3, 0x8f, 0x51, 0xfc, 0x9e, 0xf3, 0x46, 0x91, 0x33, 0xed, 0xc1, 0x5e, 0x31, 0x15,
	0x0a, 0x95, 0xeb, 0x9e, 0x33, 0xea, 0xcb, 0xa6, 0xc1, 0x8a, 0x50, 0xef, 0xdf, 0x3a, 0x98, 0x77,
	0x9c, 0x9c, 0x65, 0x8d, 0xd8, 0xc7, 0x90, 0x1c, 0xd9, 0xad, 0x5a, 0x7e, 0xb2, 0x3d, 0x77, 0xfd,
	0x07, 0x14, 0xe4, 0x67, 0x38, 0x58, 0xb7, 0x83, 0xa4, 0xf9, 0xe0, 0x82, 0xbe, 0xf3, 0x4e, 0x1e,
	0x59, 0x60, 0xf2, 0x06, 0x0e, 0xd7, 0xbe, 0x1a, 0xe4, 0xa4, 0xd4, 0xcb, 0xea, 0x9b, 0xe7, 0xb5,
	0x1e, 0x76, 0x40, 0x41, 0xa6, 0x70, 0x32, 0x4e, 0x05, 0x97, 0x17, 0x32, 0x4e, 0xc5, 0x93, 0x55,
	0xf9, 0x01, 0x3e, 0x5b, 0x5a, 0x6f, 0x72, 0x6c, 0x83, 0x56, 0x8f, 0x9d, 0xe7, 0x55, 0x7d, 0x42,
	0x41, 0x7e, 0x85, 0xa3, 0x8a, 0x15, 0x24, 0x2f, 0x6d, 0x58, 0xf5, 0x81, 0xf1, 0xe8, 0x63, 0x2e,
	0x28, 0xc8, 0x45, 0xfe, 0x86, 0xd8, 0x11, 0x67, 0x0b, 0x33, 0x45, 0x72, 0x50, 0x62, 0x6a, 0x97,
	0xd6, 0x3b, 0x5c, 0x83, 0xa2, 0x38, 0x7b, 0xf9, 0xe6, 0x44, 0xfd, 0x3a, 0xbc, 0x1e, 0x0c, 0x0b,
	0x3f, 0x0b, 0xb5, 0xe7, 0xf7, 0xe2, 0x2d, 0x53, 0xff, 0xdf, 0x6e, 0x6a, 0xf0, 0xdb, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xff, 0x9b, 0xc2, 0xb3, 0x61, 0x0a, 0x00, 0x00,
}
